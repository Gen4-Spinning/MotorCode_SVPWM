
gen4_motor_inverter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009088  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08009260  08009260  00019260  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080092a0  080092a0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080092a0  080092a0  000192a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080092a8  080092a8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080092a8  080092a8  000192a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080092ac  080092ac  000192ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080092b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004b0  2000000c  080092bc  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004bc  080092bc  000204bc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00022a33  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000038f9  00000000  00000000  00042a6f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001d98  00000000  00000000  00046368  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001c40  00000000  00000000  00048100  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022930  00000000  00000000  00049d40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00020aea  00000000  00000000  0006c670  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ec204  00000000  00000000  0008d15a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0017935e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008334  00000000  00000000  001793b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08009248 	.word	0x08009248

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	08009248 	.word	0x08009248

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	; 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__aeabi_d2uiz>:
 80009b4:	004a      	lsls	r2, r1, #1
 80009b6:	d211      	bcs.n	80009dc <__aeabi_d2uiz+0x28>
 80009b8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80009bc:	d211      	bcs.n	80009e2 <__aeabi_d2uiz+0x2e>
 80009be:	d50d      	bpl.n	80009dc <__aeabi_d2uiz+0x28>
 80009c0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80009c4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009c8:	d40e      	bmi.n	80009e8 <__aeabi_d2uiz+0x34>
 80009ca:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009ce:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80009d2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009d6:	fa23 f002 	lsr.w	r0, r3, r2
 80009da:	4770      	bx	lr
 80009dc:	f04f 0000 	mov.w	r0, #0
 80009e0:	4770      	bx	lr
 80009e2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009e6:	d102      	bne.n	80009ee <__aeabi_d2uiz+0x3a>
 80009e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80009ec:	4770      	bx	lr
 80009ee:	f04f 0000 	mov.w	r0, #0
 80009f2:	4770      	bx	lr

080009f4 <__aeabi_uldivmod>:
 80009f4:	b953      	cbnz	r3, 8000a0c <__aeabi_uldivmod+0x18>
 80009f6:	b94a      	cbnz	r2, 8000a0c <__aeabi_uldivmod+0x18>
 80009f8:	2900      	cmp	r1, #0
 80009fa:	bf08      	it	eq
 80009fc:	2800      	cmpeq	r0, #0
 80009fe:	bf1c      	itt	ne
 8000a00:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000a04:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000a08:	f000 b974 	b.w	8000cf4 <__aeabi_idiv0>
 8000a0c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a10:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a14:	f000 f806 	bl	8000a24 <__udivmoddi4>
 8000a18:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a1c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a20:	b004      	add	sp, #16
 8000a22:	4770      	bx	lr

08000a24 <__udivmoddi4>:
 8000a24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a28:	9d08      	ldr	r5, [sp, #32]
 8000a2a:	4604      	mov	r4, r0
 8000a2c:	468e      	mov	lr, r1
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d14d      	bne.n	8000ace <__udivmoddi4+0xaa>
 8000a32:	428a      	cmp	r2, r1
 8000a34:	4694      	mov	ip, r2
 8000a36:	d969      	bls.n	8000b0c <__udivmoddi4+0xe8>
 8000a38:	fab2 f282 	clz	r2, r2
 8000a3c:	b152      	cbz	r2, 8000a54 <__udivmoddi4+0x30>
 8000a3e:	fa01 f302 	lsl.w	r3, r1, r2
 8000a42:	f1c2 0120 	rsb	r1, r2, #32
 8000a46:	fa20 f101 	lsr.w	r1, r0, r1
 8000a4a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a4e:	ea41 0e03 	orr.w	lr, r1, r3
 8000a52:	4094      	lsls	r4, r2
 8000a54:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000a58:	0c21      	lsrs	r1, r4, #16
 8000a5a:	fbbe f6f8 	udiv	r6, lr, r8
 8000a5e:	fa1f f78c 	uxth.w	r7, ip
 8000a62:	fb08 e316 	mls	r3, r8, r6, lr
 8000a66:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000a6a:	fb06 f107 	mul.w	r1, r6, r7
 8000a6e:	4299      	cmp	r1, r3
 8000a70:	d90a      	bls.n	8000a88 <__udivmoddi4+0x64>
 8000a72:	eb1c 0303 	adds.w	r3, ip, r3
 8000a76:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000a7a:	f080 811f 	bcs.w	8000cbc <__udivmoddi4+0x298>
 8000a7e:	4299      	cmp	r1, r3
 8000a80:	f240 811c 	bls.w	8000cbc <__udivmoddi4+0x298>
 8000a84:	3e02      	subs	r6, #2
 8000a86:	4463      	add	r3, ip
 8000a88:	1a5b      	subs	r3, r3, r1
 8000a8a:	b2a4      	uxth	r4, r4
 8000a8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000a90:	fb08 3310 	mls	r3, r8, r0, r3
 8000a94:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a98:	fb00 f707 	mul.w	r7, r0, r7
 8000a9c:	42a7      	cmp	r7, r4
 8000a9e:	d90a      	bls.n	8000ab6 <__udivmoddi4+0x92>
 8000aa0:	eb1c 0404 	adds.w	r4, ip, r4
 8000aa4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000aa8:	f080 810a 	bcs.w	8000cc0 <__udivmoddi4+0x29c>
 8000aac:	42a7      	cmp	r7, r4
 8000aae:	f240 8107 	bls.w	8000cc0 <__udivmoddi4+0x29c>
 8000ab2:	4464      	add	r4, ip
 8000ab4:	3802      	subs	r0, #2
 8000ab6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000aba:	1be4      	subs	r4, r4, r7
 8000abc:	2600      	movs	r6, #0
 8000abe:	b11d      	cbz	r5, 8000ac8 <__udivmoddi4+0xa4>
 8000ac0:	40d4      	lsrs	r4, r2
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	e9c5 4300 	strd	r4, r3, [r5]
 8000ac8:	4631      	mov	r1, r6
 8000aca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ace:	428b      	cmp	r3, r1
 8000ad0:	d909      	bls.n	8000ae6 <__udivmoddi4+0xc2>
 8000ad2:	2d00      	cmp	r5, #0
 8000ad4:	f000 80ef 	beq.w	8000cb6 <__udivmoddi4+0x292>
 8000ad8:	2600      	movs	r6, #0
 8000ada:	e9c5 0100 	strd	r0, r1, [r5]
 8000ade:	4630      	mov	r0, r6
 8000ae0:	4631      	mov	r1, r6
 8000ae2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ae6:	fab3 f683 	clz	r6, r3
 8000aea:	2e00      	cmp	r6, #0
 8000aec:	d14a      	bne.n	8000b84 <__udivmoddi4+0x160>
 8000aee:	428b      	cmp	r3, r1
 8000af0:	d302      	bcc.n	8000af8 <__udivmoddi4+0xd4>
 8000af2:	4282      	cmp	r2, r0
 8000af4:	f200 80f9 	bhi.w	8000cea <__udivmoddi4+0x2c6>
 8000af8:	1a84      	subs	r4, r0, r2
 8000afa:	eb61 0303 	sbc.w	r3, r1, r3
 8000afe:	2001      	movs	r0, #1
 8000b00:	469e      	mov	lr, r3
 8000b02:	2d00      	cmp	r5, #0
 8000b04:	d0e0      	beq.n	8000ac8 <__udivmoddi4+0xa4>
 8000b06:	e9c5 4e00 	strd	r4, lr, [r5]
 8000b0a:	e7dd      	b.n	8000ac8 <__udivmoddi4+0xa4>
 8000b0c:	b902      	cbnz	r2, 8000b10 <__udivmoddi4+0xec>
 8000b0e:	deff      	udf	#255	; 0xff
 8000b10:	fab2 f282 	clz	r2, r2
 8000b14:	2a00      	cmp	r2, #0
 8000b16:	f040 8092 	bne.w	8000c3e <__udivmoddi4+0x21a>
 8000b1a:	eba1 010c 	sub.w	r1, r1, ip
 8000b1e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b22:	fa1f fe8c 	uxth.w	lr, ip
 8000b26:	2601      	movs	r6, #1
 8000b28:	0c20      	lsrs	r0, r4, #16
 8000b2a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000b2e:	fb07 1113 	mls	r1, r7, r3, r1
 8000b32:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000b36:	fb0e f003 	mul.w	r0, lr, r3
 8000b3a:	4288      	cmp	r0, r1
 8000b3c:	d908      	bls.n	8000b50 <__udivmoddi4+0x12c>
 8000b3e:	eb1c 0101 	adds.w	r1, ip, r1
 8000b42:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000b46:	d202      	bcs.n	8000b4e <__udivmoddi4+0x12a>
 8000b48:	4288      	cmp	r0, r1
 8000b4a:	f200 80cb 	bhi.w	8000ce4 <__udivmoddi4+0x2c0>
 8000b4e:	4643      	mov	r3, r8
 8000b50:	1a09      	subs	r1, r1, r0
 8000b52:	b2a4      	uxth	r4, r4
 8000b54:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b58:	fb07 1110 	mls	r1, r7, r0, r1
 8000b5c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000b60:	fb0e fe00 	mul.w	lr, lr, r0
 8000b64:	45a6      	cmp	lr, r4
 8000b66:	d908      	bls.n	8000b7a <__udivmoddi4+0x156>
 8000b68:	eb1c 0404 	adds.w	r4, ip, r4
 8000b6c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000b70:	d202      	bcs.n	8000b78 <__udivmoddi4+0x154>
 8000b72:	45a6      	cmp	lr, r4
 8000b74:	f200 80bb 	bhi.w	8000cee <__udivmoddi4+0x2ca>
 8000b78:	4608      	mov	r0, r1
 8000b7a:	eba4 040e 	sub.w	r4, r4, lr
 8000b7e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000b82:	e79c      	b.n	8000abe <__udivmoddi4+0x9a>
 8000b84:	f1c6 0720 	rsb	r7, r6, #32
 8000b88:	40b3      	lsls	r3, r6
 8000b8a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000b8e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000b92:	fa20 f407 	lsr.w	r4, r0, r7
 8000b96:	fa01 f306 	lsl.w	r3, r1, r6
 8000b9a:	431c      	orrs	r4, r3
 8000b9c:	40f9      	lsrs	r1, r7
 8000b9e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ba2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ba6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000baa:	0c20      	lsrs	r0, r4, #16
 8000bac:	fa1f fe8c 	uxth.w	lr, ip
 8000bb0:	fb09 1118 	mls	r1, r9, r8, r1
 8000bb4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000bb8:	fb08 f00e 	mul.w	r0, r8, lr
 8000bbc:	4288      	cmp	r0, r1
 8000bbe:	fa02 f206 	lsl.w	r2, r2, r6
 8000bc2:	d90b      	bls.n	8000bdc <__udivmoddi4+0x1b8>
 8000bc4:	eb1c 0101 	adds.w	r1, ip, r1
 8000bc8:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000bcc:	f080 8088 	bcs.w	8000ce0 <__udivmoddi4+0x2bc>
 8000bd0:	4288      	cmp	r0, r1
 8000bd2:	f240 8085 	bls.w	8000ce0 <__udivmoddi4+0x2bc>
 8000bd6:	f1a8 0802 	sub.w	r8, r8, #2
 8000bda:	4461      	add	r1, ip
 8000bdc:	1a09      	subs	r1, r1, r0
 8000bde:	b2a4      	uxth	r4, r4
 8000be0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000be4:	fb09 1110 	mls	r1, r9, r0, r1
 8000be8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000bec:	fb00 fe0e 	mul.w	lr, r0, lr
 8000bf0:	458e      	cmp	lr, r1
 8000bf2:	d908      	bls.n	8000c06 <__udivmoddi4+0x1e2>
 8000bf4:	eb1c 0101 	adds.w	r1, ip, r1
 8000bf8:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000bfc:	d26c      	bcs.n	8000cd8 <__udivmoddi4+0x2b4>
 8000bfe:	458e      	cmp	lr, r1
 8000c00:	d96a      	bls.n	8000cd8 <__udivmoddi4+0x2b4>
 8000c02:	3802      	subs	r0, #2
 8000c04:	4461      	add	r1, ip
 8000c06:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000c0a:	fba0 9402 	umull	r9, r4, r0, r2
 8000c0e:	eba1 010e 	sub.w	r1, r1, lr
 8000c12:	42a1      	cmp	r1, r4
 8000c14:	46c8      	mov	r8, r9
 8000c16:	46a6      	mov	lr, r4
 8000c18:	d356      	bcc.n	8000cc8 <__udivmoddi4+0x2a4>
 8000c1a:	d053      	beq.n	8000cc4 <__udivmoddi4+0x2a0>
 8000c1c:	b15d      	cbz	r5, 8000c36 <__udivmoddi4+0x212>
 8000c1e:	ebb3 0208 	subs.w	r2, r3, r8
 8000c22:	eb61 010e 	sbc.w	r1, r1, lr
 8000c26:	fa01 f707 	lsl.w	r7, r1, r7
 8000c2a:	fa22 f306 	lsr.w	r3, r2, r6
 8000c2e:	40f1      	lsrs	r1, r6
 8000c30:	431f      	orrs	r7, r3
 8000c32:	e9c5 7100 	strd	r7, r1, [r5]
 8000c36:	2600      	movs	r6, #0
 8000c38:	4631      	mov	r1, r6
 8000c3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c3e:	f1c2 0320 	rsb	r3, r2, #32
 8000c42:	40d8      	lsrs	r0, r3
 8000c44:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c48:	fa21 f303 	lsr.w	r3, r1, r3
 8000c4c:	4091      	lsls	r1, r2
 8000c4e:	4301      	orrs	r1, r0
 8000c50:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c54:	fa1f fe8c 	uxth.w	lr, ip
 8000c58:	fbb3 f0f7 	udiv	r0, r3, r7
 8000c5c:	fb07 3610 	mls	r6, r7, r0, r3
 8000c60:	0c0b      	lsrs	r3, r1, #16
 8000c62:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000c66:	fb00 f60e 	mul.w	r6, r0, lr
 8000c6a:	429e      	cmp	r6, r3
 8000c6c:	fa04 f402 	lsl.w	r4, r4, r2
 8000c70:	d908      	bls.n	8000c84 <__udivmoddi4+0x260>
 8000c72:	eb1c 0303 	adds.w	r3, ip, r3
 8000c76:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000c7a:	d22f      	bcs.n	8000cdc <__udivmoddi4+0x2b8>
 8000c7c:	429e      	cmp	r6, r3
 8000c7e:	d92d      	bls.n	8000cdc <__udivmoddi4+0x2b8>
 8000c80:	3802      	subs	r0, #2
 8000c82:	4463      	add	r3, ip
 8000c84:	1b9b      	subs	r3, r3, r6
 8000c86:	b289      	uxth	r1, r1
 8000c88:	fbb3 f6f7 	udiv	r6, r3, r7
 8000c8c:	fb07 3316 	mls	r3, r7, r6, r3
 8000c90:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c94:	fb06 f30e 	mul.w	r3, r6, lr
 8000c98:	428b      	cmp	r3, r1
 8000c9a:	d908      	bls.n	8000cae <__udivmoddi4+0x28a>
 8000c9c:	eb1c 0101 	adds.w	r1, ip, r1
 8000ca0:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000ca4:	d216      	bcs.n	8000cd4 <__udivmoddi4+0x2b0>
 8000ca6:	428b      	cmp	r3, r1
 8000ca8:	d914      	bls.n	8000cd4 <__udivmoddi4+0x2b0>
 8000caa:	3e02      	subs	r6, #2
 8000cac:	4461      	add	r1, ip
 8000cae:	1ac9      	subs	r1, r1, r3
 8000cb0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000cb4:	e738      	b.n	8000b28 <__udivmoddi4+0x104>
 8000cb6:	462e      	mov	r6, r5
 8000cb8:	4628      	mov	r0, r5
 8000cba:	e705      	b.n	8000ac8 <__udivmoddi4+0xa4>
 8000cbc:	4606      	mov	r6, r0
 8000cbe:	e6e3      	b.n	8000a88 <__udivmoddi4+0x64>
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	e6f8      	b.n	8000ab6 <__udivmoddi4+0x92>
 8000cc4:	454b      	cmp	r3, r9
 8000cc6:	d2a9      	bcs.n	8000c1c <__udivmoddi4+0x1f8>
 8000cc8:	ebb9 0802 	subs.w	r8, r9, r2
 8000ccc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000cd0:	3801      	subs	r0, #1
 8000cd2:	e7a3      	b.n	8000c1c <__udivmoddi4+0x1f8>
 8000cd4:	4646      	mov	r6, r8
 8000cd6:	e7ea      	b.n	8000cae <__udivmoddi4+0x28a>
 8000cd8:	4620      	mov	r0, r4
 8000cda:	e794      	b.n	8000c06 <__udivmoddi4+0x1e2>
 8000cdc:	4640      	mov	r0, r8
 8000cde:	e7d1      	b.n	8000c84 <__udivmoddi4+0x260>
 8000ce0:	46d0      	mov	r8, sl
 8000ce2:	e77b      	b.n	8000bdc <__udivmoddi4+0x1b8>
 8000ce4:	3b02      	subs	r3, #2
 8000ce6:	4461      	add	r1, ip
 8000ce8:	e732      	b.n	8000b50 <__udivmoddi4+0x12c>
 8000cea:	4630      	mov	r0, r6
 8000cec:	e709      	b.n	8000b02 <__udivmoddi4+0xde>
 8000cee:	4464      	add	r4, ip
 8000cf0:	3802      	subs	r0, #2
 8000cf2:	e742      	b.n	8000b7a <__udivmoddi4+0x156>

08000cf4 <__aeabi_idiv0>:
 8000cf4:	4770      	bx	lr
 8000cf6:	bf00      	nop

08000cf8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b082      	sub	sp, #8
 8000cfc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000cfe:	f001 ff4b 	bl	8002b98 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d02:	f000 f8dd 	bl	8000ec0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d06:	f000 fd3d 	bl	8001784 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000d0a:	f000 f923 	bl	8000f54 <MX_ADC1_Init>
  MX_ADC2_Init();
 8000d0e:	f000 f999 	bl	8001044 <MX_ADC2_Init>
  MX_COMP1_Init();
 8000d12:	f000 f9fd 	bl	8001110 <MX_COMP1_Init>
  MX_DAC3_Init();
 8000d16:	f000 fa21 	bl	800115c <MX_DAC3_Init>
  MX_FDCAN1_Init();
 8000d1a:	f000 fa59 	bl	80011d0 <MX_FDCAN1_Init>
  MX_I2C1_Init();
 8000d1e:	f000 fa9f 	bl	8001260 <MX_I2C1_Init>
  MX_SPI1_Init();
 8000d22:	f000 fadd 	bl	80012e0 <MX_SPI1_Init>
  MX_TIM1_Init();
 8000d26:	f000 fb19 	bl	800135c <MX_TIM1_Init>
  MX_TIM2_Init();
 8000d2a:	f000 fbe3 	bl	80014f4 <MX_TIM2_Init>
  MX_TIM17_Init();
 8000d2e:	f000 fc63 	bl	80015f8 <MX_TIM17_Init>
  MX_USART3_UART_Init();
 8000d32:	f000 fcdb 	bl	80016ec <MX_USART3_UART_Init>
  MX_TIM7_Init();
 8000d36:	f000 fc27 	bl	8001588 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */

  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 8000d3a:	2201      	movs	r2, #1
 8000d3c:	2140      	movs	r1, #64	; 0x40
 8000d3e:	4855      	ldr	r0, [pc, #340]	; (8000e94 <main+0x19c>)
 8000d40:	f004 f918 	bl	8004f74 <HAL_GPIO_WritePin>
  //SET UP ABI mode.
  SetupABIwithoutPWM();
 8000d44:	f001 fd66 	bl	8002814 <SetupABIwithoutPWM>
  settings1Reg.raw = AS5047_readRegister(SETTINGS1_REG,0);
 8000d48:	2100      	movs	r1, #0
 8000d4a:	2018      	movs	r0, #24
 8000d4c:	f001 fad8 	bl	8002300 <AS5047_readRegister>
 8000d50:	4603      	mov	r3, r0
 8000d52:	461a      	mov	r2, r3
 8000d54:	4b50      	ldr	r3, [pc, #320]	; (8000e98 <main+0x1a0>)
 8000d56:	801a      	strh	r2, [r3, #0]
  settings2Reg.raw = AS5047_readRegister(SETTINGS2_REG,0);
 8000d58:	2100      	movs	r1, #0
 8000d5a:	2019      	movs	r0, #25
 8000d5c:	f001 fad0 	bl	8002300 <AS5047_readRegister>
 8000d60:	4603      	mov	r3, r0
 8000d62:	b2da      	uxtb	r2, r3
 8000d64:	4b4d      	ldr	r3, [pc, #308]	; (8000e9c <main+0x1a4>)
 8000d66:	701a      	strb	r2, [r3, #0]
  abiSettingsOK = Check_ABI_SetCorrectly(settings1Reg,settings2Reg);
 8000d68:	4a4c      	ldr	r2, [pc, #304]	; (8000e9c <main+0x1a4>)
 8000d6a:	4b4b      	ldr	r3, [pc, #300]	; (8000e98 <main+0x1a0>)
 8000d6c:	7811      	ldrb	r1, [r2, #0]
 8000d6e:	8818      	ldrh	r0, [r3, #0]
 8000d70:	f001 fd8b 	bl	800288a <Check_ABI_SetCorrectly>
 8000d74:	4603      	mov	r3, r0
 8000d76:	461a      	mov	r2, r3
 8000d78:	4b49      	ldr	r3, [pc, #292]	; (8000ea0 <main+0x1a8>)
 8000d7a:	701a      	strb	r2, [r3, #0]

  //Start PWM
  HAL_TIM_Base_Start_IT(&htim1);
 8000d7c:	4849      	ldr	r0, [pc, #292]	; (8000ea4 <main+0x1ac>)
 8000d7e:	f005 fe85 	bl	8006a8c <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start_IT(&htim1,TIM_CHANNEL_1);
 8000d82:	2100      	movs	r1, #0
 8000d84:	4847      	ldr	r0, [pc, #284]	; (8000ea4 <main+0x1ac>)
 8000d86:	f005 ff4d 	bl	8006c24 <HAL_TIM_PWM_Start_IT>
  HAL_TIMEx_PWMN_Start_IT(&htim1,TIM_CHANNEL_1);
 8000d8a:	2100      	movs	r1, #0
 8000d8c:	4845      	ldr	r0, [pc, #276]	; (8000ea4 <main+0x1ac>)
 8000d8e:	f007 f9b3 	bl	80080f8 <HAL_TIMEx_PWMN_Start_IT>

  HAL_TIM_PWM_Start_IT(&htim1,TIM_CHANNEL_2);
 8000d92:	2104      	movs	r1, #4
 8000d94:	4843      	ldr	r0, [pc, #268]	; (8000ea4 <main+0x1ac>)
 8000d96:	f005 ff45 	bl	8006c24 <HAL_TIM_PWM_Start_IT>
  HAL_TIMEx_PWMN_Start_IT(&htim1,TIM_CHANNEL_2);
 8000d9a:	2104      	movs	r1, #4
 8000d9c:	4841      	ldr	r0, [pc, #260]	; (8000ea4 <main+0x1ac>)
 8000d9e:	f007 f9ab 	bl	80080f8 <HAL_TIMEx_PWMN_Start_IT>

  HAL_TIM_PWM_Start_IT(&htim1,TIM_CHANNEL_3);
 8000da2:	2108      	movs	r1, #8
 8000da4:	483f      	ldr	r0, [pc, #252]	; (8000ea4 <main+0x1ac>)
 8000da6:	f005 ff3d 	bl	8006c24 <HAL_TIM_PWM_Start_IT>
  HAL_TIMEx_PWMN_Start_IT(&htim1,TIM_CHANNEL_3);
 8000daa:	2108      	movs	r1, #8
 8000dac:	483d      	ldr	r0, [pc, #244]	; (8000ea4 <main+0x1ac>)
 8000dae:	f007 f9a3 	bl	80080f8 <HAL_TIMEx_PWMN_Start_IT>

  htim1.Instance->CCR1 = 0; // highest value is 1499
 8000db2:	4b3c      	ldr	r3, [pc, #240]	; (8000ea4 <main+0x1ac>)
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	2200      	movs	r2, #0
 8000db8:	635a      	str	r2, [r3, #52]	; 0x34
  htim1.Instance->CCR2 = 0; // highest value is 1499
 8000dba:	4b3a      	ldr	r3, [pc, #232]	; (8000ea4 <main+0x1ac>)
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	639a      	str	r2, [r3, #56]	; 0x38
  htim1.Instance->CCR3 = 0; // highest value is 1499
 8000dc2:	4b38      	ldr	r3, [pc, #224]	; (8000ea4 <main+0x1ac>)
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	63da      	str	r2, [r3, #60]	; 0x3c

  setupCalibration(25,200);
 8000dca:	21c8      	movs	r1, #200	; 0xc8
 8000dcc:	2019      	movs	r0, #25
 8000dce:	f001 fdc5 	bl	800295c <setupCalibration>
  swButton = 2;
 8000dd2:	4b35      	ldr	r3, [pc, #212]	; (8000ea8 <main+0x1b0>)
 8000dd4:	2202      	movs	r2, #2
 8000dd6:	701a      	strb	r2, [r3, #0]
	  //angleData =  AS5047_readRegister(ANGLE_REG,0)//TODO why does this fn not work?;
	  //angleData = angleReading();
	  //angleMech = angleData*360.0/16384;


	  if (swButton == 1){
 8000dd8:	4b33      	ldr	r3, [pc, #204]	; (8000ea8 <main+0x1b0>)
 8000dda:	781b      	ldrb	r3, [r3, #0]
 8000ddc:	2b01      	cmp	r3, #1
 8000dde:	d133      	bne.n	8000e48 <main+0x150>
		  ppe_axis = 0;
 8000de0:	4b32      	ldr	r3, [pc, #200]	; (8000eac <main+0x1b4>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	701a      	strb	r2, [r3, #0]
		  for (int i=0;i<30; i++){
 8000de6:	2300      	movs	r3, #0
 8000de8:	607b      	str	r3, [r7, #4]
 8000dea:	e027      	b.n	8000e3c <main+0x144>
			  ppe_axis += 1;
 8000dec:	4b2f      	ldr	r3, [pc, #188]	; (8000eac <main+0x1b4>)
 8000dee:	781b      	ldrb	r3, [r3, #0]
 8000df0:	3301      	adds	r3, #1
 8000df2:	b2da      	uxtb	r2, r3
 8000df4:	4b2d      	ldr	r3, [pc, #180]	; (8000eac <main+0x1b4>)
 8000df6:	701a      	strb	r2, [r3, #0]
			  if (ppe_axis > 6){
 8000df8:	4b2c      	ldr	r3, [pc, #176]	; (8000eac <main+0x1b4>)
 8000dfa:	781b      	ldrb	r3, [r3, #0]
 8000dfc:	2b06      	cmp	r3, #6
 8000dfe:	d902      	bls.n	8000e06 <main+0x10e>
				  ppe_axis = 1;
 8000e00:	4b2a      	ldr	r3, [pc, #168]	; (8000eac <main+0x1b4>)
 8000e02:	2201      	movs	r2, #1
 8000e04:	701a      	strb	r2, [r3, #0]
			  }
			  voltageOnPrincipalAxis(ppe_axis);
 8000e06:	4b29      	ldr	r3, [pc, #164]	; (8000eac <main+0x1b4>)
 8000e08:	781b      	ldrb	r3, [r3, #0]
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	f001 fe32 	bl	8002a74 <voltageOnPrincipalAxis>
			  HAL_Delay(1000);
 8000e10:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000e14:	f001 ff30 	bl	8002c78 <HAL_Delay>
			  angleArray[i] =  GetAveragedAngleReading();
 8000e18:	f001 fd6a 	bl	80028f0 <GetAveragedAngleReading>
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	b219      	sxth	r1, r3
 8000e20:	4a23      	ldr	r2, [pc, #140]	; (8000eb0 <main+0x1b8>)
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			  ppeAxisArray[i] = ppe_axis;
 8000e28:	4b20      	ldr	r3, [pc, #128]	; (8000eac <main+0x1b4>)
 8000e2a:	781b      	ldrb	r3, [r3, #0]
 8000e2c:	b219      	sxth	r1, r3
 8000e2e:	4a21      	ldr	r2, [pc, #132]	; (8000eb4 <main+0x1bc>)
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		  for (int i=0;i<30; i++){
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	3301      	adds	r3, #1
 8000e3a:	607b      	str	r3, [r7, #4]
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	2b1d      	cmp	r3, #29
 8000e40:	ddd4      	ble.n	8000dec <main+0xf4>
		  }
		  swButton = 0;
 8000e42:	4b19      	ldr	r3, [pc, #100]	; (8000ea8 <main+0x1b0>)
 8000e44:	2200      	movs	r2, #0
 8000e46:	701a      	strb	r2, [r3, #0]
	  }

	  if (swButton == 2){
 8000e48:	4b17      	ldr	r3, [pc, #92]	; (8000ea8 <main+0x1b0>)
 8000e4a:	781b      	ldrb	r3, [r3, #0]
 8000e4c:	2b02      	cmp	r3, #2
 8000e4e:	d1c3      	bne.n	8000dd8 <main+0xe0>
		  uint16_t zeroValue = 378;
 8000e50:	f44f 73bd 	mov.w	r3, #378	; 0x17a
 8000e54:	807b      	strh	r3, [r7, #2]
		  zeroPos = getProgrammedZeroOffset();
 8000e56:	f001 fbff 	bl	8002658 <getProgrammedZeroOffset>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	461a      	mov	r2, r3
 8000e5e:	4b16      	ldr	r3, [pc, #88]	; (8000eb8 <main+0x1c0>)
 8000e60:	801a      	strh	r2, [r3, #0]
		  zeroRegisterUpdated = 0;
 8000e62:	4b16      	ldr	r3, [pc, #88]	; (8000ebc <main+0x1c4>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	701a      	strb	r2, [r3, #0]
		  if (zeroPos != zeroValue){
 8000e68:	4b13      	ldr	r3, [pc, #76]	; (8000eb8 <main+0x1c0>)
 8000e6a:	881b      	ldrh	r3, [r3, #0]
 8000e6c:	887a      	ldrh	r2, [r7, #2]
 8000e6e:	429a      	cmp	r2, r3
 8000e70:	d00c      	beq.n	8000e8c <main+0x194>
		    writeZeroReg(zeroValue); //function must check if it got back the same vaue it wrote.
 8000e72:	887b      	ldrh	r3, [r7, #2]
 8000e74:	4618      	mov	r0, r3
 8000e76:	f001 fcab 	bl	80027d0 <writeZeroReg>
		    zeroRegisterUpdated = 1;
 8000e7a:	4b10      	ldr	r3, [pc, #64]	; (8000ebc <main+0x1c4>)
 8000e7c:	2201      	movs	r2, #1
 8000e7e:	701a      	strb	r2, [r3, #0]
		    zeroPos = getProgrammedZeroOffset();
 8000e80:	f001 fbea 	bl	8002658 <getProgrammedZeroOffset>
 8000e84:	4603      	mov	r3, r0
 8000e86:	461a      	mov	r2, r3
 8000e88:	4b0b      	ldr	r3, [pc, #44]	; (8000eb8 <main+0x1c0>)
 8000e8a:	801a      	strh	r2, [r3, #0]
		    //to check if this value is same as what we wrote
		  }
		  swButton = 0;
 8000e8c:	4b06      	ldr	r3, [pc, #24]	; (8000ea8 <main+0x1b0>)
 8000e8e:	2200      	movs	r2, #0
 8000e90:	701a      	strb	r2, [r3, #0]
	  if (swButton == 1){
 8000e92:	e7a1      	b.n	8000dd8 <main+0xe0>
 8000e94:	48000400 	.word	0x48000400
 8000e98:	2000040c 	.word	0x2000040c
 8000e9c:	20000410 	.word	0x20000410
 8000ea0:	20000411 	.word	0x20000411
 8000ea4:	2000024c 	.word	0x2000024c
 8000ea8:	20000412 	.word	0x20000412
 8000eac:	20000492 	.word	0x20000492
 8000eb0:	20000414 	.word	0x20000414
 8000eb4:	20000454 	.word	0x20000454
 8000eb8:	20000494 	.word	0x20000494
 8000ebc:	20000496 	.word	0x20000496

08000ec0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b094      	sub	sp, #80	; 0x50
 8000ec4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ec6:	f107 0318 	add.w	r3, r7, #24
 8000eca:	2238      	movs	r2, #56	; 0x38
 8000ecc:	2100      	movs	r1, #0
 8000ece:	4618      	mov	r0, r3
 8000ed0:	f008 f9b2 	bl	8009238 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ed4:	1d3b      	adds	r3, r7, #4
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	601a      	str	r2, [r3, #0]
 8000eda:	605a      	str	r2, [r3, #4]
 8000edc:	609a      	str	r2, [r3, #8]
 8000ede:	60da      	str	r2, [r3, #12]
 8000ee0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ee2:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000ee6:	f004 f983 	bl	80051f0 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000eea:	2301      	movs	r3, #1
 8000eec:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000eee:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ef2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ef4:	2302      	movs	r3, #2
 8000ef6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ef8:	2303      	movs	r3, #3
 8000efa:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000efc:	2304      	movs	r3, #4
 8000efe:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 75;
 8000f00:	234b      	movs	r3, #75	; 0x4b
 8000f02:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000f04:	2302      	movs	r3, #2
 8000f06:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000f08:	2302      	movs	r3, #2
 8000f0a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000f0c:	2302      	movs	r3, #2
 8000f0e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f10:	f107 0318 	add.w	r3, r7, #24
 8000f14:	4618      	mov	r0, r3
 8000f16:	f004 fa1f 	bl	8005358 <HAL_RCC_OscConfig>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d001      	beq.n	8000f24 <SystemClock_Config+0x64>
  {
    Error_Handler();
 8000f20:	f000 fcc0 	bl	80018a4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f24:	230f      	movs	r3, #15
 8000f26:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f28:	2303      	movs	r3, #3
 8000f2a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000f30:	2300      	movs	r3, #0
 8000f32:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f34:	2300      	movs	r3, #0
 8000f36:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000f38:	1d3b      	adds	r3, r7, #4
 8000f3a:	2104      	movs	r1, #4
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	f004 fd23 	bl	8005988 <HAL_RCC_ClockConfig>
 8000f42:	4603      	mov	r3, r0
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d001      	beq.n	8000f4c <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000f48:	f000 fcac 	bl	80018a4 <Error_Handler>
  }
}
 8000f4c:	bf00      	nop
 8000f4e:	3750      	adds	r7, #80	; 0x50
 8000f50:	46bd      	mov	sp, r7
 8000f52:	bd80      	pop	{r7, pc}

08000f54 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b08c      	sub	sp, #48	; 0x30
 8000f58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000f5a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f5e:	2200      	movs	r2, #0
 8000f60:	601a      	str	r2, [r3, #0]
 8000f62:	605a      	str	r2, [r3, #4]
 8000f64:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000f66:	1d3b      	adds	r3, r7, #4
 8000f68:	2220      	movs	r2, #32
 8000f6a:	2100      	movs	r1, #0
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	f008 f963 	bl	8009238 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000f72:	4b32      	ldr	r3, [pc, #200]	; (800103c <MX_ADC1_Init+0xe8>)
 8000f74:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000f78:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000f7a:	4b30      	ldr	r3, [pc, #192]	; (800103c <MX_ADC1_Init+0xe8>)
 8000f7c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000f80:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000f82:	4b2e      	ldr	r3, [pc, #184]	; (800103c <MX_ADC1_Init+0xe8>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f88:	4b2c      	ldr	r3, [pc, #176]	; (800103c <MX_ADC1_Init+0xe8>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000f8e:	4b2b      	ldr	r3, [pc, #172]	; (800103c <MX_ADC1_Init+0xe8>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000f94:	4b29      	ldr	r3, [pc, #164]	; (800103c <MX_ADC1_Init+0xe8>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f9a:	4b28      	ldr	r3, [pc, #160]	; (800103c <MX_ADC1_Init+0xe8>)
 8000f9c:	2204      	movs	r2, #4
 8000f9e:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000fa0:	4b26      	ldr	r3, [pc, #152]	; (800103c <MX_ADC1_Init+0xe8>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000fa6:	4b25      	ldr	r3, [pc, #148]	; (800103c <MX_ADC1_Init+0xe8>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8000fac:	4b23      	ldr	r3, [pc, #140]	; (800103c <MX_ADC1_Init+0xe8>)
 8000fae:	2201      	movs	r2, #1
 8000fb0:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000fb2:	4b22      	ldr	r3, [pc, #136]	; (800103c <MX_ADC1_Init+0xe8>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000fba:	4b20      	ldr	r3, [pc, #128]	; (800103c <MX_ADC1_Init+0xe8>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000fc0:	4b1e      	ldr	r3, [pc, #120]	; (800103c <MX_ADC1_Init+0xe8>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000fc6:	4b1d      	ldr	r3, [pc, #116]	; (800103c <MX_ADC1_Init+0xe8>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000fce:	4b1b      	ldr	r3, [pc, #108]	; (800103c <MX_ADC1_Init+0xe8>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000fd4:	4b19      	ldr	r3, [pc, #100]	; (800103c <MX_ADC1_Init+0xe8>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000fdc:	4817      	ldr	r0, [pc, #92]	; (800103c <MX_ADC1_Init+0xe8>)
 8000fde:	f002 f847 	bl	8003070 <HAL_ADC_Init>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d001      	beq.n	8000fec <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8000fe8:	f000 fc5c 	bl	80018a4 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000fec:	2300      	movs	r3, #0
 8000fee:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000ff0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ff4:	4619      	mov	r1, r3
 8000ff6:	4811      	ldr	r0, [pc, #68]	; (800103c <MX_ADC1_Init+0xe8>)
 8000ff8:	f002 fdda 	bl	8003bb0 <HAL_ADCEx_MultiModeConfigChannel>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d001      	beq.n	8001006 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8001002:	f000 fc4f 	bl	80018a4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8001006:	4b0e      	ldr	r3, [pc, #56]	; (8001040 <MX_ADC1_Init+0xec>)
 8001008:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800100a:	2306      	movs	r3, #6
 800100c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800100e:	2300      	movs	r3, #0
 8001010:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001012:	237f      	movs	r3, #127	; 0x7f
 8001014:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001016:	2304      	movs	r3, #4
 8001018:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800101a:	2300      	movs	r3, #0
 800101c:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800101e:	1d3b      	adds	r3, r7, #4
 8001020:	4619      	mov	r1, r3
 8001022:	4806      	ldr	r0, [pc, #24]	; (800103c <MX_ADC1_Init+0xe8>)
 8001024:	f002 f9ae 	bl	8003384 <HAL_ADC_ConfigChannel>
 8001028:	4603      	mov	r3, r0
 800102a:	2b00      	cmp	r3, #0
 800102c:	d001      	beq.n	8001032 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 800102e:	f000 fc39 	bl	80018a4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001032:	bf00      	nop
 8001034:	3730      	adds	r7, #48	; 0x30
 8001036:	46bd      	mov	sp, r7
 8001038:	bd80      	pop	{r7, pc}
 800103a:	bf00      	nop
 800103c:	20000028 	.word	0x20000028
 8001040:	2e300800 	.word	0x2e300800

08001044 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b088      	sub	sp, #32
 8001048:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800104a:	463b      	mov	r3, r7
 800104c:	2220      	movs	r2, #32
 800104e:	2100      	movs	r1, #0
 8001050:	4618      	mov	r0, r3
 8001052:	f008 f8f1 	bl	8009238 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8001056:	4b2b      	ldr	r3, [pc, #172]	; (8001104 <MX_ADC2_Init+0xc0>)
 8001058:	4a2b      	ldr	r2, [pc, #172]	; (8001108 <MX_ADC2_Init+0xc4>)
 800105a:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800105c:	4b29      	ldr	r3, [pc, #164]	; (8001104 <MX_ADC2_Init+0xc0>)
 800105e:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001062:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001064:	4b27      	ldr	r3, [pc, #156]	; (8001104 <MX_ADC2_Init+0xc0>)
 8001066:	2200      	movs	r2, #0
 8001068:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800106a:	4b26      	ldr	r3, [pc, #152]	; (8001104 <MX_ADC2_Init+0xc0>)
 800106c:	2200      	movs	r2, #0
 800106e:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8001070:	4b24      	ldr	r3, [pc, #144]	; (8001104 <MX_ADC2_Init+0xc0>)
 8001072:	2200      	movs	r2, #0
 8001074:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001076:	4b23      	ldr	r3, [pc, #140]	; (8001104 <MX_ADC2_Init+0xc0>)
 8001078:	2200      	movs	r2, #0
 800107a:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800107c:	4b21      	ldr	r3, [pc, #132]	; (8001104 <MX_ADC2_Init+0xc0>)
 800107e:	2204      	movs	r2, #4
 8001080:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8001082:	4b20      	ldr	r3, [pc, #128]	; (8001104 <MX_ADC2_Init+0xc0>)
 8001084:	2200      	movs	r2, #0
 8001086:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001088:	4b1e      	ldr	r3, [pc, #120]	; (8001104 <MX_ADC2_Init+0xc0>)
 800108a:	2200      	movs	r2, #0
 800108c:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 800108e:	4b1d      	ldr	r3, [pc, #116]	; (8001104 <MX_ADC2_Init+0xc0>)
 8001090:	2201      	movs	r2, #1
 8001092:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001094:	4b1b      	ldr	r3, [pc, #108]	; (8001104 <MX_ADC2_Init+0xc0>)
 8001096:	2200      	movs	r2, #0
 8001098:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800109c:	4b19      	ldr	r3, [pc, #100]	; (8001104 <MX_ADC2_Init+0xc0>)
 800109e:	2200      	movs	r2, #0
 80010a0:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80010a2:	4b18      	ldr	r3, [pc, #96]	; (8001104 <MX_ADC2_Init+0xc0>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.DMAContinuousRequests = DISABLE;
 80010a8:	4b16      	ldr	r3, [pc, #88]	; (8001104 <MX_ADC2_Init+0xc0>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80010b0:	4b14      	ldr	r3, [pc, #80]	; (8001104 <MX_ADC2_Init+0xc0>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 80010b6:	4b13      	ldr	r3, [pc, #76]	; (8001104 <MX_ADC2_Init+0xc0>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80010be:	4811      	ldr	r0, [pc, #68]	; (8001104 <MX_ADC2_Init+0xc0>)
 80010c0:	f001 ffd6 	bl	8003070 <HAL_ADC_Init>
 80010c4:	4603      	mov	r3, r0
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d001      	beq.n	80010ce <MX_ADC2_Init+0x8a>
  {
    Error_Handler();
 80010ca:	f000 fbeb 	bl	80018a4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 80010ce:	4b0f      	ldr	r3, [pc, #60]	; (800110c <MX_ADC2_Init+0xc8>)
 80010d0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80010d2:	2306      	movs	r3, #6
 80010d4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80010d6:	2300      	movs	r3, #0
 80010d8:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80010da:	237f      	movs	r3, #127	; 0x7f
 80010dc:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80010de:	2304      	movs	r3, #4
 80010e0:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80010e2:	2300      	movs	r3, #0
 80010e4:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80010e6:	463b      	mov	r3, r7
 80010e8:	4619      	mov	r1, r3
 80010ea:	4806      	ldr	r0, [pc, #24]	; (8001104 <MX_ADC2_Init+0xc0>)
 80010ec:	f002 f94a 	bl	8003384 <HAL_ADC_ConfigChannel>
 80010f0:	4603      	mov	r3, r0
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d001      	beq.n	80010fa <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 80010f6:	f000 fbd5 	bl	80018a4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80010fa:	bf00      	nop
 80010fc:	3720      	adds	r7, #32
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}
 8001102:	bf00      	nop
 8001104:	20000094 	.word	0x20000094
 8001108:	50000100 	.word	0x50000100
 800110c:	32601000 	.word	0x32601000

08001110 <MX_COMP1_Init>:
  * @brief COMP1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_COMP1_Init(void)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	af00      	add	r7, sp, #0
  /* USER CODE END COMP1_Init 0 */

  /* USER CODE BEGIN COMP1_Init 1 */

  /* USER CODE END COMP1_Init 1 */
  hcomp1.Instance = COMP1;
 8001114:	4b0f      	ldr	r3, [pc, #60]	; (8001154 <MX_COMP1_Init+0x44>)
 8001116:	4a10      	ldr	r2, [pc, #64]	; (8001158 <MX_COMP1_Init+0x48>)
 8001118:	601a      	str	r2, [r3, #0]
  hcomp1.Init.InputPlus = COMP_INPUT_PLUS_IO2;
 800111a:	4b0e      	ldr	r3, [pc, #56]	; (8001154 <MX_COMP1_Init+0x44>)
 800111c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001120:	605a      	str	r2, [r3, #4]
  hcomp1.Init.InputMinus = COMP_INPUT_MINUS_DAC3_CH1;
 8001122:	4b0c      	ldr	r3, [pc, #48]	; (8001154 <MX_COMP1_Init+0x44>)
 8001124:	2240      	movs	r2, #64	; 0x40
 8001126:	609a      	str	r2, [r3, #8]
  hcomp1.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 8001128:	4b0a      	ldr	r3, [pc, #40]	; (8001154 <MX_COMP1_Init+0x44>)
 800112a:	2200      	movs	r2, #0
 800112c:	611a      	str	r2, [r3, #16]
  hcomp1.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 800112e:	4b09      	ldr	r3, [pc, #36]	; (8001154 <MX_COMP1_Init+0x44>)
 8001130:	2200      	movs	r2, #0
 8001132:	60da      	str	r2, [r3, #12]
  hcomp1.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 8001134:	4b07      	ldr	r3, [pc, #28]	; (8001154 <MX_COMP1_Init+0x44>)
 8001136:	2200      	movs	r2, #0
 8001138:	615a      	str	r2, [r3, #20]
  hcomp1.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 800113a:	4b06      	ldr	r3, [pc, #24]	; (8001154 <MX_COMP1_Init+0x44>)
 800113c:	2200      	movs	r2, #0
 800113e:	619a      	str	r2, [r3, #24]
  if (HAL_COMP_Init(&hcomp1) != HAL_OK)
 8001140:	4804      	ldr	r0, [pc, #16]	; (8001154 <MX_COMP1_Init+0x44>)
 8001142:	f002 fe81 	bl	8003e48 <HAL_COMP_Init>
 8001146:	4603      	mov	r3, r0
 8001148:	2b00      	cmp	r3, #0
 800114a:	d001      	beq.n	8001150 <MX_COMP1_Init+0x40>
  {
    Error_Handler();
 800114c:	f000 fbaa 	bl	80018a4 <Error_Handler>
  }
  /* USER CODE BEGIN COMP1_Init 2 */

  /* USER CODE END COMP1_Init 2 */

}
 8001150:	bf00      	nop
 8001152:	bd80      	pop	{r7, pc}
 8001154:	20000100 	.word	0x20000100
 8001158:	40010200 	.word	0x40010200

0800115c <MX_DAC3_Init>:
  * @brief DAC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC3_Init(void)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b08c      	sub	sp, #48	; 0x30
 8001160:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC3_Init 0 */

  /* USER CODE END DAC3_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001162:	463b      	mov	r3, r7
 8001164:	2230      	movs	r2, #48	; 0x30
 8001166:	2100      	movs	r1, #0
 8001168:	4618      	mov	r0, r3
 800116a:	f008 f865 	bl	8009238 <memset>

  /* USER CODE END DAC3_Init 1 */

  /** DAC Initialization
  */
  hdac3.Instance = DAC3;
 800116e:	4b16      	ldr	r3, [pc, #88]	; (80011c8 <MX_DAC3_Init+0x6c>)
 8001170:	4a16      	ldr	r2, [pc, #88]	; (80011cc <MX_DAC3_Init+0x70>)
 8001172:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac3) != HAL_OK)
 8001174:	4814      	ldr	r0, [pc, #80]	; (80011c8 <MX_DAC3_Init+0x6c>)
 8001176:	f003 f852 	bl	800421e <HAL_DAC_Init>
 800117a:	4603      	mov	r3, r0
 800117c:	2b00      	cmp	r3, #0
 800117e:	d001      	beq.n	8001184 <MX_DAC3_Init+0x28>
  {
    Error_Handler();
 8001180:	f000 fb90 	bl	80018a4 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8001184:	2302      	movs	r3, #2
 8001186:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8001188:	2300      	movs	r3, #0
 800118a:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 800118c:	2300      	movs	r3, #0
 800118e:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8001190:	2300      	movs	r3, #0
 8001192:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8001194:	2300      	movs	r3, #0
 8001196:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8001198:	2300      	movs	r3, #0
 800119a:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
 800119c:	2302      	movs	r3, #2
 800119e:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_INTERNAL;
 80011a0:	2302      	movs	r3, #2
 80011a2:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80011a4:	2300      	movs	r3, #0
 80011a6:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac3, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80011a8:	463b      	mov	r3, r7
 80011aa:	2200      	movs	r2, #0
 80011ac:	4619      	mov	r1, r3
 80011ae:	4806      	ldr	r0, [pc, #24]	; (80011c8 <MX_DAC3_Init+0x6c>)
 80011b0:	f003 f858 	bl	8004264 <HAL_DAC_ConfigChannel>
 80011b4:	4603      	mov	r3, r0
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d001      	beq.n	80011be <MX_DAC3_Init+0x62>
  {
    Error_Handler();
 80011ba:	f000 fb73 	bl	80018a4 <Error_Handler>
  }
  /* USER CODE BEGIN DAC3_Init 2 */

  /* USER CODE END DAC3_Init 2 */

}
 80011be:	bf00      	nop
 80011c0:	3730      	adds	r7, #48	; 0x30
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	bf00      	nop
 80011c8:	20000124 	.word	0x20000124
 80011cc:	50001000 	.word	0x50001000

080011d0 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 80011d4:	4b20      	ldr	r3, [pc, #128]	; (8001258 <MX_FDCAN1_Init+0x88>)
 80011d6:	4a21      	ldr	r2, [pc, #132]	; (800125c <MX_FDCAN1_Init+0x8c>)
 80011d8:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV10;
 80011da:	4b1f      	ldr	r3, [pc, #124]	; (8001258 <MX_FDCAN1_Init+0x88>)
 80011dc:	2205      	movs	r2, #5
 80011de:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_FD_NO_BRS;
 80011e0:	4b1d      	ldr	r3, [pc, #116]	; (8001258 <MX_FDCAN1_Init+0x88>)
 80011e2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80011e6:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 80011e8:	4b1b      	ldr	r3, [pc, #108]	; (8001258 <MX_FDCAN1_Init+0x88>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = ENABLE;
 80011ee:	4b1a      	ldr	r3, [pc, #104]	; (8001258 <MX_FDCAN1_Init+0x88>)
 80011f0:	2201      	movs	r2, #1
 80011f2:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 80011f4:	4b18      	ldr	r3, [pc, #96]	; (8001258 <MX_FDCAN1_Init+0x88>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 80011fa:	4b17      	ldr	r3, [pc, #92]	; (8001258 <MX_FDCAN1_Init+0x88>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 1;
 8001200:	4b15      	ldr	r3, [pc, #84]	; (8001258 <MX_FDCAN1_Init+0x88>)
 8001202:	2201      	movs	r2, #1
 8001204:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 6;
 8001206:	4b14      	ldr	r3, [pc, #80]	; (8001258 <MX_FDCAN1_Init+0x88>)
 8001208:	2206      	movs	r2, #6
 800120a:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 23;
 800120c:	4b12      	ldr	r3, [pc, #72]	; (8001258 <MX_FDCAN1_Init+0x88>)
 800120e:	2217      	movs	r2, #23
 8001210:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 6;
 8001212:	4b11      	ldr	r3, [pc, #68]	; (8001258 <MX_FDCAN1_Init+0x88>)
 8001214:	2206      	movs	r2, #6
 8001216:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8001218:	4b0f      	ldr	r3, [pc, #60]	; (8001258 <MX_FDCAN1_Init+0x88>)
 800121a:	2201      	movs	r2, #1
 800121c:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 6;
 800121e:	4b0e      	ldr	r3, [pc, #56]	; (8001258 <MX_FDCAN1_Init+0x88>)
 8001220:	2206      	movs	r2, #6
 8001222:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 23;
 8001224:	4b0c      	ldr	r3, [pc, #48]	; (8001258 <MX_FDCAN1_Init+0x88>)
 8001226:	2217      	movs	r2, #23
 8001228:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 6;
 800122a:	4b0b      	ldr	r3, [pc, #44]	; (8001258 <MX_FDCAN1_Init+0x88>)
 800122c:	2206      	movs	r2, #6
 800122e:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.StdFiltersNbr = 1;
 8001230:	4b09      	ldr	r3, [pc, #36]	; (8001258 <MX_FDCAN1_Init+0x88>)
 8001232:	2201      	movs	r2, #1
 8001234:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 8001236:	4b08      	ldr	r3, [pc, #32]	; (8001258 <MX_FDCAN1_Init+0x88>)
 8001238:	2200      	movs	r2, #0
 800123a:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 800123c:	4b06      	ldr	r3, [pc, #24]	; (8001258 <MX_FDCAN1_Init+0x88>)
 800123e:	2200      	movs	r2, #0
 8001240:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8001242:	4805      	ldr	r0, [pc, #20]	; (8001258 <MX_FDCAN1_Init+0x88>)
 8001244:	f003 f9b6 	bl	80045b4 <HAL_FDCAN_Init>
 8001248:	4603      	mov	r3, r0
 800124a:	2b00      	cmp	r3, #0
 800124c:	d001      	beq.n	8001252 <MX_FDCAN1_Init+0x82>
  {
    Error_Handler();
 800124e:	f000 fb29 	bl	80018a4 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8001252:	bf00      	nop
 8001254:	bd80      	pop	{r7, pc}
 8001256:	bf00      	nop
 8001258:	20000138 	.word	0x20000138
 800125c:	40006400 	.word	0x40006400

08001260 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001264:	4b1b      	ldr	r3, [pc, #108]	; (80012d4 <MX_I2C1_Init+0x74>)
 8001266:	4a1c      	ldr	r2, [pc, #112]	; (80012d8 <MX_I2C1_Init+0x78>)
 8001268:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20C0EDFF;
 800126a:	4b1a      	ldr	r3, [pc, #104]	; (80012d4 <MX_I2C1_Init+0x74>)
 800126c:	4a1b      	ldr	r2, [pc, #108]	; (80012dc <MX_I2C1_Init+0x7c>)
 800126e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001270:	4b18      	ldr	r3, [pc, #96]	; (80012d4 <MX_I2C1_Init+0x74>)
 8001272:	2200      	movs	r2, #0
 8001274:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001276:	4b17      	ldr	r3, [pc, #92]	; (80012d4 <MX_I2C1_Init+0x74>)
 8001278:	2201      	movs	r2, #1
 800127a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800127c:	4b15      	ldr	r3, [pc, #84]	; (80012d4 <MX_I2C1_Init+0x74>)
 800127e:	2200      	movs	r2, #0
 8001280:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001282:	4b14      	ldr	r3, [pc, #80]	; (80012d4 <MX_I2C1_Init+0x74>)
 8001284:	2200      	movs	r2, #0
 8001286:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001288:	4b12      	ldr	r3, [pc, #72]	; (80012d4 <MX_I2C1_Init+0x74>)
 800128a:	2200      	movs	r2, #0
 800128c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800128e:	4b11      	ldr	r3, [pc, #68]	; (80012d4 <MX_I2C1_Init+0x74>)
 8001290:	2200      	movs	r2, #0
 8001292:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001294:	4b0f      	ldr	r3, [pc, #60]	; (80012d4 <MX_I2C1_Init+0x74>)
 8001296:	2200      	movs	r2, #0
 8001298:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800129a:	480e      	ldr	r0, [pc, #56]	; (80012d4 <MX_I2C1_Init+0x74>)
 800129c:	f003 fe82 	bl	8004fa4 <HAL_I2C_Init>
 80012a0:	4603      	mov	r3, r0
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d001      	beq.n	80012aa <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80012a6:	f000 fafd 	bl	80018a4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80012aa:	2100      	movs	r1, #0
 80012ac:	4809      	ldr	r0, [pc, #36]	; (80012d4 <MX_I2C1_Init+0x74>)
 80012ae:	f003 ff08 	bl	80050c2 <HAL_I2CEx_ConfigAnalogFilter>
 80012b2:	4603      	mov	r3, r0
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d001      	beq.n	80012bc <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80012b8:	f000 faf4 	bl	80018a4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80012bc:	2100      	movs	r1, #0
 80012be:	4805      	ldr	r0, [pc, #20]	; (80012d4 <MX_I2C1_Init+0x74>)
 80012c0:	f003 ff4a 	bl	8005158 <HAL_I2CEx_ConfigDigitalFilter>
 80012c4:	4603      	mov	r3, r0
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d001      	beq.n	80012ce <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80012ca:	f000 faeb 	bl	80018a4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80012ce:	bf00      	nop
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	bf00      	nop
 80012d4:	2000019c 	.word	0x2000019c
 80012d8:	40005400 	.word	0x40005400
 80012dc:	20c0edff 	.word	0x20c0edff

080012e0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80012e4:	4b1b      	ldr	r3, [pc, #108]	; (8001354 <MX_SPI1_Init+0x74>)
 80012e6:	4a1c      	ldr	r2, [pc, #112]	; (8001358 <MX_SPI1_Init+0x78>)
 80012e8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80012ea:	4b1a      	ldr	r3, [pc, #104]	; (8001354 <MX_SPI1_Init+0x74>)
 80012ec:	f44f 7282 	mov.w	r2, #260	; 0x104
 80012f0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80012f2:	4b18      	ldr	r3, [pc, #96]	; (8001354 <MX_SPI1_Init+0x74>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80012f8:	4b16      	ldr	r3, [pc, #88]	; (8001354 <MX_SPI1_Init+0x74>)
 80012fa:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80012fe:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001300:	4b14      	ldr	r3, [pc, #80]	; (8001354 <MX_SPI1_Init+0x74>)
 8001302:	2200      	movs	r2, #0
 8001304:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001306:	4b13      	ldr	r3, [pc, #76]	; (8001354 <MX_SPI1_Init+0x74>)
 8001308:	2201      	movs	r2, #1
 800130a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800130c:	4b11      	ldr	r3, [pc, #68]	; (8001354 <MX_SPI1_Init+0x74>)
 800130e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001312:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001314:	4b0f      	ldr	r3, [pc, #60]	; (8001354 <MX_SPI1_Init+0x74>)
 8001316:	2220      	movs	r2, #32
 8001318:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800131a:	4b0e      	ldr	r3, [pc, #56]	; (8001354 <MX_SPI1_Init+0x74>)
 800131c:	2200      	movs	r2, #0
 800131e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001320:	4b0c      	ldr	r3, [pc, #48]	; (8001354 <MX_SPI1_Init+0x74>)
 8001322:	2200      	movs	r2, #0
 8001324:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001326:	4b0b      	ldr	r3, [pc, #44]	; (8001354 <MX_SPI1_Init+0x74>)
 8001328:	2200      	movs	r2, #0
 800132a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 800132c:	4b09      	ldr	r3, [pc, #36]	; (8001354 <MX_SPI1_Init+0x74>)
 800132e:	2207      	movs	r2, #7
 8001330:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001332:	4b08      	ldr	r3, [pc, #32]	; (8001354 <MX_SPI1_Init+0x74>)
 8001334:	2200      	movs	r2, #0
 8001336:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001338:	4b06      	ldr	r3, [pc, #24]	; (8001354 <MX_SPI1_Init+0x74>)
 800133a:	2200      	movs	r2, #0
 800133c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800133e:	4805      	ldr	r0, [pc, #20]	; (8001354 <MX_SPI1_Init+0x74>)
 8001340:	f004 ff2a 	bl	8006198 <HAL_SPI_Init>
 8001344:	4603      	mov	r3, r0
 8001346:	2b00      	cmp	r3, #0
 8001348:	d001      	beq.n	800134e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800134a:	f000 faab 	bl	80018a4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800134e:	bf00      	nop
 8001350:	bd80      	pop	{r7, pc}
 8001352:	bf00      	nop
 8001354:	200001e8 	.word	0x200001e8
 8001358:	40013000 	.word	0x40013000

0800135c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b09c      	sub	sp, #112	; 0x70
 8001360:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001362:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001366:	2200      	movs	r2, #0
 8001368:	601a      	str	r2, [r3, #0]
 800136a:	605a      	str	r2, [r3, #4]
 800136c:	609a      	str	r2, [r3, #8]
 800136e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001370:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001374:	2200      	movs	r2, #0
 8001376:	601a      	str	r2, [r3, #0]
 8001378:	605a      	str	r2, [r3, #4]
 800137a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800137c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001380:	2200      	movs	r2, #0
 8001382:	601a      	str	r2, [r3, #0]
 8001384:	605a      	str	r2, [r3, #4]
 8001386:	609a      	str	r2, [r3, #8]
 8001388:	60da      	str	r2, [r3, #12]
 800138a:	611a      	str	r2, [r3, #16]
 800138c:	615a      	str	r2, [r3, #20]
 800138e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001390:	1d3b      	adds	r3, r7, #4
 8001392:	2234      	movs	r2, #52	; 0x34
 8001394:	2100      	movs	r1, #0
 8001396:	4618      	mov	r0, r3
 8001398:	f007 ff4e 	bl	8009238 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800139c:	4b53      	ldr	r3, [pc, #332]	; (80014ec <MX_TIM1_Init+0x190>)
 800139e:	4a54      	ldr	r2, [pc, #336]	; (80014f0 <MX_TIM1_Init+0x194>)
 80013a0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1;
 80013a2:	4b52      	ldr	r3, [pc, #328]	; (80014ec <MX_TIM1_Init+0x190>)
 80013a4:	2201      	movs	r2, #1
 80013a6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 80013a8:	4b50      	ldr	r3, [pc, #320]	; (80014ec <MX_TIM1_Init+0x190>)
 80013aa:	2220      	movs	r2, #32
 80013ac:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1499;
 80013ae:	4b4f      	ldr	r3, [pc, #316]	; (80014ec <MX_TIM1_Init+0x190>)
 80013b0:	f240 52db 	movw	r2, #1499	; 0x5db
 80013b4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013b6:	4b4d      	ldr	r3, [pc, #308]	; (80014ec <MX_TIM1_Init+0x190>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80013bc:	4b4b      	ldr	r3, [pc, #300]	; (80014ec <MX_TIM1_Init+0x190>)
 80013be:	2200      	movs	r2, #0
 80013c0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013c2:	4b4a      	ldr	r3, [pc, #296]	; (80014ec <MX_TIM1_Init+0x190>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80013c8:	4848      	ldr	r0, [pc, #288]	; (80014ec <MX_TIM1_Init+0x190>)
 80013ca:	f005 fb07 	bl	80069dc <HAL_TIM_Base_Init>
 80013ce:	4603      	mov	r3, r0
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d001      	beq.n	80013d8 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80013d4:	f000 fa66 	bl	80018a4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013dc:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80013de:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80013e2:	4619      	mov	r1, r3
 80013e4:	4841      	ldr	r0, [pc, #260]	; (80014ec <MX_TIM1_Init+0x190>)
 80013e6:	f005 fffd 	bl	80073e4 <HAL_TIM_ConfigClockSource>
 80013ea:	4603      	mov	r3, r0
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d001      	beq.n	80013f4 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80013f0:	f000 fa58 	bl	80018a4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80013f4:	483d      	ldr	r0, [pc, #244]	; (80014ec <MX_TIM1_Init+0x190>)
 80013f6:	f005 fbb3 	bl	8006b60 <HAL_TIM_PWM_Init>
 80013fa:	4603      	mov	r3, r0
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d001      	beq.n	8001404 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8001400:	f000 fa50 	bl	80018a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001404:	2300      	movs	r3, #0
 8001406:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001408:	2300      	movs	r3, #0
 800140a:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800140c:	2300      	movs	r3, #0
 800140e:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001410:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001414:	4619      	mov	r1, r3
 8001416:	4835      	ldr	r0, [pc, #212]	; (80014ec <MX_TIM1_Init+0x190>)
 8001418:	f006 ff76 	bl	8008308 <HAL_TIMEx_MasterConfigSynchronization>
 800141c:	4603      	mov	r3, r0
 800141e:	2b00      	cmp	r3, #0
 8001420:	d001      	beq.n	8001426 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8001422:	f000 fa3f 	bl	80018a4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001426:	2360      	movs	r3, #96	; 0x60
 8001428:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 800142a:	2300      	movs	r3, #0
 800142c:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800142e:	2300      	movs	r3, #0
 8001430:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_LOW;
 8001432:	2308      	movs	r3, #8
 8001434:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001436:	2300      	movs	r3, #0
 8001438:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800143a:	2300      	movs	r3, #0
 800143c:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_SET;
 800143e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001442:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001444:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001448:	2200      	movs	r2, #0
 800144a:	4619      	mov	r1, r3
 800144c:	4827      	ldr	r0, [pc, #156]	; (80014ec <MX_TIM1_Init+0x190>)
 800144e:	f005 feb5 	bl	80071bc <HAL_TIM_PWM_ConfigChannel>
 8001452:	4603      	mov	r3, r0
 8001454:	2b00      	cmp	r3, #0
 8001456:	d001      	beq.n	800145c <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 8001458:	f000 fa24 	bl	80018a4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800145c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001460:	2204      	movs	r2, #4
 8001462:	4619      	mov	r1, r3
 8001464:	4821      	ldr	r0, [pc, #132]	; (80014ec <MX_TIM1_Init+0x190>)
 8001466:	f005 fea9 	bl	80071bc <HAL_TIM_PWM_ConfigChannel>
 800146a:	4603      	mov	r3, r0
 800146c:	2b00      	cmp	r3, #0
 800146e:	d001      	beq.n	8001474 <MX_TIM1_Init+0x118>
  {
    Error_Handler();
 8001470:	f000 fa18 	bl	80018a4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001474:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001478:	2208      	movs	r2, #8
 800147a:	4619      	mov	r1, r3
 800147c:	481b      	ldr	r0, [pc, #108]	; (80014ec <MX_TIM1_Init+0x190>)
 800147e:	f005 fe9d 	bl	80071bc <HAL_TIM_PWM_ConfigChannel>
 8001482:	4603      	mov	r3, r0
 8001484:	2b00      	cmp	r3, #0
 8001486:	d001      	beq.n	800148c <MX_TIM1_Init+0x130>
  {
    Error_Handler();
 8001488:	f000 fa0c 	bl	80018a4 <Error_Handler>
  }
  HAL_TIMEx_EnableDeadTimePreload(&htim1);
 800148c:	4817      	ldr	r0, [pc, #92]	; (80014ec <MX_TIM1_Init+0x190>)
 800148e:	f007 f85d 	bl	800854c <HAL_TIMEx_EnableDeadTimePreload>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001492:	2300      	movs	r3, #0
 8001494:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001496:	2300      	movs	r3, #0
 8001498:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800149a:	2300      	movs	r3, #0
 800149c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 90;
 800149e:	235a      	movs	r3, #90	; 0x5a
 80014a0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80014a2:	2300      	movs	r3, #0
 80014a4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80014a6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80014aa:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80014ac:	2300      	movs	r3, #0
 80014ae:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80014b0:	2300      	movs	r3, #0
 80014b2:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80014b4:	2300      	movs	r3, #0
 80014b6:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80014b8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80014bc:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 80014be:	2300      	movs	r3, #0
 80014c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80014c2:	2300      	movs	r3, #0
 80014c4:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80014c6:	2300      	movs	r3, #0
 80014c8:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80014ca:	1d3b      	adds	r3, r7, #4
 80014cc:	4619      	mov	r1, r3
 80014ce:	4807      	ldr	r0, [pc, #28]	; (80014ec <MX_TIM1_Init+0x190>)
 80014d0:	f006 ff9c 	bl	800840c <HAL_TIMEx_ConfigBreakDeadTime>
 80014d4:	4603      	mov	r3, r0
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d001      	beq.n	80014de <MX_TIM1_Init+0x182>
  {
    Error_Handler();
 80014da:	f000 f9e3 	bl	80018a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80014de:	4803      	ldr	r0, [pc, #12]	; (80014ec <MX_TIM1_Init+0x190>)
 80014e0:	f000 fcce 	bl	8001e80 <HAL_TIM_MspPostInit>

}
 80014e4:	bf00      	nop
 80014e6:	3770      	adds	r7, #112	; 0x70
 80014e8:	46bd      	mov	sp, r7
 80014ea:	bd80      	pop	{r7, pc}
 80014ec:	2000024c 	.word	0x2000024c
 80014f0:	40012c00 	.word	0x40012c00

080014f4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b088      	sub	sp, #32
 80014f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_HallSensor_InitTypeDef sConfig = {0};
 80014fa:	f107 0310 	add.w	r3, r7, #16
 80014fe:	2200      	movs	r2, #0
 8001500:	601a      	str	r2, [r3, #0]
 8001502:	605a      	str	r2, [r3, #4]
 8001504:	609a      	str	r2, [r3, #8]
 8001506:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001508:	1d3b      	adds	r3, r7, #4
 800150a:	2200      	movs	r2, #0
 800150c:	601a      	str	r2, [r3, #0]
 800150e:	605a      	str	r2, [r3, #4]
 8001510:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001512:	4b1c      	ldr	r3, [pc, #112]	; (8001584 <MX_TIM2_Init+0x90>)
 8001514:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001518:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800151a:	4b1a      	ldr	r3, [pc, #104]	; (8001584 <MX_TIM2_Init+0x90>)
 800151c:	2200      	movs	r2, #0
 800151e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001520:	4b18      	ldr	r3, [pc, #96]	; (8001584 <MX_TIM2_Init+0x90>)
 8001522:	2200      	movs	r2, #0
 8001524:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4.294967295E9;
 8001526:	4b17      	ldr	r3, [pc, #92]	; (8001584 <MX_TIM2_Init+0x90>)
 8001528:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800152c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800152e:	4b15      	ldr	r3, [pc, #84]	; (8001584 <MX_TIM2_Init+0x90>)
 8001530:	2200      	movs	r2, #0
 8001532:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001534:	4b13      	ldr	r3, [pc, #76]	; (8001584 <MX_TIM2_Init+0x90>)
 8001536:	2200      	movs	r2, #0
 8001538:	619a      	str	r2, [r3, #24]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800153a:	2300      	movs	r3, #0
 800153c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800153e:	2300      	movs	r3, #0
 8001540:	617b      	str	r3, [r7, #20]
  sConfig.IC1Filter = 0;
 8001542:	2300      	movs	r3, #0
 8001544:	61bb      	str	r3, [r7, #24]
  sConfig.Commutation_Delay = 0;
 8001546:	2300      	movs	r3, #0
 8001548:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_HallSensor_Init(&htim2, &sConfig) != HAL_OK)
 800154a:	f107 0310 	add.w	r3, r7, #16
 800154e:	4619      	mov	r1, r3
 8001550:	480c      	ldr	r0, [pc, #48]	; (8001584 <MX_TIM2_Init+0x90>)
 8001552:	f006 fd22 	bl	8007f9a <HAL_TIMEx_HallSensor_Init>
 8001556:	4603      	mov	r3, r0
 8001558:	2b00      	cmp	r3, #0
 800155a:	d001      	beq.n	8001560 <MX_TIM2_Init+0x6c>
  {
    Error_Handler();
 800155c:	f000 f9a2 	bl	80018a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC2REF;
 8001560:	2350      	movs	r3, #80	; 0x50
 8001562:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001564:	2300      	movs	r3, #0
 8001566:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001568:	1d3b      	adds	r3, r7, #4
 800156a:	4619      	mov	r1, r3
 800156c:	4805      	ldr	r0, [pc, #20]	; (8001584 <MX_TIM2_Init+0x90>)
 800156e:	f006 fecb 	bl	8008308 <HAL_TIMEx_MasterConfigSynchronization>
 8001572:	4603      	mov	r3, r0
 8001574:	2b00      	cmp	r3, #0
 8001576:	d001      	beq.n	800157c <MX_TIM2_Init+0x88>
  {
    Error_Handler();
 8001578:	f000 f994 	bl	80018a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800157c:	bf00      	nop
 800157e:	3720      	adds	r7, #32
 8001580:	46bd      	mov	sp, r7
 8001582:	bd80      	pop	{r7, pc}
 8001584:	20000298 	.word	0x20000298

08001588 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b084      	sub	sp, #16
 800158c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800158e:	1d3b      	adds	r3, r7, #4
 8001590:	2200      	movs	r2, #0
 8001592:	601a      	str	r2, [r3, #0]
 8001594:	605a      	str	r2, [r3, #4]
 8001596:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001598:	4b15      	ldr	r3, [pc, #84]	; (80015f0 <MX_TIM7_Init+0x68>)
 800159a:	4a16      	ldr	r2, [pc, #88]	; (80015f4 <MX_TIM7_Init+0x6c>)
 800159c:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 1700-1;
 800159e:	4b14      	ldr	r3, [pc, #80]	; (80015f0 <MX_TIM7_Init+0x68>)
 80015a0:	f240 62a3 	movw	r2, #1699	; 0x6a3
 80015a4:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015a6:	4b12      	ldr	r3, [pc, #72]	; (80015f0 <MX_TIM7_Init+0x68>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 999;
 80015ac:	4b10      	ldr	r3, [pc, #64]	; (80015f0 <MX_TIM7_Init+0x68>)
 80015ae:	f240 32e7 	movw	r2, #999	; 0x3e7
 80015b2:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80015b4:	4b0e      	ldr	r3, [pc, #56]	; (80015f0 <MX_TIM7_Init+0x68>)
 80015b6:	2280      	movs	r2, #128	; 0x80
 80015b8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80015ba:	480d      	ldr	r0, [pc, #52]	; (80015f0 <MX_TIM7_Init+0x68>)
 80015bc:	f005 fa0e 	bl	80069dc <HAL_TIM_Base_Init>
 80015c0:	4603      	mov	r3, r0
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d001      	beq.n	80015ca <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 80015c6:	f000 f96d 	bl	80018a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015ca:	2300      	movs	r3, #0
 80015cc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015ce:	2300      	movs	r3, #0
 80015d0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80015d2:	1d3b      	adds	r3, r7, #4
 80015d4:	4619      	mov	r1, r3
 80015d6:	4806      	ldr	r0, [pc, #24]	; (80015f0 <MX_TIM7_Init+0x68>)
 80015d8:	f006 fe96 	bl	8008308 <HAL_TIMEx_MasterConfigSynchronization>
 80015dc:	4603      	mov	r3, r0
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d001      	beq.n	80015e6 <MX_TIM7_Init+0x5e>
  {
    Error_Handler();
 80015e2:	f000 f95f 	bl	80018a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80015e6:	bf00      	nop
 80015e8:	3710      	adds	r7, #16
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bd80      	pop	{r7, pc}
 80015ee:	bf00      	nop
 80015f0:	200002e4 	.word	0x200002e4
 80015f4:	40001400 	.word	0x40001400

080015f8 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b094      	sub	sp, #80	; 0x50
 80015fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80015fe:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001602:	2200      	movs	r2, #0
 8001604:	601a      	str	r2, [r3, #0]
 8001606:	605a      	str	r2, [r3, #4]
 8001608:	609a      	str	r2, [r3, #8]
 800160a:	60da      	str	r2, [r3, #12]
 800160c:	611a      	str	r2, [r3, #16]
 800160e:	615a      	str	r2, [r3, #20]
 8001610:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001612:	463b      	mov	r3, r7
 8001614:	2234      	movs	r2, #52	; 0x34
 8001616:	2100      	movs	r1, #0
 8001618:	4618      	mov	r0, r3
 800161a:	f007 fe0d 	bl	8009238 <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 800161e:	4b31      	ldr	r3, [pc, #196]	; (80016e4 <MX_TIM17_Init+0xec>)
 8001620:	4a31      	ldr	r2, [pc, #196]	; (80016e8 <MX_TIM17_Init+0xf0>)
 8001622:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 169;
 8001624:	4b2f      	ldr	r3, [pc, #188]	; (80016e4 <MX_TIM17_Init+0xec>)
 8001626:	22a9      	movs	r2, #169	; 0xa9
 8001628:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 800162a:	4b2e      	ldr	r3, [pc, #184]	; (80016e4 <MX_TIM17_Init+0xec>)
 800162c:	2200      	movs	r2, #0
 800162e:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 99;
 8001630:	4b2c      	ldr	r3, [pc, #176]	; (80016e4 <MX_TIM17_Init+0xec>)
 8001632:	2263      	movs	r2, #99	; 0x63
 8001634:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 8001636:	4b2b      	ldr	r3, [pc, #172]	; (80016e4 <MX_TIM17_Init+0xec>)
 8001638:	f44f 7200 	mov.w	r2, #512	; 0x200
 800163c:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 800163e:	4b29      	ldr	r3, [pc, #164]	; (80016e4 <MX_TIM17_Init+0xec>)
 8001640:	2200      	movs	r2, #0
 8001642:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001644:	4b27      	ldr	r3, [pc, #156]	; (80016e4 <MX_TIM17_Init+0xec>)
 8001646:	2200      	movs	r2, #0
 8001648:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 800164a:	4826      	ldr	r0, [pc, #152]	; (80016e4 <MX_TIM17_Init+0xec>)
 800164c:	f005 f9c6 	bl	80069dc <HAL_TIM_Base_Init>
 8001650:	4603      	mov	r3, r0
 8001652:	2b00      	cmp	r3, #0
 8001654:	d001      	beq.n	800165a <MX_TIM17_Init+0x62>
  {
    Error_Handler();
 8001656:	f000 f925 	bl	80018a4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 800165a:	4822      	ldr	r0, [pc, #136]	; (80016e4 <MX_TIM17_Init+0xec>)
 800165c:	f005 fa80 	bl	8006b60 <HAL_TIM_PWM_Init>
 8001660:	4603      	mov	r3, r0
 8001662:	2b00      	cmp	r3, #0
 8001664:	d001      	beq.n	800166a <MX_TIM17_Init+0x72>
  {
    Error_Handler();
 8001666:	f000 f91d 	bl	80018a4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800166a:	2360      	movs	r3, #96	; 0x60
 800166c:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.Pulse = 0;
 800166e:	2300      	movs	r3, #0
 8001670:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001672:	2300      	movs	r3, #0
 8001674:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001676:	2300      	movs	r3, #0
 8001678:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800167a:	2300      	movs	r3, #0
 800167c:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800167e:	2300      	movs	r3, #0
 8001680:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001682:	2300      	movs	r3, #0
 8001684:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001686:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800168a:	2200      	movs	r2, #0
 800168c:	4619      	mov	r1, r3
 800168e:	4815      	ldr	r0, [pc, #84]	; (80016e4 <MX_TIM17_Init+0xec>)
 8001690:	f005 fd94 	bl	80071bc <HAL_TIM_PWM_ConfigChannel>
 8001694:	4603      	mov	r3, r0
 8001696:	2b00      	cmp	r3, #0
 8001698:	d001      	beq.n	800169e <MX_TIM17_Init+0xa6>
  {
    Error_Handler();
 800169a:	f000 f903 	bl	80018a4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800169e:	2300      	movs	r3, #0
 80016a0:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80016a2:	2300      	movs	r3, #0
 80016a4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80016a6:	2300      	movs	r3, #0
 80016a8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80016aa:	2300      	movs	r3, #0
 80016ac:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80016ae:	2300      	movs	r3, #0
 80016b0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80016b2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80016b6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80016b8:	2300      	movs	r3, #0
 80016ba:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80016bc:	2300      	movs	r3, #0
 80016be:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 80016c0:	463b      	mov	r3, r7
 80016c2:	4619      	mov	r1, r3
 80016c4:	4807      	ldr	r0, [pc, #28]	; (80016e4 <MX_TIM17_Init+0xec>)
 80016c6:	f006 fea1 	bl	800840c <HAL_TIMEx_ConfigBreakDeadTime>
 80016ca:	4603      	mov	r3, r0
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d001      	beq.n	80016d4 <MX_TIM17_Init+0xdc>
  {
    Error_Handler();
 80016d0:	f000 f8e8 	bl	80018a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */
  HAL_TIM_MspPostInit(&htim17);
 80016d4:	4803      	ldr	r0, [pc, #12]	; (80016e4 <MX_TIM17_Init+0xec>)
 80016d6:	f000 fbd3 	bl	8001e80 <HAL_TIM_MspPostInit>

}
 80016da:	bf00      	nop
 80016dc:	3750      	adds	r7, #80	; 0x50
 80016de:	46bd      	mov	sp, r7
 80016e0:	bd80      	pop	{r7, pc}
 80016e2:	bf00      	nop
 80016e4:	20000330 	.word	0x20000330
 80016e8:	40014800 	.word	0x40014800

080016ec <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80016f0:	4b22      	ldr	r3, [pc, #136]	; (800177c <MX_USART3_UART_Init+0x90>)
 80016f2:	4a23      	ldr	r2, [pc, #140]	; (8001780 <MX_USART3_UART_Init+0x94>)
 80016f4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80016f6:	4b21      	ldr	r3, [pc, #132]	; (800177c <MX_USART3_UART_Init+0x90>)
 80016f8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80016fc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80016fe:	4b1f      	ldr	r3, [pc, #124]	; (800177c <MX_USART3_UART_Init+0x90>)
 8001700:	2200      	movs	r2, #0
 8001702:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001704:	4b1d      	ldr	r3, [pc, #116]	; (800177c <MX_USART3_UART_Init+0x90>)
 8001706:	2200      	movs	r2, #0
 8001708:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800170a:	4b1c      	ldr	r3, [pc, #112]	; (800177c <MX_USART3_UART_Init+0x90>)
 800170c:	2200      	movs	r2, #0
 800170e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001710:	4b1a      	ldr	r3, [pc, #104]	; (800177c <MX_USART3_UART_Init+0x90>)
 8001712:	220c      	movs	r2, #12
 8001714:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001716:	4b19      	ldr	r3, [pc, #100]	; (800177c <MX_USART3_UART_Init+0x90>)
 8001718:	2200      	movs	r2, #0
 800171a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800171c:	4b17      	ldr	r3, [pc, #92]	; (800177c <MX_USART3_UART_Init+0x90>)
 800171e:	2200      	movs	r2, #0
 8001720:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001722:	4b16      	ldr	r3, [pc, #88]	; (800177c <MX_USART3_UART_Init+0x90>)
 8001724:	2200      	movs	r2, #0
 8001726:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001728:	4b14      	ldr	r3, [pc, #80]	; (800177c <MX_USART3_UART_Init+0x90>)
 800172a:	2200      	movs	r2, #0
 800172c:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800172e:	4b13      	ldr	r3, [pc, #76]	; (800177c <MX_USART3_UART_Init+0x90>)
 8001730:	2200      	movs	r2, #0
 8001732:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001734:	4811      	ldr	r0, [pc, #68]	; (800177c <MX_USART3_UART_Init+0x90>)
 8001736:	f006 ff87 	bl	8008648 <HAL_UART_Init>
 800173a:	4603      	mov	r3, r0
 800173c:	2b00      	cmp	r3, #0
 800173e:	d001      	beq.n	8001744 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001740:	f000 f8b0 	bl	80018a4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001744:	2100      	movs	r1, #0
 8001746:	480d      	ldr	r0, [pc, #52]	; (800177c <MX_USART3_UART_Init+0x90>)
 8001748:	f007 fc88 	bl	800905c <HAL_UARTEx_SetTxFifoThreshold>
 800174c:	4603      	mov	r3, r0
 800174e:	2b00      	cmp	r3, #0
 8001750:	d001      	beq.n	8001756 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001752:	f000 f8a7 	bl	80018a4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001756:	2100      	movs	r1, #0
 8001758:	4808      	ldr	r0, [pc, #32]	; (800177c <MX_USART3_UART_Init+0x90>)
 800175a:	f007 fcbd 	bl	80090d8 <HAL_UARTEx_SetRxFifoThreshold>
 800175e:	4603      	mov	r3, r0
 8001760:	2b00      	cmp	r3, #0
 8001762:	d001      	beq.n	8001768 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001764:	f000 f89e 	bl	80018a4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001768:	4804      	ldr	r0, [pc, #16]	; (800177c <MX_USART3_UART_Init+0x90>)
 800176a:	f007 fc3e 	bl	8008fea <HAL_UARTEx_DisableFifoMode>
 800176e:	4603      	mov	r3, r0
 8001770:	2b00      	cmp	r3, #0
 8001772:	d001      	beq.n	8001778 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001774:	f000 f896 	bl	80018a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001778:	bf00      	nop
 800177a:	bd80      	pop	{r7, pc}
 800177c:	2000037c 	.word	0x2000037c
 8001780:	40004800 	.word	0x40004800

08001784 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b08a      	sub	sp, #40	; 0x28
 8001788:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800178a:	f107 0314 	add.w	r3, r7, #20
 800178e:	2200      	movs	r2, #0
 8001790:	601a      	str	r2, [r3, #0]
 8001792:	605a      	str	r2, [r3, #4]
 8001794:	609a      	str	r2, [r3, #8]
 8001796:	60da      	str	r2, [r3, #12]
 8001798:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800179a:	4b3f      	ldr	r3, [pc, #252]	; (8001898 <MX_GPIO_Init+0x114>)
 800179c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800179e:	4a3e      	ldr	r2, [pc, #248]	; (8001898 <MX_GPIO_Init+0x114>)
 80017a0:	f043 0304 	orr.w	r3, r3, #4
 80017a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017a6:	4b3c      	ldr	r3, [pc, #240]	; (8001898 <MX_GPIO_Init+0x114>)
 80017a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017aa:	f003 0304 	and.w	r3, r3, #4
 80017ae:	613b      	str	r3, [r7, #16]
 80017b0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80017b2:	4b39      	ldr	r3, [pc, #228]	; (8001898 <MX_GPIO_Init+0x114>)
 80017b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017b6:	4a38      	ldr	r2, [pc, #224]	; (8001898 <MX_GPIO_Init+0x114>)
 80017b8:	f043 0320 	orr.w	r3, r3, #32
 80017bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017be:	4b36      	ldr	r3, [pc, #216]	; (8001898 <MX_GPIO_Init+0x114>)
 80017c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017c2:	f003 0320 	and.w	r3, r3, #32
 80017c6:	60fb      	str	r3, [r7, #12]
 80017c8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017ca:	4b33      	ldr	r3, [pc, #204]	; (8001898 <MX_GPIO_Init+0x114>)
 80017cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017ce:	4a32      	ldr	r2, [pc, #200]	; (8001898 <MX_GPIO_Init+0x114>)
 80017d0:	f043 0301 	orr.w	r3, r3, #1
 80017d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017d6:	4b30      	ldr	r3, [pc, #192]	; (8001898 <MX_GPIO_Init+0x114>)
 80017d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017da:	f003 0301 	and.w	r3, r3, #1
 80017de:	60bb      	str	r3, [r7, #8]
 80017e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017e2:	4b2d      	ldr	r3, [pc, #180]	; (8001898 <MX_GPIO_Init+0x114>)
 80017e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017e6:	4a2c      	ldr	r2, [pc, #176]	; (8001898 <MX_GPIO_Init+0x114>)
 80017e8:	f043 0302 	orr.w	r3, r3, #2
 80017ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017ee:	4b2a      	ldr	r3, [pc, #168]	; (8001898 <MX_GPIO_Init+0x114>)
 80017f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017f2:	f003 0302 	and.w	r3, r3, #2
 80017f6:	607b      	str	r3, [r7, #4]
 80017f8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED1_Pin|LED2_Pin|LED3_Pin, GPIO_PIN_RESET);
 80017fa:	2200      	movs	r2, #0
 80017fc:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 8001800:	4826      	ldr	r0, [pc, #152]	; (800189c <MX_GPIO_Init+0x118>)
 8001802:	f003 fbb7 	bl	8004f74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|DAC_DBG_Pin|DBG_OUT_Pin, GPIO_PIN_RESET);
 8001806:	2200      	movs	r2, #0
 8001808:	2170      	movs	r1, #112	; 0x70
 800180a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800180e:	f003 fbb1 	bl	8004f74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8001812:	2200      	movs	r2, #0
 8001814:	2140      	movs	r1, #64	; 0x40
 8001816:	4822      	ldr	r0, [pc, #136]	; (80018a0 <MX_GPIO_Init+0x11c>)
 8001818:	f003 fbac 	bl	8004f74 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED1_Pin LED2_Pin LED3_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin;
 800181c:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001820:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001822:	2311      	movs	r3, #17
 8001824:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001826:	2300      	movs	r3, #0
 8001828:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800182a:	2300      	movs	r3, #0
 800182c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800182e:	f107 0314 	add.w	r3, r7, #20
 8001832:	4619      	mov	r1, r3
 8001834:	4819      	ldr	r0, [pc, #100]	; (800189c <MX_GPIO_Init+0x118>)
 8001836:	f003 fa1b 	bl	8004c70 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 800183a:	2308      	movs	r3, #8
 800183c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800183e:	2300      	movs	r3, #0
 8001840:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001842:	2300      	movs	r3, #0
 8001844:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001846:	f107 0314 	add.w	r3, r7, #20
 800184a:	4619      	mov	r1, r3
 800184c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001850:	f003 fa0e 	bl	8004c70 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 DAC_DBG_Pin DBG_OUT_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_4|DAC_DBG_Pin|DBG_OUT_Pin;
 8001854:	2370      	movs	r3, #112	; 0x70
 8001856:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001858:	2301      	movs	r3, #1
 800185a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800185c:	2300      	movs	r3, #0
 800185e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001860:	2300      	movs	r3, #0
 8001862:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001864:	f107 0314 	add.w	r3, r7, #20
 8001868:	4619      	mov	r1, r3
 800186a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800186e:	f003 f9ff 	bl	8004c70 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_CS_Pin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 8001872:	2340      	movs	r3, #64	; 0x40
 8001874:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001876:	2301      	movs	r3, #1
 8001878:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800187a:	2300      	movs	r3, #0
 800187c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800187e:	2300      	movs	r3, #0
 8001880:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8001882:	f107 0314 	add.w	r3, r7, #20
 8001886:	4619      	mov	r1, r3
 8001888:	4805      	ldr	r0, [pc, #20]	; (80018a0 <MX_GPIO_Init+0x11c>)
 800188a:	f003 f9f1 	bl	8004c70 <HAL_GPIO_Init>

}
 800188e:	bf00      	nop
 8001890:	3728      	adds	r7, #40	; 0x28
 8001892:	46bd      	mov	sp, r7
 8001894:	bd80      	pop	{r7, pc}
 8001896:	bf00      	nop
 8001898:	40021000 	.word	0x40021000
 800189c:	48000800 	.word	0x48000800
 80018a0:	48000400 	.word	0x48000400

080018a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018a4:	b480      	push	{r7}
 80018a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80018a8:	b672      	cpsid	i
}
 80018aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80018ac:	e7fe      	b.n	80018ac <Error_Handler+0x8>
	...

080018b0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b082      	sub	sp, #8
 80018b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018b6:	4b0f      	ldr	r3, [pc, #60]	; (80018f4 <HAL_MspInit+0x44>)
 80018b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018ba:	4a0e      	ldr	r2, [pc, #56]	; (80018f4 <HAL_MspInit+0x44>)
 80018bc:	f043 0301 	orr.w	r3, r3, #1
 80018c0:	6613      	str	r3, [r2, #96]	; 0x60
 80018c2:	4b0c      	ldr	r3, [pc, #48]	; (80018f4 <HAL_MspInit+0x44>)
 80018c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018c6:	f003 0301 	and.w	r3, r3, #1
 80018ca:	607b      	str	r3, [r7, #4]
 80018cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018ce:	4b09      	ldr	r3, [pc, #36]	; (80018f4 <HAL_MspInit+0x44>)
 80018d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018d2:	4a08      	ldr	r2, [pc, #32]	; (80018f4 <HAL_MspInit+0x44>)
 80018d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018d8:	6593      	str	r3, [r2, #88]	; 0x58
 80018da:	4b06      	ldr	r3, [pc, #24]	; (80018f4 <HAL_MspInit+0x44>)
 80018dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018e2:	603b      	str	r3, [r7, #0]
 80018e4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80018e6:	f003 fd27 	bl	8005338 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018ea:	bf00      	nop
 80018ec:	3708      	adds	r7, #8
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bd80      	pop	{r7, pc}
 80018f2:	bf00      	nop
 80018f4:	40021000 	.word	0x40021000

080018f8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b09e      	sub	sp, #120	; 0x78
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001900:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001904:	2200      	movs	r2, #0
 8001906:	601a      	str	r2, [r3, #0]
 8001908:	605a      	str	r2, [r3, #4]
 800190a:	609a      	str	r2, [r3, #8]
 800190c:	60da      	str	r2, [r3, #12]
 800190e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001910:	f107 0320 	add.w	r3, r7, #32
 8001914:	2244      	movs	r2, #68	; 0x44
 8001916:	2100      	movs	r1, #0
 8001918:	4618      	mov	r0, r3
 800191a:	f007 fc8d 	bl	8009238 <memset>
  if(hadc->Instance==ADC1)
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001926:	d13e      	bne.n	80019a6 <HAL_ADC_MspInit+0xae>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001928:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800192c:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 800192e:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001932:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001934:	f107 0320 	add.w	r3, r7, #32
 8001938:	4618      	mov	r0, r3
 800193a:	f004 fa3d 	bl	8005db8 <HAL_RCCEx_PeriphCLKConfig>
 800193e:	4603      	mov	r3, r0
 8001940:	2b00      	cmp	r3, #0
 8001942:	d001      	beq.n	8001948 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8001944:	f7ff ffae 	bl	80018a4 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001948:	4b46      	ldr	r3, [pc, #280]	; (8001a64 <HAL_ADC_MspInit+0x16c>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	3301      	adds	r3, #1
 800194e:	4a45      	ldr	r2, [pc, #276]	; (8001a64 <HAL_ADC_MspInit+0x16c>)
 8001950:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001952:	4b44      	ldr	r3, [pc, #272]	; (8001a64 <HAL_ADC_MspInit+0x16c>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	2b01      	cmp	r3, #1
 8001958:	d10b      	bne.n	8001972 <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 800195a:	4b43      	ldr	r3, [pc, #268]	; (8001a68 <HAL_ADC_MspInit+0x170>)
 800195c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800195e:	4a42      	ldr	r2, [pc, #264]	; (8001a68 <HAL_ADC_MspInit+0x170>)
 8001960:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001964:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001966:	4b40      	ldr	r3, [pc, #256]	; (8001a68 <HAL_ADC_MspInit+0x170>)
 8001968:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800196a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800196e:	61fb      	str	r3, [r7, #28]
 8001970:	69fb      	ldr	r3, [r7, #28]
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001972:	4b3d      	ldr	r3, [pc, #244]	; (8001a68 <HAL_ADC_MspInit+0x170>)
 8001974:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001976:	4a3c      	ldr	r2, [pc, #240]	; (8001a68 <HAL_ADC_MspInit+0x170>)
 8001978:	f043 0302 	orr.w	r3, r3, #2
 800197c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800197e:	4b3a      	ldr	r3, [pc, #232]	; (8001a68 <HAL_ADC_MspInit+0x170>)
 8001980:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001982:	f003 0302 	and.w	r3, r3, #2
 8001986:	61bb      	str	r3, [r7, #24]
 8001988:	69bb      	ldr	r3, [r7, #24]
    /**ADC1 GPIO Configuration
    PB0     ------> ADC1_IN15
    PB12     ------> ADC1_IN11
    */
    GPIO_InitStruct.Pin = Motor_temperature_Pin|Voltage_Pin;
 800198a:	f241 0301 	movw	r3, #4097	; 0x1001
 800198e:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001990:	2303      	movs	r3, #3
 8001992:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001994:	2300      	movs	r3, #0
 8001996:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001998:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800199c:	4619      	mov	r1, r3
 800199e:	4833      	ldr	r0, [pc, #204]	; (8001a6c <HAL_ADC_MspInit+0x174>)
 80019a0:	f003 f966 	bl	8004c70 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 80019a4:	e05a      	b.n	8001a5c <HAL_ADC_MspInit+0x164>
  else if(hadc->Instance==ADC2)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	4a31      	ldr	r2, [pc, #196]	; (8001a70 <HAL_ADC_MspInit+0x178>)
 80019ac:	4293      	cmp	r3, r2
 80019ae:	d155      	bne.n	8001a5c <HAL_ADC_MspInit+0x164>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80019b0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80019b4:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80019b6:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80019ba:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80019bc:	f107 0320 	add.w	r3, r7, #32
 80019c0:	4618      	mov	r0, r3
 80019c2:	f004 f9f9 	bl	8005db8 <HAL_RCCEx_PeriphCLKConfig>
 80019c6:	4603      	mov	r3, r0
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d001      	beq.n	80019d0 <HAL_ADC_MspInit+0xd8>
      Error_Handler();
 80019cc:	f7ff ff6a 	bl	80018a4 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 80019d0:	4b24      	ldr	r3, [pc, #144]	; (8001a64 <HAL_ADC_MspInit+0x16c>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	3301      	adds	r3, #1
 80019d6:	4a23      	ldr	r2, [pc, #140]	; (8001a64 <HAL_ADC_MspInit+0x16c>)
 80019d8:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80019da:	4b22      	ldr	r3, [pc, #136]	; (8001a64 <HAL_ADC_MspInit+0x16c>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	2b01      	cmp	r3, #1
 80019e0:	d10b      	bne.n	80019fa <HAL_ADC_MspInit+0x102>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80019e2:	4b21      	ldr	r3, [pc, #132]	; (8001a68 <HAL_ADC_MspInit+0x170>)
 80019e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019e6:	4a20      	ldr	r2, [pc, #128]	; (8001a68 <HAL_ADC_MspInit+0x170>)
 80019e8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80019ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80019ee:	4b1e      	ldr	r3, [pc, #120]	; (8001a68 <HAL_ADC_MspInit+0x170>)
 80019f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019f2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80019f6:	617b      	str	r3, [r7, #20]
 80019f8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019fa:	4b1b      	ldr	r3, [pc, #108]	; (8001a68 <HAL_ADC_MspInit+0x170>)
 80019fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019fe:	4a1a      	ldr	r2, [pc, #104]	; (8001a68 <HAL_ADC_MspInit+0x170>)
 8001a00:	f043 0301 	orr.w	r3, r3, #1
 8001a04:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a06:	4b18      	ldr	r3, [pc, #96]	; (8001a68 <HAL_ADC_MspInit+0x170>)
 8001a08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a0a:	f003 0301 	and.w	r3, r3, #1
 8001a0e:	613b      	str	r3, [r7, #16]
 8001a10:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a12:	4b15      	ldr	r3, [pc, #84]	; (8001a68 <HAL_ADC_MspInit+0x170>)
 8001a14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a16:	4a14      	ldr	r2, [pc, #80]	; (8001a68 <HAL_ADC_MspInit+0x170>)
 8001a18:	f043 0302 	orr.w	r3, r3, #2
 8001a1c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a1e:	4b12      	ldr	r3, [pc, #72]	; (8001a68 <HAL_ADC_MspInit+0x170>)
 8001a20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a22:	f003 0302 	and.w	r3, r3, #2
 8001a26:	60fb      	str	r3, [r7, #12]
 8001a28:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = current_Pin;
 8001a2a:	2380      	movs	r3, #128	; 0x80
 8001a2c:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a2e:	2303      	movs	r3, #3
 8001a30:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a32:	2300      	movs	r3, #0
 8001a34:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(current_GPIO_Port, &GPIO_InitStruct);
 8001a36:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001a3a:	4619      	mov	r1, r3
 8001a3c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a40:	f003 f916 	bl	8004c70 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = FET_thermistor_Pin;
 8001a44:	2304      	movs	r3, #4
 8001a46:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a48:	2303      	movs	r3, #3
 8001a4a:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(FET_thermistor_GPIO_Port, &GPIO_InitStruct);
 8001a50:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001a54:	4619      	mov	r1, r3
 8001a56:	4805      	ldr	r0, [pc, #20]	; (8001a6c <HAL_ADC_MspInit+0x174>)
 8001a58:	f003 f90a 	bl	8004c70 <HAL_GPIO_Init>
}
 8001a5c:	bf00      	nop
 8001a5e:	3778      	adds	r7, #120	; 0x78
 8001a60:	46bd      	mov	sp, r7
 8001a62:	bd80      	pop	{r7, pc}
 8001a64:	20000498 	.word	0x20000498
 8001a68:	40021000 	.word	0x40021000
 8001a6c:	48000400 	.word	0x48000400
 8001a70:	50000100 	.word	0x50000100

08001a74 <HAL_COMP_MspInit>:
* This function configures the hardware resources used in this example
* @param hcomp: COMP handle pointer
* @retval None
*/
void HAL_COMP_MspInit(COMP_HandleTypeDef* hcomp)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b088      	sub	sp, #32
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a7c:	f107 030c 	add.w	r3, r7, #12
 8001a80:	2200      	movs	r2, #0
 8001a82:	601a      	str	r2, [r3, #0]
 8001a84:	605a      	str	r2, [r3, #4]
 8001a86:	609a      	str	r2, [r3, #8]
 8001a88:	60da      	str	r2, [r3, #12]
 8001a8a:	611a      	str	r2, [r3, #16]
  if(hcomp->Instance==COMP1)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	4a0f      	ldr	r2, [pc, #60]	; (8001ad0 <HAL_COMP_MspInit+0x5c>)
 8001a92:	4293      	cmp	r3, r2
 8001a94:	d117      	bne.n	8001ac6 <HAL_COMP_MspInit+0x52>
  {
  /* USER CODE BEGIN COMP1_MspInit 0 */

  /* USER CODE END COMP1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a96:	4b0f      	ldr	r3, [pc, #60]	; (8001ad4 <HAL_COMP_MspInit+0x60>)
 8001a98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a9a:	4a0e      	ldr	r2, [pc, #56]	; (8001ad4 <HAL_COMP_MspInit+0x60>)
 8001a9c:	f043 0302 	orr.w	r3, r3, #2
 8001aa0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001aa2:	4b0c      	ldr	r3, [pc, #48]	; (8001ad4 <HAL_COMP_MspInit+0x60>)
 8001aa4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001aa6:	f003 0302 	and.w	r3, r3, #2
 8001aaa:	60bb      	str	r3, [r7, #8]
 8001aac:	68bb      	ldr	r3, [r7, #8]
    /**COMP1 GPIO Configuration
    PB1     ------> COMP1_INP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001aae:	2302      	movs	r3, #2
 8001ab0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001ab2:	2303      	movs	r3, #3
 8001ab4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001aba:	f107 030c 	add.w	r3, r7, #12
 8001abe:	4619      	mov	r1, r3
 8001ac0:	4805      	ldr	r0, [pc, #20]	; (8001ad8 <HAL_COMP_MspInit+0x64>)
 8001ac2:	f003 f8d5 	bl	8004c70 <HAL_GPIO_Init>
  /* USER CODE BEGIN COMP1_MspInit 1 */

  /* USER CODE END COMP1_MspInit 1 */
  }

}
 8001ac6:	bf00      	nop
 8001ac8:	3720      	adds	r7, #32
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bd80      	pop	{r7, pc}
 8001ace:	bf00      	nop
 8001ad0:	40010200 	.word	0x40010200
 8001ad4:	40021000 	.word	0x40021000
 8001ad8:	48000400 	.word	0x48000400

08001adc <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001adc:	b480      	push	{r7}
 8001ade:	b085      	sub	sp, #20
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
  if(hdac->Instance==DAC3)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	4a0a      	ldr	r2, [pc, #40]	; (8001b14 <HAL_DAC_MspInit+0x38>)
 8001aea:	4293      	cmp	r3, r2
 8001aec:	d10b      	bne.n	8001b06 <HAL_DAC_MspInit+0x2a>
  {
  /* USER CODE BEGIN DAC3_MspInit 0 */

  /* USER CODE END DAC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC3_CLK_ENABLE();
 8001aee:	4b0a      	ldr	r3, [pc, #40]	; (8001b18 <HAL_DAC_MspInit+0x3c>)
 8001af0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001af2:	4a09      	ldr	r2, [pc, #36]	; (8001b18 <HAL_DAC_MspInit+0x3c>)
 8001af4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001af8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001afa:	4b07      	ldr	r3, [pc, #28]	; (8001b18 <HAL_DAC_MspInit+0x3c>)
 8001afc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001afe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001b02:	60fb      	str	r3, [r7, #12]
 8001b04:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN DAC3_MspInit 1 */

  /* USER CODE END DAC3_MspInit 1 */
  }

}
 8001b06:	bf00      	nop
 8001b08:	3714      	adds	r7, #20
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b10:	4770      	bx	lr
 8001b12:	bf00      	nop
 8001b14:	50001000 	.word	0x50001000
 8001b18:	40021000 	.word	0x40021000

08001b1c <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b09a      	sub	sp, #104	; 0x68
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b24:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001b28:	2200      	movs	r2, #0
 8001b2a:	601a      	str	r2, [r3, #0]
 8001b2c:	605a      	str	r2, [r3, #4]
 8001b2e:	609a      	str	r2, [r3, #8]
 8001b30:	60da      	str	r2, [r3, #12]
 8001b32:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001b34:	f107 0310 	add.w	r3, r7, #16
 8001b38:	2244      	movs	r2, #68	; 0x44
 8001b3a:	2100      	movs	r1, #0
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	f007 fb7b 	bl	8009238 <memset>
  if(hfdcan->Instance==FDCAN1)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	4a24      	ldr	r2, [pc, #144]	; (8001bd8 <HAL_FDCAN_MspInit+0xbc>)
 8001b48:	4293      	cmp	r3, r2
 8001b4a:	d141      	bne.n	8001bd0 <HAL_FDCAN_MspInit+0xb4>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8001b4c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b50:	613b      	str	r3, [r7, #16]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8001b52:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001b56:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b58:	f107 0310 	add.w	r3, r7, #16
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	f004 f92b 	bl	8005db8 <HAL_RCCEx_PeriphCLKConfig>
 8001b62:	4603      	mov	r3, r0
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d001      	beq.n	8001b6c <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8001b68:	f7ff fe9c 	bl	80018a4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8001b6c:	4b1b      	ldr	r3, [pc, #108]	; (8001bdc <HAL_FDCAN_MspInit+0xc0>)
 8001b6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b70:	4a1a      	ldr	r2, [pc, #104]	; (8001bdc <HAL_FDCAN_MspInit+0xc0>)
 8001b72:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001b76:	6593      	str	r3, [r2, #88]	; 0x58
 8001b78:	4b18      	ldr	r3, [pc, #96]	; (8001bdc <HAL_FDCAN_MspInit+0xc0>)
 8001b7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b80:	60fb      	str	r3, [r7, #12]
 8001b82:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b84:	4b15      	ldr	r3, [pc, #84]	; (8001bdc <HAL_FDCAN_MspInit+0xc0>)
 8001b86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b88:	4a14      	ldr	r2, [pc, #80]	; (8001bdc <HAL_FDCAN_MspInit+0xc0>)
 8001b8a:	f043 0301 	orr.w	r3, r3, #1
 8001b8e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b90:	4b12      	ldr	r3, [pc, #72]	; (8001bdc <HAL_FDCAN_MspInit+0xc0>)
 8001b92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b94:	f003 0301 	and.w	r3, r3, #1
 8001b98:	60bb      	str	r3, [r7, #8]
 8001b9a:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001b9c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001ba0:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ba2:	2302      	movs	r3, #2
 8001ba4:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001baa:	2300      	movs	r3, #0
 8001bac:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8001bae:	2309      	movs	r3, #9
 8001bb0:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bb2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001bb6:	4619      	mov	r1, r3
 8001bb8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001bbc:	f003 f858 	bl	8004c70 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	2100      	movs	r1, #0
 8001bc4:	2015      	movs	r0, #21
 8001bc6:	f002 faf6 	bl	80041b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8001bca:	2015      	movs	r0, #21
 8001bcc:	f002 fb0d 	bl	80041ea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }

}
 8001bd0:	bf00      	nop
 8001bd2:	3768      	adds	r7, #104	; 0x68
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bd80      	pop	{r7, pc}
 8001bd8:	40006400 	.word	0x40006400
 8001bdc:	40021000 	.word	0x40021000

08001be0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b09c      	sub	sp, #112	; 0x70
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001be8:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001bec:	2200      	movs	r2, #0
 8001bee:	601a      	str	r2, [r3, #0]
 8001bf0:	605a      	str	r2, [r3, #4]
 8001bf2:	609a      	str	r2, [r3, #8]
 8001bf4:	60da      	str	r2, [r3, #12]
 8001bf6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001bf8:	f107 0318 	add.w	r3, r7, #24
 8001bfc:	2244      	movs	r2, #68	; 0x44
 8001bfe:	2100      	movs	r1, #0
 8001c00:	4618      	mov	r0, r3
 8001c02:	f007 fb19 	bl	8009238 <memset>
  if(hi2c->Instance==I2C1)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	4a2d      	ldr	r2, [pc, #180]	; (8001cc0 <HAL_I2C_MspInit+0xe0>)
 8001c0c:	4293      	cmp	r3, r2
 8001c0e:	d153      	bne.n	8001cb8 <HAL_I2C_MspInit+0xd8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001c10:	2340      	movs	r3, #64	; 0x40
 8001c12:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001c14:	2300      	movs	r3, #0
 8001c16:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001c18:	f107 0318 	add.w	r3, r7, #24
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	f004 f8cb 	bl	8005db8 <HAL_RCCEx_PeriphCLKConfig>
 8001c22:	4603      	mov	r3, r0
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d001      	beq.n	8001c2c <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001c28:	f7ff fe3c 	bl	80018a4 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c2c:	4b25      	ldr	r3, [pc, #148]	; (8001cc4 <HAL_I2C_MspInit+0xe4>)
 8001c2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c30:	4a24      	ldr	r2, [pc, #144]	; (8001cc4 <HAL_I2C_MspInit+0xe4>)
 8001c32:	f043 0301 	orr.w	r3, r3, #1
 8001c36:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c38:	4b22      	ldr	r3, [pc, #136]	; (8001cc4 <HAL_I2C_MspInit+0xe4>)
 8001c3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c3c:	f003 0301 	and.w	r3, r3, #1
 8001c40:	617b      	str	r3, [r7, #20]
 8001c42:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c44:	4b1f      	ldr	r3, [pc, #124]	; (8001cc4 <HAL_I2C_MspInit+0xe4>)
 8001c46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c48:	4a1e      	ldr	r2, [pc, #120]	; (8001cc4 <HAL_I2C_MspInit+0xe4>)
 8001c4a:	f043 0302 	orr.w	r3, r3, #2
 8001c4e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c50:	4b1c      	ldr	r3, [pc, #112]	; (8001cc4 <HAL_I2C_MspInit+0xe4>)
 8001c52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c54:	f003 0302 	and.w	r3, r3, #2
 8001c58:	613b      	str	r3, [r7, #16]
 8001c5a:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001c5c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001c60:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c62:	2312      	movs	r3, #18
 8001c64:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c66:	2300      	movs	r3, #0
 8001c68:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001c6e:	2304      	movs	r3, #4
 8001c70:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c72:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001c76:	4619      	mov	r1, r3
 8001c78:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c7c:	f002 fff8 	bl	8004c70 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001c80:	2380      	movs	r3, #128	; 0x80
 8001c82:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c84:	2312      	movs	r3, #18
 8001c86:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c88:	2300      	movs	r3, #0
 8001c8a:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001c90:	2304      	movs	r3, #4
 8001c92:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c94:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001c98:	4619      	mov	r1, r3
 8001c9a:	480b      	ldr	r0, [pc, #44]	; (8001cc8 <HAL_I2C_MspInit+0xe8>)
 8001c9c:	f002 ffe8 	bl	8004c70 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001ca0:	4b08      	ldr	r3, [pc, #32]	; (8001cc4 <HAL_I2C_MspInit+0xe4>)
 8001ca2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ca4:	4a07      	ldr	r2, [pc, #28]	; (8001cc4 <HAL_I2C_MspInit+0xe4>)
 8001ca6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001caa:	6593      	str	r3, [r2, #88]	; 0x58
 8001cac:	4b05      	ldr	r3, [pc, #20]	; (8001cc4 <HAL_I2C_MspInit+0xe4>)
 8001cae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cb0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001cb4:	60fb      	str	r3, [r7, #12]
 8001cb6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001cb8:	bf00      	nop
 8001cba:	3770      	adds	r7, #112	; 0x70
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	bd80      	pop	{r7, pc}
 8001cc0:	40005400 	.word	0x40005400
 8001cc4:	40021000 	.word	0x40021000
 8001cc8:	48000400 	.word	0x48000400

08001ccc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b08a      	sub	sp, #40	; 0x28
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cd4:	f107 0314 	add.w	r3, r7, #20
 8001cd8:	2200      	movs	r2, #0
 8001cda:	601a      	str	r2, [r3, #0]
 8001cdc:	605a      	str	r2, [r3, #4]
 8001cde:	609a      	str	r2, [r3, #8]
 8001ce0:	60da      	str	r2, [r3, #12]
 8001ce2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	4a17      	ldr	r2, [pc, #92]	; (8001d48 <HAL_SPI_MspInit+0x7c>)
 8001cea:	4293      	cmp	r3, r2
 8001cec:	d127      	bne.n	8001d3e <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001cee:	4b17      	ldr	r3, [pc, #92]	; (8001d4c <HAL_SPI_MspInit+0x80>)
 8001cf0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001cf2:	4a16      	ldr	r2, [pc, #88]	; (8001d4c <HAL_SPI_MspInit+0x80>)
 8001cf4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001cf8:	6613      	str	r3, [r2, #96]	; 0x60
 8001cfa:	4b14      	ldr	r3, [pc, #80]	; (8001d4c <HAL_SPI_MspInit+0x80>)
 8001cfc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001cfe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d02:	613b      	str	r3, [r7, #16]
 8001d04:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d06:	4b11      	ldr	r3, [pc, #68]	; (8001d4c <HAL_SPI_MspInit+0x80>)
 8001d08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d0a:	4a10      	ldr	r2, [pc, #64]	; (8001d4c <HAL_SPI_MspInit+0x80>)
 8001d0c:	f043 0302 	orr.w	r3, r3, #2
 8001d10:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d12:	4b0e      	ldr	r3, [pc, #56]	; (8001d4c <HAL_SPI_MspInit+0x80>)
 8001d14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d16:	f003 0302 	and.w	r3, r3, #2
 8001d1a:	60fb      	str	r3, [r7, #12]
 8001d1c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8001d1e:	2338      	movs	r3, #56	; 0x38
 8001d20:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d22:	2302      	movs	r3, #2
 8001d24:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d26:	2300      	movs	r3, #0
 8001d28:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001d2e:	2305      	movs	r3, #5
 8001d30:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d32:	f107 0314 	add.w	r3, r7, #20
 8001d36:	4619      	mov	r1, r3
 8001d38:	4805      	ldr	r0, [pc, #20]	; (8001d50 <HAL_SPI_MspInit+0x84>)
 8001d3a:	f002 ff99 	bl	8004c70 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001d3e:	bf00      	nop
 8001d40:	3728      	adds	r7, #40	; 0x28
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bd80      	pop	{r7, pc}
 8001d46:	bf00      	nop
 8001d48:	40013000 	.word	0x40013000
 8001d4c:	40021000 	.word	0x40021000
 8001d50:	48000400 	.word	0x48000400

08001d54 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b086      	sub	sp, #24
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	4a23      	ldr	r2, [pc, #140]	; (8001df0 <HAL_TIM_Base_MspInit+0x9c>)
 8001d62:	4293      	cmp	r3, r2
 8001d64:	d114      	bne.n	8001d90 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001d66:	4b23      	ldr	r3, [pc, #140]	; (8001df4 <HAL_TIM_Base_MspInit+0xa0>)
 8001d68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d6a:	4a22      	ldr	r2, [pc, #136]	; (8001df4 <HAL_TIM_Base_MspInit+0xa0>)
 8001d6c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001d70:	6613      	str	r3, [r2, #96]	; 0x60
 8001d72:	4b20      	ldr	r3, [pc, #128]	; (8001df4 <HAL_TIM_Base_MspInit+0xa0>)
 8001d74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d76:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001d7a:	617b      	str	r3, [r7, #20]
 8001d7c:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8001d7e:	2200      	movs	r2, #0
 8001d80:	2100      	movs	r1, #0
 8001d82:	2019      	movs	r0, #25
 8001d84:	f002 fa17 	bl	80041b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001d88:	2019      	movs	r0, #25
 8001d8a:	f002 fa2e 	bl	80041ea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 8001d8e:	e02a      	b.n	8001de6 <HAL_TIM_Base_MspInit+0x92>
  else if(htim_base->Instance==TIM7)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	4a18      	ldr	r2, [pc, #96]	; (8001df8 <HAL_TIM_Base_MspInit+0xa4>)
 8001d96:	4293      	cmp	r3, r2
 8001d98:	d114      	bne.n	8001dc4 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8001d9a:	4b16      	ldr	r3, [pc, #88]	; (8001df4 <HAL_TIM_Base_MspInit+0xa0>)
 8001d9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d9e:	4a15      	ldr	r2, [pc, #84]	; (8001df4 <HAL_TIM_Base_MspInit+0xa0>)
 8001da0:	f043 0320 	orr.w	r3, r3, #32
 8001da4:	6593      	str	r3, [r2, #88]	; 0x58
 8001da6:	4b13      	ldr	r3, [pc, #76]	; (8001df4 <HAL_TIM_Base_MspInit+0xa0>)
 8001da8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001daa:	f003 0320 	and.w	r3, r3, #32
 8001dae:	613b      	str	r3, [r7, #16]
 8001db0:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8001db2:	2200      	movs	r2, #0
 8001db4:	2100      	movs	r1, #0
 8001db6:	2037      	movs	r0, #55	; 0x37
 8001db8:	f002 f9fd 	bl	80041b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001dbc:	2037      	movs	r0, #55	; 0x37
 8001dbe:	f002 fa14 	bl	80041ea <HAL_NVIC_EnableIRQ>
}
 8001dc2:	e010      	b.n	8001de6 <HAL_TIM_Base_MspInit+0x92>
  else if(htim_base->Instance==TIM17)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	4a0c      	ldr	r2, [pc, #48]	; (8001dfc <HAL_TIM_Base_MspInit+0xa8>)
 8001dca:	4293      	cmp	r3, r2
 8001dcc:	d10b      	bne.n	8001de6 <HAL_TIM_Base_MspInit+0x92>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8001dce:	4b09      	ldr	r3, [pc, #36]	; (8001df4 <HAL_TIM_Base_MspInit+0xa0>)
 8001dd0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001dd2:	4a08      	ldr	r2, [pc, #32]	; (8001df4 <HAL_TIM_Base_MspInit+0xa0>)
 8001dd4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001dd8:	6613      	str	r3, [r2, #96]	; 0x60
 8001dda:	4b06      	ldr	r3, [pc, #24]	; (8001df4 <HAL_TIM_Base_MspInit+0xa0>)
 8001ddc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001dde:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001de2:	60fb      	str	r3, [r7, #12]
 8001de4:	68fb      	ldr	r3, [r7, #12]
}
 8001de6:	bf00      	nop
 8001de8:	3718      	adds	r7, #24
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bd80      	pop	{r7, pc}
 8001dee:	bf00      	nop
 8001df0:	40012c00 	.word	0x40012c00
 8001df4:	40021000 	.word	0x40021000
 8001df8:	40001400 	.word	0x40001400
 8001dfc:	40014800 	.word	0x40014800

08001e00 <HAL_TIMEx_HallSensor_MspInit>:
* This function configures the hardware resources used in this example
* @param htimex_hallsensor: TIMEx_HallSensor handle pointer
* @retval None
*/
void HAL_TIMEx_HallSensor_MspInit(TIM_HandleTypeDef* htimex_hallsensor)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b08a      	sub	sp, #40	; 0x28
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e08:	f107 0314 	add.w	r3, r7, #20
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	601a      	str	r2, [r3, #0]
 8001e10:	605a      	str	r2, [r3, #4]
 8001e12:	609a      	str	r2, [r3, #8]
 8001e14:	60da      	str	r2, [r3, #12]
 8001e16:	611a      	str	r2, [r3, #16]
  if(htimex_hallsensor->Instance==TIM2)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e20:	d128      	bne.n	8001e74 <HAL_TIMEx_HallSensor_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001e22:	4b16      	ldr	r3, [pc, #88]	; (8001e7c <HAL_TIMEx_HallSensor_MspInit+0x7c>)
 8001e24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e26:	4a15      	ldr	r2, [pc, #84]	; (8001e7c <HAL_TIMEx_HallSensor_MspInit+0x7c>)
 8001e28:	f043 0301 	orr.w	r3, r3, #1
 8001e2c:	6593      	str	r3, [r2, #88]	; 0x58
 8001e2e:	4b13      	ldr	r3, [pc, #76]	; (8001e7c <HAL_TIMEx_HallSensor_MspInit+0x7c>)
 8001e30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e32:	f003 0301 	and.w	r3, r3, #1
 8001e36:	613b      	str	r3, [r7, #16]
 8001e38:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e3a:	4b10      	ldr	r3, [pc, #64]	; (8001e7c <HAL_TIMEx_HallSensor_MspInit+0x7c>)
 8001e3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e3e:	4a0f      	ldr	r2, [pc, #60]	; (8001e7c <HAL_TIMEx_HallSensor_MspInit+0x7c>)
 8001e40:	f043 0301 	orr.w	r3, r3, #1
 8001e44:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e46:	4b0d      	ldr	r3, [pc, #52]	; (8001e7c <HAL_TIMEx_HallSensor_MspInit+0x7c>)
 8001e48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e4a:	f003 0301 	and.w	r3, r3, #1
 8001e4e:	60fb      	str	r3, [r7, #12]
 8001e50:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    PA2     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8001e52:	2307      	movs	r3, #7
 8001e54:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e56:	2302      	movs	r3, #2
 8001e58:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e5e:	2300      	movs	r3, #0
 8001e60:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001e62:	2301      	movs	r3, #1
 8001e64:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e66:	f107 0314 	add.w	r3, r7, #20
 8001e6a:	4619      	mov	r1, r3
 8001e6c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e70:	f002 fefe 	bl	8004c70 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001e74:	bf00      	nop
 8001e76:	3728      	adds	r7, #40	; 0x28
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	bd80      	pop	{r7, pc}
 8001e7c:	40021000 	.word	0x40021000

08001e80 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b08a      	sub	sp, #40	; 0x28
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e88:	f107 0314 	add.w	r3, r7, #20
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	601a      	str	r2, [r3, #0]
 8001e90:	605a      	str	r2, [r3, #4]
 8001e92:	609a      	str	r2, [r3, #8]
 8001e94:	60da      	str	r2, [r3, #12]
 8001e96:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	4a3a      	ldr	r2, [pc, #232]	; (8001f88 <HAL_TIM_MspPostInit+0x108>)
 8001e9e:	4293      	cmp	r3, r2
 8001ea0:	d14c      	bne.n	8001f3c <HAL_TIM_MspPostInit+0xbc>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ea2:	4b3a      	ldr	r3, [pc, #232]	; (8001f8c <HAL_TIM_MspPostInit+0x10c>)
 8001ea4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ea6:	4a39      	ldr	r2, [pc, #228]	; (8001f8c <HAL_TIM_MspPostInit+0x10c>)
 8001ea8:	f043 0302 	orr.w	r3, r3, #2
 8001eac:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001eae:	4b37      	ldr	r3, [pc, #220]	; (8001f8c <HAL_TIM_MspPostInit+0x10c>)
 8001eb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001eb2:	f003 0302 	and.w	r3, r3, #2
 8001eb6:	613b      	str	r3, [r7, #16]
 8001eb8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001eba:	4b34      	ldr	r3, [pc, #208]	; (8001f8c <HAL_TIM_MspPostInit+0x10c>)
 8001ebc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ebe:	4a33      	ldr	r2, [pc, #204]	; (8001f8c <HAL_TIM_MspPostInit+0x10c>)
 8001ec0:	f043 0301 	orr.w	r3, r3, #1
 8001ec4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ec6:	4b31      	ldr	r3, [pc, #196]	; (8001f8c <HAL_TIM_MspPostInit+0x10c>)
 8001ec8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001eca:	f003 0301 	and.w	r3, r3, #1
 8001ece:	60fb      	str	r3, [r7, #12]
 8001ed0:	68fb      	ldr	r3, [r7, #12]
    PB15     ------> TIM1_CH3N
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8001ed2:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8001ed6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ed8:	2302      	movs	r3, #2
 8001eda:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001edc:	2300      	movs	r3, #0
 8001ede:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001ee4:	2306      	movs	r3, #6
 8001ee6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ee8:	f107 0314 	add.w	r3, r7, #20
 8001eec:	4619      	mov	r1, r3
 8001eee:	4828      	ldr	r0, [pc, #160]	; (8001f90 <HAL_TIM_MspPostInit+0x110>)
 8001ef0:	f002 febe 	bl	8004c70 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001ef4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001ef8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001efa:	2302      	movs	r3, #2
 8001efc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001efe:	2300      	movs	r3, #0
 8001f00:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f02:	2300      	movs	r3, #0
 8001f04:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 8001f06:	2304      	movs	r3, #4
 8001f08:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f0a:	f107 0314 	add.w	r3, r7, #20
 8001f0e:	4619      	mov	r1, r3
 8001f10:	481f      	ldr	r0, [pc, #124]	; (8001f90 <HAL_TIM_MspPostInit+0x110>)
 8001f12:	f002 fead 	bl	8004c70 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8001f16:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8001f1a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f1c:	2302      	movs	r3, #2
 8001f1e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f20:	2300      	movs	r3, #0
 8001f22:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f24:	2300      	movs	r3, #0
 8001f26:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001f28:	2306      	movs	r3, #6
 8001f2a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f2c:	f107 0314 	add.w	r3, r7, #20
 8001f30:	4619      	mov	r1, r3
 8001f32:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f36:	f002 fe9b 	bl	8004c70 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM17_MspPostInit 1 */

  /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 8001f3a:	e021      	b.n	8001f80 <HAL_TIM_MspPostInit+0x100>
  else if(htim->Instance==TIM17)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	4a14      	ldr	r2, [pc, #80]	; (8001f94 <HAL_TIM_MspPostInit+0x114>)
 8001f42:	4293      	cmp	r3, r2
 8001f44:	d11c      	bne.n	8001f80 <HAL_TIM_MspPostInit+0x100>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f46:	4b11      	ldr	r3, [pc, #68]	; (8001f8c <HAL_TIM_MspPostInit+0x10c>)
 8001f48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f4a:	4a10      	ldr	r2, [pc, #64]	; (8001f8c <HAL_TIM_MspPostInit+0x10c>)
 8001f4c:	f043 0302 	orr.w	r3, r3, #2
 8001f50:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f52:	4b0e      	ldr	r3, [pc, #56]	; (8001f8c <HAL_TIM_MspPostInit+0x10c>)
 8001f54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f56:	f003 0302 	and.w	r3, r3, #2
 8001f5a:	60bb      	str	r3, [r7, #8]
 8001f5c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = heartbeat_LED_Pin;
 8001f5e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001f62:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f64:	2302      	movs	r3, #2
 8001f66:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f68:	2300      	movs	r3, #0
 8001f6a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM17;
 8001f70:	2301      	movs	r3, #1
 8001f72:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(heartbeat_LED_GPIO_Port, &GPIO_InitStruct);
 8001f74:	f107 0314 	add.w	r3, r7, #20
 8001f78:	4619      	mov	r1, r3
 8001f7a:	4805      	ldr	r0, [pc, #20]	; (8001f90 <HAL_TIM_MspPostInit+0x110>)
 8001f7c:	f002 fe78 	bl	8004c70 <HAL_GPIO_Init>
}
 8001f80:	bf00      	nop
 8001f82:	3728      	adds	r7, #40	; 0x28
 8001f84:	46bd      	mov	sp, r7
 8001f86:	bd80      	pop	{r7, pc}
 8001f88:	40012c00 	.word	0x40012c00
 8001f8c:	40021000 	.word	0x40021000
 8001f90:	48000400 	.word	0x48000400
 8001f94:	40014800 	.word	0x40014800

08001f98 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b09a      	sub	sp, #104	; 0x68
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fa0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	601a      	str	r2, [r3, #0]
 8001fa8:	605a      	str	r2, [r3, #4]
 8001faa:	609a      	str	r2, [r3, #8]
 8001fac:	60da      	str	r2, [r3, #12]
 8001fae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001fb0:	f107 0310 	add.w	r3, r7, #16
 8001fb4:	2244      	movs	r2, #68	; 0x44
 8001fb6:	2100      	movs	r1, #0
 8001fb8:	4618      	mov	r0, r3
 8001fba:	f007 f93d 	bl	8009238 <memset>
  if(huart->Instance==USART3)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	4a1f      	ldr	r2, [pc, #124]	; (8002040 <HAL_UART_MspInit+0xa8>)
 8001fc4:	4293      	cmp	r3, r2
 8001fc6:	d136      	bne.n	8002036 <HAL_UART_MspInit+0x9e>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001fc8:	2304      	movs	r3, #4
 8001fca:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001fcc:	2300      	movs	r3, #0
 8001fce:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001fd0:	f107 0310 	add.w	r3, r7, #16
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	f003 feef 	bl	8005db8 <HAL_RCCEx_PeriphCLKConfig>
 8001fda:	4603      	mov	r3, r0
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d001      	beq.n	8001fe4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001fe0:	f7ff fc60 	bl	80018a4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001fe4:	4b17      	ldr	r3, [pc, #92]	; (8002044 <HAL_UART_MspInit+0xac>)
 8001fe6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fe8:	4a16      	ldr	r2, [pc, #88]	; (8002044 <HAL_UART_MspInit+0xac>)
 8001fea:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001fee:	6593      	str	r3, [r2, #88]	; 0x58
 8001ff0:	4b14      	ldr	r3, [pc, #80]	; (8002044 <HAL_UART_MspInit+0xac>)
 8001ff2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ff4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001ff8:	60fb      	str	r3, [r7, #12]
 8001ffa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ffc:	4b11      	ldr	r3, [pc, #68]	; (8002044 <HAL_UART_MspInit+0xac>)
 8001ffe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002000:	4a10      	ldr	r2, [pc, #64]	; (8002044 <HAL_UART_MspInit+0xac>)
 8002002:	f043 0302 	orr.w	r3, r3, #2
 8002006:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002008:	4b0e      	ldr	r3, [pc, #56]	; (8002044 <HAL_UART_MspInit+0xac>)
 800200a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800200c:	f003 0302 	and.w	r3, r3, #2
 8002010:	60bb      	str	r3, [r7, #8]
 8002012:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002014:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002018:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800201a:	2302      	movs	r3, #2
 800201c:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800201e:	2300      	movs	r3, #0
 8002020:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002022:	2300      	movs	r3, #0
 8002024:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002026:	2307      	movs	r3, #7
 8002028:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800202a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800202e:	4619      	mov	r1, r3
 8002030:	4805      	ldr	r0, [pc, #20]	; (8002048 <HAL_UART_MspInit+0xb0>)
 8002032:	f002 fe1d 	bl	8004c70 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002036:	bf00      	nop
 8002038:	3768      	adds	r7, #104	; 0x68
 800203a:	46bd      	mov	sp, r7
 800203c:	bd80      	pop	{r7, pc}
 800203e:	bf00      	nop
 8002040:	40004800 	.word	0x40004800
 8002044:	40021000 	.word	0x40021000
 8002048:	48000400 	.word	0x48000400

0800204c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800204c:	b480      	push	{r7}
 800204e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002050:	e7fe      	b.n	8002050 <NMI_Handler+0x4>

08002052 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002052:	b480      	push	{r7}
 8002054:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002056:	e7fe      	b.n	8002056 <HardFault_Handler+0x4>

08002058 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002058:	b480      	push	{r7}
 800205a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800205c:	e7fe      	b.n	800205c <MemManage_Handler+0x4>

0800205e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800205e:	b480      	push	{r7}
 8002060:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002062:	e7fe      	b.n	8002062 <BusFault_Handler+0x4>

08002064 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002064:	b480      	push	{r7}
 8002066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002068:	e7fe      	b.n	8002068 <UsageFault_Handler+0x4>

0800206a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800206a:	b480      	push	{r7}
 800206c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800206e:	bf00      	nop
 8002070:	46bd      	mov	sp, r7
 8002072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002076:	4770      	bx	lr

08002078 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002078:	b480      	push	{r7}
 800207a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800207c:	bf00      	nop
 800207e:	46bd      	mov	sp, r7
 8002080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002084:	4770      	bx	lr

08002086 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002086:	b480      	push	{r7}
 8002088:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800208a:	bf00      	nop
 800208c:	46bd      	mov	sp, r7
 800208e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002092:	4770      	bx	lr

08002094 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002098:	f000 fdd0 	bl	8002c3c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800209c:	bf00      	nop
 800209e:	bd80      	pop	{r7, pc}

080020a0 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 80020a4:	4802      	ldr	r0, [pc, #8]	; (80020b0 <FDCAN1_IT0_IRQHandler+0x10>)
 80020a6:	f002 fbdf 	bl	8004868 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 80020aa:	bf00      	nop
 80020ac:	bd80      	pop	{r7, pc}
 80020ae:	bf00      	nop
 80020b0:	20000138 	.word	0x20000138

080020b4 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */
  //HAL_GPIO_TogglePin(GPIOA,DAC_DBG_Pin);
  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80020b8:	4802      	ldr	r0, [pc, #8]	; (80020c4 <TIM1_UP_TIM16_IRQHandler+0x10>)
 80020ba:	f004 feff 	bl	8006ebc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80020be:	bf00      	nop
 80020c0:	bd80      	pop	{r7, pc}
 80020c2:	bf00      	nop
 80020c4:	2000024c 	.word	0x2000024c

080020c8 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80020cc:	4802      	ldr	r0, [pc, #8]	; (80020d8 <TIM7_IRQHandler+0x10>)
 80020ce:	f004 fef5 	bl	8006ebc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80020d2:	bf00      	nop
 80020d4:	bd80      	pop	{r7, pc}
 80020d6:	bf00      	nop
 80020d8:	200002e4 	.word	0x200002e4

080020dc <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80020dc:	b480      	push	{r7}
 80020de:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80020e0:	4b06      	ldr	r3, [pc, #24]	; (80020fc <SystemInit+0x20>)
 80020e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020e6:	4a05      	ldr	r2, [pc, #20]	; (80020fc <SystemInit+0x20>)
 80020e8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80020ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80020f0:	bf00      	nop
 80020f2:	46bd      	mov	sp, r7
 80020f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f8:	4770      	bx	lr
 80020fa:	bf00      	nop
 80020fc:	e000ed00 	.word	0xe000ed00

08002100 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002100:	480d      	ldr	r0, [pc, #52]	; (8002138 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002102:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002104:	480d      	ldr	r0, [pc, #52]	; (800213c <LoopForever+0x6>)
  ldr r1, =_edata
 8002106:	490e      	ldr	r1, [pc, #56]	; (8002140 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002108:	4a0e      	ldr	r2, [pc, #56]	; (8002144 <LoopForever+0xe>)
  movs r3, #0
 800210a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 800210c:	e002      	b.n	8002114 <LoopCopyDataInit>

0800210e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800210e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002110:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002112:	3304      	adds	r3, #4

08002114 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002114:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002116:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002118:	d3f9      	bcc.n	800210e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800211a:	4a0b      	ldr	r2, [pc, #44]	; (8002148 <LoopForever+0x12>)
  ldr r4, =_ebss
 800211c:	4c0b      	ldr	r4, [pc, #44]	; (800214c <LoopForever+0x16>)
  movs r3, #0
 800211e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002120:	e001      	b.n	8002126 <LoopFillZerobss>

08002122 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002122:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002124:	3204      	adds	r2, #4

08002126 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002126:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002128:	d3fb      	bcc.n	8002122 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800212a:	f7ff ffd7 	bl	80020dc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800212e:	f007 f85f 	bl	80091f0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002132:	f7fe fde1 	bl	8000cf8 <main>

08002136 <LoopForever>:

LoopForever:
    b LoopForever
 8002136:	e7fe      	b.n	8002136 <LoopForever>
  ldr   r0, =_estack
 8002138:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 800213c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002140:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8002144:	080092b0 	.word	0x080092b0
  ldr r2, =_sbss
 8002148:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800214c:	200004bc 	.word	0x200004bc

08002150 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002150:	e7fe      	b.n	8002150 <ADC1_2_IRQHandler>
	...

08002154 <AS5047_SPI_Write>:

uint8_t checkReadForError(uint16_t data){
	return (data & 0x4000)>>15; // check if 15th bit is 1.
}

uint8_t AS5047_SPI_Write(uint16_t addressFrame, uint16_t valueFrame) {
 8002154:	b580      	push	{r7, lr}
 8002156:	b086      	sub	sp, #24
 8002158:	af02      	add	r7, sp, #8
 800215a:	4603      	mov	r3, r0
 800215c:	460a      	mov	r2, r1
 800215e:	80fb      	strh	r3, [r7, #6]
 8002160:	4613      	mov	r3, r2
 8002162:	80bb      	strh	r3, [r7, #4]

  //write which address needed to be updated.
  txbuf[0] = (addressFrame) >> 8;
 8002164:	88fb      	ldrh	r3, [r7, #6]
 8002166:	0a1b      	lsrs	r3, r3, #8
 8002168:	b29b      	uxth	r3, r3
 800216a:	b2da      	uxtb	r2, r3
 800216c:	4b34      	ldr	r3, [pc, #208]	; (8002240 <AS5047_SPI_Write+0xec>)
 800216e:	701a      	strb	r2, [r3, #0]
  txbuf[1] = addressFrame & 0xFF;
 8002170:	88fb      	ldrh	r3, [r7, #6]
 8002172:	b2da      	uxtb	r2, r3
 8002174:	4b32      	ldr	r3, [pc, #200]	; (8002240 <AS5047_SPI_Write+0xec>)
 8002176:	705a      	strb	r2, [r3, #1]
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8002178:	2200      	movs	r2, #0
 800217a:	2140      	movs	r1, #64	; 0x40
 800217c:	4831      	ldr	r0, [pc, #196]	; (8002244 <AS5047_SPI_Write+0xf0>)
 800217e:	f002 fef9 	bl	8004f74 <HAL_GPIO_WritePin>
  HAL_SPI_TransmitReceive(&hspi1, (uint8_t*)&txbuf, (uint8_t*)&rxbuf, 2, 100);
 8002182:	2364      	movs	r3, #100	; 0x64
 8002184:	9300      	str	r3, [sp, #0]
 8002186:	2302      	movs	r3, #2
 8002188:	4a2f      	ldr	r2, [pc, #188]	; (8002248 <AS5047_SPI_Write+0xf4>)
 800218a:	492d      	ldr	r1, [pc, #180]	; (8002240 <AS5047_SPI_Write+0xec>)
 800218c:	482f      	ldr	r0, [pc, #188]	; (800224c <AS5047_SPI_Write+0xf8>)
 800218e:	f004 f8ae 	bl	80062ee <HAL_SPI_TransmitReceive>
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 8002192:	2201      	movs	r2, #1
 8002194:	2140      	movs	r1, #64	; 0x40
 8002196:	482b      	ldr	r0, [pc, #172]	; (8002244 <AS5047_SPI_Write+0xf0>)
 8002198:	f002 feec 	bl	8004f74 <HAL_GPIO_WritePin>

  //this is value that will be stored inside the respective register
  txbuf[0] = (valueFrame) >> 8;
 800219c:	88bb      	ldrh	r3, [r7, #4]
 800219e:	0a1b      	lsrs	r3, r3, #8
 80021a0:	b29b      	uxth	r3, r3
 80021a2:	b2da      	uxtb	r2, r3
 80021a4:	4b26      	ldr	r3, [pc, #152]	; (8002240 <AS5047_SPI_Write+0xec>)
 80021a6:	701a      	strb	r2, [r3, #0]
  txbuf[1] = valueFrame & 0xFF;
 80021a8:	88bb      	ldrh	r3, [r7, #4]
 80021aa:	b2da      	uxtb	r2, r3
 80021ac:	4b24      	ldr	r3, [pc, #144]	; (8002240 <AS5047_SPI_Write+0xec>)
 80021ae:	705a      	strb	r2, [r3, #1]
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 80021b0:	2200      	movs	r2, #0
 80021b2:	2140      	movs	r1, #64	; 0x40
 80021b4:	4823      	ldr	r0, [pc, #140]	; (8002244 <AS5047_SPI_Write+0xf0>)
 80021b6:	f002 fedd 	bl	8004f74 <HAL_GPIO_WritePin>
  HAL_SPI_TransmitReceive(&hspi1, (uint8_t*)&txbuf, (uint8_t*)&rxbuf, 2, 100);
 80021ba:	2364      	movs	r3, #100	; 0x64
 80021bc:	9300      	str	r3, [sp, #0]
 80021be:	2302      	movs	r3, #2
 80021c0:	4a21      	ldr	r2, [pc, #132]	; (8002248 <AS5047_SPI_Write+0xf4>)
 80021c2:	491f      	ldr	r1, [pc, #124]	; (8002240 <AS5047_SPI_Write+0xec>)
 80021c4:	4821      	ldr	r0, [pc, #132]	; (800224c <AS5047_SPI_Write+0xf8>)
 80021c6:	f004 f892 	bl	80062ee <HAL_SPI_TransmitReceive>
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 80021ca:	2201      	movs	r2, #1
 80021cc:	2140      	movs	r1, #64	; 0x40
 80021ce:	481d      	ldr	r0, [pc, #116]	; (8002244 <AS5047_SPI_Write+0xf0>)
 80021d0:	f002 fed0 	bl	8004f74 <HAL_GPIO_WritePin>

  //check if data has been written properly, will recieve the written value in the recieve buffer
  txbuf[0] = NOP_FRAME >> 8;
 80021d4:	4b1a      	ldr	r3, [pc, #104]	; (8002240 <AS5047_SPI_Write+0xec>)
 80021d6:	22c0      	movs	r2, #192	; 0xc0
 80021d8:	701a      	strb	r2, [r3, #0]
  txbuf[1] = NOP_FRAME & 0xFF;
 80021da:	4b19      	ldr	r3, [pc, #100]	; (8002240 <AS5047_SPI_Write+0xec>)
 80021dc:	2200      	movs	r2, #0
 80021de:	705a      	strb	r2, [r3, #1]
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 80021e0:	2200      	movs	r2, #0
 80021e2:	2140      	movs	r1, #64	; 0x40
 80021e4:	4817      	ldr	r0, [pc, #92]	; (8002244 <AS5047_SPI_Write+0xf0>)
 80021e6:	f002 fec5 	bl	8004f74 <HAL_GPIO_WritePin>
  HAL_SPI_TransmitReceive(&hspi1, (uint8_t*)&txbuf, (uint8_t*)&rxbuf, 2, 100);
 80021ea:	2364      	movs	r3, #100	; 0x64
 80021ec:	9300      	str	r3, [sp, #0]
 80021ee:	2302      	movs	r3, #2
 80021f0:	4a15      	ldr	r2, [pc, #84]	; (8002248 <AS5047_SPI_Write+0xf4>)
 80021f2:	4913      	ldr	r1, [pc, #76]	; (8002240 <AS5047_SPI_Write+0xec>)
 80021f4:	4815      	ldr	r0, [pc, #84]	; (800224c <AS5047_SPI_Write+0xf8>)
 80021f6:	f004 f87a 	bl	80062ee <HAL_SPI_TransmitReceive>
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 80021fa:	2201      	movs	r2, #1
 80021fc:	2140      	movs	r1, #64	; 0x40
 80021fe:	4811      	ldr	r0, [pc, #68]	; (8002244 <AS5047_SPI_Write+0xf0>)
 8002200:	f002 feb8 	bl	8004f74 <HAL_GPIO_WritePin>

  //DEBUG WHY THIS IS NOT WORKING LATER.
  //check if recieved data is same as what we wanted to write
  uint16_t recievedFrame = ((uint16_t)rxbuf[0])<<8;
 8002204:	4b10      	ldr	r3, [pc, #64]	; (8002248 <AS5047_SPI_Write+0xf4>)
 8002206:	781b      	ldrb	r3, [r3, #0]
 8002208:	b29b      	uxth	r3, r3
 800220a:	021b      	lsls	r3, r3, #8
 800220c:	81fb      	strh	r3, [r7, #14]
  recievedFrame += rxbuf[1];
 800220e:	4b0e      	ldr	r3, [pc, #56]	; (8002248 <AS5047_SPI_Write+0xf4>)
 8002210:	785b      	ldrb	r3, [r3, #1]
 8002212:	b29a      	uxth	r2, r3
 8002214:	89fb      	ldrh	r3, [r7, #14]
 8002216:	4413      	add	r3, r2
 8002218:	81fb      	strh	r3, [r7, #14]

  uint16_t receivedData = recievedFrame & 0x3FFF;
 800221a:	89fb      	ldrh	r3, [r7, #14]
 800221c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8002220:	81bb      	strh	r3, [r7, #12]
  uint16_t writtenData = valueFrame & 0x3FFF;
 8002222:	88bb      	ldrh	r3, [r7, #4]
 8002224:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8002228:	817b      	strh	r3, [r7, #10]

  if ((writtenData) == receivedData){
 800222a:	897a      	ldrh	r2, [r7, #10]
 800222c:	89bb      	ldrh	r3, [r7, #12]
 800222e:	429a      	cmp	r2, r3
 8002230:	d101      	bne.n	8002236 <AS5047_SPI_Write+0xe2>
	  return 1;
 8002232:	2301      	movs	r3, #1
 8002234:	e000      	b.n	8002238 <AS5047_SPI_Write+0xe4>
  }

  return 0;
 8002236:	2300      	movs	r3, #0
}
 8002238:	4618      	mov	r0, r3
 800223a:	3710      	adds	r7, #16
 800223c:	46bd      	mov	sp, r7
 800223e:	bd80      	pop	{r7, pc}
 8002240:	200004a0 	.word	0x200004a0
 8002244:	48000400 	.word	0x48000400
 8002248:	200004a4 	.word	0x200004a4
 800224c:	200001e8 	.word	0x200001e8

08002250 <AS5047_SPI_Read>:


uint16_t AS5047_SPI_Read(uint16_t command, uint8_t continuousRead) {
 8002250:	b580      	push	{r7, lr}
 8002252:	b086      	sub	sp, #24
 8002254:	af02      	add	r7, sp, #8
 8002256:	4603      	mov	r3, r0
 8002258:	460a      	mov	r2, r1
 800225a:	80fb      	strh	r3, [r7, #6]
 800225c:	4613      	mov	r3, r2
 800225e:	717b      	strb	r3, [r7, #5]
  //write command frame.
  uint16_t finalDataVal;
  txbuf[0] = command >> 8U;
 8002260:	88fb      	ldrh	r3, [r7, #6]
 8002262:	0a1b      	lsrs	r3, r3, #8
 8002264:	b29b      	uxth	r3, r3
 8002266:	b2da      	uxtb	r2, r3
 8002268:	4b21      	ldr	r3, [pc, #132]	; (80022f0 <AS5047_SPI_Read+0xa0>)
 800226a:	701a      	strb	r2, [r3, #0]
  txbuf[1] = command & 0xFF;
 800226c:	88fb      	ldrh	r3, [r7, #6]
 800226e:	b2da      	uxtb	r2, r3
 8002270:	4b1f      	ldr	r3, [pc, #124]	; (80022f0 <AS5047_SPI_Read+0xa0>)
 8002272:	705a      	strb	r2, [r3, #1]
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8002274:	2200      	movs	r2, #0
 8002276:	2140      	movs	r1, #64	; 0x40
 8002278:	481e      	ldr	r0, [pc, #120]	; (80022f4 <AS5047_SPI_Read+0xa4>)
 800227a:	f002 fe7b 	bl	8004f74 <HAL_GPIO_WritePin>
  HAL_SPI_TransmitReceive(&hspi1, (uint8_t*)&txbuf, (uint8_t*)&rxbuf, 2, 100);
 800227e:	2364      	movs	r3, #100	; 0x64
 8002280:	9300      	str	r3, [sp, #0]
 8002282:	2302      	movs	r3, #2
 8002284:	4a1c      	ldr	r2, [pc, #112]	; (80022f8 <AS5047_SPI_Read+0xa8>)
 8002286:	491a      	ldr	r1, [pc, #104]	; (80022f0 <AS5047_SPI_Read+0xa0>)
 8002288:	481c      	ldr	r0, [pc, #112]	; (80022fc <AS5047_SPI_Read+0xac>)
 800228a:	f004 f830 	bl	80062ee <HAL_SPI_TransmitReceive>
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 800228e:	2201      	movs	r2, #1
 8002290:	2140      	movs	r1, #64	; 0x40
 8002292:	4818      	ldr	r0, [pc, #96]	; (80022f4 <AS5047_SPI_Read+0xa4>)
 8002294:	f002 fe6e 	bl	8004f74 <HAL_GPIO_WritePin>

  if (continuousRead ==0){
 8002298:	797b      	ldrb	r3, [r7, #5]
 800229a:	2b00      	cmp	r3, #0
 800229c:	d117      	bne.n	80022ce <AS5047_SPI_Read+0x7e>
	  //this is the NOP command frame for receiving data if you want to read the register once.
	  txbuf[0] = NOP_FRAME >> 8;
 800229e:	4b14      	ldr	r3, [pc, #80]	; (80022f0 <AS5047_SPI_Read+0xa0>)
 80022a0:	22c0      	movs	r2, #192	; 0xc0
 80022a2:	701a      	strb	r2, [r3, #0]
	  txbuf[1] = NOP_FRAME & 0xFF;
 80022a4:	4b12      	ldr	r3, [pc, #72]	; (80022f0 <AS5047_SPI_Read+0xa0>)
 80022a6:	2200      	movs	r2, #0
 80022a8:	705a      	strb	r2, [r3, #1]
	  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 80022aa:	2200      	movs	r2, #0
 80022ac:	2140      	movs	r1, #64	; 0x40
 80022ae:	4811      	ldr	r0, [pc, #68]	; (80022f4 <AS5047_SPI_Read+0xa4>)
 80022b0:	f002 fe60 	bl	8004f74 <HAL_GPIO_WritePin>
	  HAL_SPI_TransmitReceive(&hspi1, (uint8_t*)&txbuf, (uint8_t*)&rxbuf, 2, 100);
 80022b4:	2364      	movs	r3, #100	; 0x64
 80022b6:	9300      	str	r3, [sp, #0]
 80022b8:	2302      	movs	r3, #2
 80022ba:	4a0f      	ldr	r2, [pc, #60]	; (80022f8 <AS5047_SPI_Read+0xa8>)
 80022bc:	490c      	ldr	r1, [pc, #48]	; (80022f0 <AS5047_SPI_Read+0xa0>)
 80022be:	480f      	ldr	r0, [pc, #60]	; (80022fc <AS5047_SPI_Read+0xac>)
 80022c0:	f004 f815 	bl	80062ee <HAL_SPI_TransmitReceive>
	  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 80022c4:	2201      	movs	r2, #1
 80022c6:	2140      	movs	r1, #64	; 0x40
 80022c8:	480a      	ldr	r0, [pc, #40]	; (80022f4 <AS5047_SPI_Read+0xa4>)
 80022ca:	f002 fe53 	bl	8004f74 <HAL_GPIO_WritePin>
  }
  finalDataVal = ((uint16_t)rxbuf[0])<<8;
 80022ce:	4b0a      	ldr	r3, [pc, #40]	; (80022f8 <AS5047_SPI_Read+0xa8>)
 80022d0:	781b      	ldrb	r3, [r3, #0]
 80022d2:	b29b      	uxth	r3, r3
 80022d4:	021b      	lsls	r3, r3, #8
 80022d6:	81fb      	strh	r3, [r7, #14]
  finalDataVal += rxbuf[1];
 80022d8:	4b07      	ldr	r3, [pc, #28]	; (80022f8 <AS5047_SPI_Read+0xa8>)
 80022da:	785b      	ldrb	r3, [r3, #1]
 80022dc:	b29a      	uxth	r2, r3
 80022de:	89fb      	ldrh	r3, [r7, #14]
 80022e0:	4413      	add	r3, r2
 80022e2:	81fb      	strh	r3, [r7, #14]

  return finalDataVal;
 80022e4:	89fb      	ldrh	r3, [r7, #14]

}
 80022e6:	4618      	mov	r0, r3
 80022e8:	3710      	adds	r7, #16
 80022ea:	46bd      	mov	sp, r7
 80022ec:	bd80      	pop	{r7, pc}
 80022ee:	bf00      	nop
 80022f0:	200004a0 	.word	0x200004a0
 80022f4:	48000400 	.word	0x48000400
 80022f8:	200004a4 	.word	0x200004a4
 80022fc:	200001e8 	.word	0x200001e8

08002300 <AS5047_readRegister>:

uint16_t AS5047_readRegister(uint16_t registerAddress,uint8_t continuousRead){
 8002300:	b580      	push	{r7, lr}
 8002302:	b084      	sub	sp, #16
 8002304:	af00      	add	r7, sp, #0
 8002306:	4603      	mov	r3, r0
 8002308:	460a      	mov	r2, r1
 800230a:	80fb      	strh	r3, [r7, #6]
 800230c:	4613      	mov	r3, r2
 800230e:	717b      	strb	r3, [r7, #5]
  CommandFrame command;
  command.values.rw = READ;
 8002310:	7b7b      	ldrb	r3, [r7, #13]
 8002312:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002316:	737b      	strb	r3, [r7, #13]
  command.values.commandFrame = registerAddress;
 8002318:	88fb      	ldrh	r3, [r7, #6]
 800231a:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800231e:	b29a      	uxth	r2, r3
 8002320:	89bb      	ldrh	r3, [r7, #12]
 8002322:	f362 030d 	bfi	r3, r2, #0, #14
 8002326:	81bb      	strh	r3, [r7, #12]
  command.values.parc = parityCheck(command.raw);
 8002328:	89bb      	ldrh	r3, [r7, #12]
 800232a:	4618      	mov	r0, r3
 800232c:	f000 f92e 	bl	800258c <parityCheck>
 8002330:	4603      	mov	r3, r0
 8002332:	461a      	mov	r2, r3
 8002334:	7b7b      	ldrb	r3, [r7, #13]
 8002336:	f362 13c7 	bfi	r3, r2, #7, #1
 800233a:	737b      	strb	r3, [r7, #13]
  uint16_t out= AS5047_SPI_Read(command.raw, continuousRead);
 800233c:	89bb      	ldrh	r3, [r7, #12]
 800233e:	797a      	ldrb	r2, [r7, #5]
 8002340:	4611      	mov	r1, r2
 8002342:	4618      	mov	r0, r3
 8002344:	f7ff ff84 	bl	8002250 <AS5047_SPI_Read>
 8002348:	4603      	mov	r3, r0
 800234a:	81fb      	strh	r3, [r7, #14]
  return out;
 800234c:	89fb      	ldrh	r3, [r7, #14]
}
 800234e:	4618      	mov	r0, r3
 8002350:	3710      	adds	r7, #16
 8002352:	46bd      	mov	sp, r7
 8002354:	bd80      	pop	{r7, pc}

08002356 <AS5047_writeRegister>:


void AS5047_writeRegister(uint16_t registerAddress, uint16_t registerValue) {
 8002356:	b580      	push	{r7, lr}
 8002358:	b084      	sub	sp, #16
 800235a:	af00      	add	r7, sp, #0
 800235c:	4603      	mov	r3, r0
 800235e:	460a      	mov	r2, r1
 8002360:	80fb      	strh	r3, [r7, #6]
 8002362:	4613      	mov	r3, r2
 8002364:	80bb      	strh	r3, [r7, #4]
  CommandFrame command;
  command.values.rw = WRITE;
 8002366:	7b7b      	ldrb	r3, [r7, #13]
 8002368:	f36f 1386 	bfc	r3, #6, #1
 800236c:	737b      	strb	r3, [r7, #13]
  command.values.commandFrame = registerAddress;
 800236e:	88fb      	ldrh	r3, [r7, #6]
 8002370:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8002374:	b29a      	uxth	r2, r3
 8002376:	89bb      	ldrh	r3, [r7, #12]
 8002378:	f362 030d 	bfi	r3, r2, #0, #14
 800237c:	81bb      	strh	r3, [r7, #12]
  command.values.parc = parityCheck(command.raw);
 800237e:	89bb      	ldrh	r3, [r7, #12]
 8002380:	4618      	mov	r0, r3
 8002382:	f000 f903 	bl	800258c <parityCheck>
 8002386:	4603      	mov	r3, r0
 8002388:	461a      	mov	r2, r3
 800238a:	7b7b      	ldrb	r3, [r7, #13]
 800238c:	f362 13c7 	bfi	r3, r2, #7, #1
 8002390:	737b      	strb	r3, [r7, #13]

  WriteDataFrame contentFrame;
  contentFrame.values.data = registerValue;
 8002392:	88bb      	ldrh	r3, [r7, #4]
 8002394:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8002398:	b29a      	uxth	r2, r3
 800239a:	893b      	ldrh	r3, [r7, #8]
 800239c:	f362 030d 	bfi	r3, r2, #0, #14
 80023a0:	813b      	strh	r3, [r7, #8]
  contentFrame.values.low = 0; //always low
 80023a2:	7a7b      	ldrb	r3, [r7, #9]
 80023a4:	f36f 1386 	bfc	r3, #6, #1
 80023a8:	727b      	strb	r3, [r7, #9]
  contentFrame.values.pard = parityCheck(contentFrame.raw);
 80023aa:	893b      	ldrh	r3, [r7, #8]
 80023ac:	4618      	mov	r0, r3
 80023ae:	f000 f8ed 	bl	800258c <parityCheck>
 80023b2:	4603      	mov	r3, r0
 80023b4:	461a      	mov	r2, r3
 80023b6:	7a7b      	ldrb	r3, [r7, #9]
 80023b8:	f362 13c7 	bfi	r3, r2, #7, #1
 80023bc:	727b      	strb	r3, [r7, #9]
  uint8_t out = AS5047_SPI_Write(command.raw, contentFrame.raw);
 80023be:	89bb      	ldrh	r3, [r7, #12]
 80023c0:	893a      	ldrh	r2, [r7, #8]
 80023c2:	4611      	mov	r1, r2
 80023c4:	4618      	mov	r0, r3
 80023c6:	f7ff fec5 	bl	8002154 <AS5047_SPI_Write>
 80023ca:	4603      	mov	r3, r0
 80023cc:	73fb      	strb	r3, [r7, #15]
}
 80023ce:	bf00      	nop
 80023d0:	3710      	adds	r7, #16
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bd80      	pop	{r7, pc}
	...

080023d8 <readData>:

  uint16_t out = readData(command.raw, NOP_FRAME);
  return out;
}

uint16_t readData(uint16_t command, uint16_t nopCommand) {
 80023d8:	b580      	push	{r7, lr}
 80023da:	b084      	sub	sp, #16
 80023dc:	af02      	add	r7, sp, #8
 80023de:	4603      	mov	r3, r0
 80023e0:	460a      	mov	r2, r1
 80023e2:	80fb      	strh	r3, [r7, #6]
 80023e4:	4613      	mov	r3, r2
 80023e6:	80bb      	strh	r3, [r7, #4]
  
  //write command frame.  
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 80023e8:	2200      	movs	r2, #0
 80023ea:	2140      	movs	r1, #64	; 0x40
 80023ec:	482a      	ldr	r0, [pc, #168]	; (8002498 <readData+0xc0>)
 80023ee:	f002 fdc1 	bl	8004f74 <HAL_GPIO_WritePin>
  transmitVar = command; 
 80023f2:	4a2a      	ldr	r2, [pc, #168]	; (800249c <readData+0xc4>)
 80023f4:	88fb      	ldrh	r3, [r7, #6]
 80023f6:	8013      	strh	r3, [r2, #0]
  txbuf[0] = transmitVar >> 8U;
 80023f8:	4b28      	ldr	r3, [pc, #160]	; (800249c <readData+0xc4>)
 80023fa:	881b      	ldrh	r3, [r3, #0]
 80023fc:	0a1b      	lsrs	r3, r3, #8
 80023fe:	b29b      	uxth	r3, r3
 8002400:	b2da      	uxtb	r2, r3
 8002402:	4b27      	ldr	r3, [pc, #156]	; (80024a0 <readData+0xc8>)
 8002404:	701a      	strb	r2, [r3, #0]
  txbuf[1] = transmitVar & 0xFF;
 8002406:	4b25      	ldr	r3, [pc, #148]	; (800249c <readData+0xc4>)
 8002408:	881b      	ldrh	r3, [r3, #0]
 800240a:	b2da      	uxtb	r2, r3
 800240c:	4b24      	ldr	r3, [pc, #144]	; (80024a0 <readData+0xc8>)
 800240e:	705a      	strb	r2, [r3, #1]
  HAL_SPI_TransmitReceive(&hspi1, (uint8_t*)&txbuf, (uint8_t*)&rxbuf, 2, 100);
 8002410:	2364      	movs	r3, #100	; 0x64
 8002412:	9300      	str	r3, [sp, #0]
 8002414:	2302      	movs	r3, #2
 8002416:	4a23      	ldr	r2, [pc, #140]	; (80024a4 <readData+0xcc>)
 8002418:	4921      	ldr	r1, [pc, #132]	; (80024a0 <readData+0xc8>)
 800241a:	4823      	ldr	r0, [pc, #140]	; (80024a8 <readData+0xd0>)
 800241c:	f003 ff67 	bl	80062ee <HAL_SPI_TransmitReceive>
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 8002420:	2201      	movs	r2, #1
 8002422:	2140      	movs	r1, #64	; 0x40
 8002424:	481c      	ldr	r0, [pc, #112]	; (8002498 <readData+0xc0>)
 8002426:	f002 fda5 	bl	8004f74 <HAL_GPIO_WritePin>
/*  for (int i=0;i<40;i++){
   asm ("NOP");
  }*/
      
  //this is NOP command frame for receiving data
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 800242a:	2200      	movs	r2, #0
 800242c:	2140      	movs	r1, #64	; 0x40
 800242e:	481a      	ldr	r0, [pc, #104]	; (8002498 <readData+0xc0>)
 8002430:	f002 fda0 	bl	8004f74 <HAL_GPIO_WritePin>
  transmitVar = nopCommand;
 8002434:	4a19      	ldr	r2, [pc, #100]	; (800249c <readData+0xc4>)
 8002436:	88bb      	ldrh	r3, [r7, #4]
 8002438:	8013      	strh	r3, [r2, #0]
  txbuf[0] = transmitVar >> 8U;
 800243a:	4b18      	ldr	r3, [pc, #96]	; (800249c <readData+0xc4>)
 800243c:	881b      	ldrh	r3, [r3, #0]
 800243e:	0a1b      	lsrs	r3, r3, #8
 8002440:	b29b      	uxth	r3, r3
 8002442:	b2da      	uxtb	r2, r3
 8002444:	4b16      	ldr	r3, [pc, #88]	; (80024a0 <readData+0xc8>)
 8002446:	701a      	strb	r2, [r3, #0]
  txbuf[1] = transmitVar & 0xFF;
 8002448:	4b14      	ldr	r3, [pc, #80]	; (800249c <readData+0xc4>)
 800244a:	881b      	ldrh	r3, [r3, #0]
 800244c:	b2da      	uxtb	r2, r3
 800244e:	4b14      	ldr	r3, [pc, #80]	; (80024a0 <readData+0xc8>)
 8002450:	705a      	strb	r2, [r3, #1]
  HAL_SPI_TransmitReceive(&hspi1, (uint8_t*)&txbuf, (uint8_t*)&finalrxbuf, 2, 100);
 8002452:	2364      	movs	r3, #100	; 0x64
 8002454:	9300      	str	r3, [sp, #0]
 8002456:	2302      	movs	r3, #2
 8002458:	4a14      	ldr	r2, [pc, #80]	; (80024ac <readData+0xd4>)
 800245a:	4911      	ldr	r1, [pc, #68]	; (80024a0 <readData+0xc8>)
 800245c:	4812      	ldr	r0, [pc, #72]	; (80024a8 <readData+0xd0>)
 800245e:	f003 ff46 	bl	80062ee <HAL_SPI_TransmitReceive>
  finalDataVal = ((uint16_t)finalrxbuf[0])<<8;
 8002462:	4b12      	ldr	r3, [pc, #72]	; (80024ac <readData+0xd4>)
 8002464:	781b      	ldrb	r3, [r3, #0]
 8002466:	b29b      	uxth	r3, r3
 8002468:	021b      	lsls	r3, r3, #8
 800246a:	b29a      	uxth	r2, r3
 800246c:	4b10      	ldr	r3, [pc, #64]	; (80024b0 <readData+0xd8>)
 800246e:	801a      	strh	r2, [r3, #0]
  finalDataVal += finalrxbuf[1];
 8002470:	4b0e      	ldr	r3, [pc, #56]	; (80024ac <readData+0xd4>)
 8002472:	785b      	ldrb	r3, [r3, #1]
 8002474:	b29a      	uxth	r2, r3
 8002476:	4b0e      	ldr	r3, [pc, #56]	; (80024b0 <readData+0xd8>)
 8002478:	881b      	ldrh	r3, [r3, #0]
 800247a:	4413      	add	r3, r2
 800247c:	b29a      	uxth	r2, r3
 800247e:	4b0c      	ldr	r3, [pc, #48]	; (80024b0 <readData+0xd8>)
 8002480:	801a      	strh	r2, [r3, #0]
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 8002482:	2201      	movs	r2, #1
 8002484:	2140      	movs	r1, #64	; 0x40
 8002486:	4804      	ldr	r0, [pc, #16]	; (8002498 <readData+0xc0>)
 8002488:	f002 fd74 	bl	8004f74 <HAL_GPIO_WritePin>
  return finalDataVal;
 800248c:	4b08      	ldr	r3, [pc, #32]	; (80024b0 <readData+0xd8>)
 800248e:	881b      	ldrh	r3, [r3, #0]
  
}
 8002490:	4618      	mov	r0, r3
 8002492:	3708      	adds	r7, #8
 8002494:	46bd      	mov	sp, r7
 8002496:	bd80      	pop	{r7, pc}
 8002498:	48000400 	.word	0x48000400
 800249c:	2000049c 	.word	0x2000049c
 80024a0:	200004a0 	.word	0x200004a0
 80024a4:	200004a4 	.word	0x200004a4
 80024a8:	200001e8 	.word	0x200001e8
 80024ac:	200004a8 	.word	0x200004a8
 80024b0:	200004aa 	.word	0x200004aa

080024b4 <writeData>:

// Sending of address and value via SPI for writting data into register via SPI. 
// The data that is given to this function call must be a cleaned and pre-processes one. (Containing alll the paritycheck, R/W bit etc) 
// This is similar to that of readData Function call. It just transmits data. There is no cleaning process and such.
void writeData(uint16_t address, uint16_t value) {
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b084      	sub	sp, #16
 80024b8:	af02      	add	r7, sp, #8
 80024ba:	4603      	mov	r3, r0
 80024bc:	460a      	mov	r2, r1
 80024be:	80fb      	strh	r3, [r7, #6]
 80024c0:	4613      	mov	r3, r2
 80024c2:	80bb      	strh	r3, [r7, #4]
  
  //write which address needed to be updated.  
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 80024c4:	2200      	movs	r2, #0
 80024c6:	2140      	movs	r1, #64	; 0x40
 80024c8:	4829      	ldr	r0, [pc, #164]	; (8002570 <writeData+0xbc>)
 80024ca:	f002 fd53 	bl	8004f74 <HAL_GPIO_WritePin>
  transmitVar = address; 
 80024ce:	4a29      	ldr	r2, [pc, #164]	; (8002574 <writeData+0xc0>)
 80024d0:	88fb      	ldrh	r3, [r7, #6]
 80024d2:	8013      	strh	r3, [r2, #0]
  txbuf[0] = (transmitVar) >> 8;
 80024d4:	4b27      	ldr	r3, [pc, #156]	; (8002574 <writeData+0xc0>)
 80024d6:	881b      	ldrh	r3, [r3, #0]
 80024d8:	0a1b      	lsrs	r3, r3, #8
 80024da:	b29b      	uxth	r3, r3
 80024dc:	b2da      	uxtb	r2, r3
 80024de:	4b26      	ldr	r3, [pc, #152]	; (8002578 <writeData+0xc4>)
 80024e0:	701a      	strb	r2, [r3, #0]
  txbuf[1] = transmitVar & 0xFF;
 80024e2:	4b24      	ldr	r3, [pc, #144]	; (8002574 <writeData+0xc0>)
 80024e4:	881b      	ldrh	r3, [r3, #0]
 80024e6:	b2da      	uxtb	r2, r3
 80024e8:	4b23      	ldr	r3, [pc, #140]	; (8002578 <writeData+0xc4>)
 80024ea:	705a      	strb	r2, [r3, #1]
  HAL_SPI_TransmitReceive(&hspi1, (uint8_t*)&txbuf, (uint8_t*)&rxbuf, 2, 100);
 80024ec:	2364      	movs	r3, #100	; 0x64
 80024ee:	9300      	str	r3, [sp, #0]
 80024f0:	2302      	movs	r3, #2
 80024f2:	4a22      	ldr	r2, [pc, #136]	; (800257c <writeData+0xc8>)
 80024f4:	4920      	ldr	r1, [pc, #128]	; (8002578 <writeData+0xc4>)
 80024f6:	4822      	ldr	r0, [pc, #136]	; (8002580 <writeData+0xcc>)
 80024f8:	f003 fef9 	bl	80062ee <HAL_SPI_TransmitReceive>
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 80024fc:	2201      	movs	r2, #1
 80024fe:	2140      	movs	r1, #64	; 0x40
 8002500:	481b      	ldr	r0, [pc, #108]	; (8002570 <writeData+0xbc>)
 8002502:	f002 fd37 	bl	8004f74 <HAL_GPIO_WritePin>
  
  //this is value that will be stored inside the respective register
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8002506:	2200      	movs	r2, #0
 8002508:	2140      	movs	r1, #64	; 0x40
 800250a:	4819      	ldr	r0, [pc, #100]	; (8002570 <writeData+0xbc>)
 800250c:	f002 fd32 	bl	8004f74 <HAL_GPIO_WritePin>
  transmitVar = value;
 8002510:	4a18      	ldr	r2, [pc, #96]	; (8002574 <writeData+0xc0>)
 8002512:	88bb      	ldrh	r3, [r7, #4]
 8002514:	8013      	strh	r3, [r2, #0]
  txbuf[0] = (transmitVar) >> 8;
 8002516:	4b17      	ldr	r3, [pc, #92]	; (8002574 <writeData+0xc0>)
 8002518:	881b      	ldrh	r3, [r3, #0]
 800251a:	0a1b      	lsrs	r3, r3, #8
 800251c:	b29b      	uxth	r3, r3
 800251e:	b2da      	uxtb	r2, r3
 8002520:	4b15      	ldr	r3, [pc, #84]	; (8002578 <writeData+0xc4>)
 8002522:	701a      	strb	r2, [r3, #0]
  txbuf[1] = transmitVar & 0xFF;
 8002524:	4b13      	ldr	r3, [pc, #76]	; (8002574 <writeData+0xc0>)
 8002526:	881b      	ldrh	r3, [r3, #0]
 8002528:	b2da      	uxtb	r2, r3
 800252a:	4b13      	ldr	r3, [pc, #76]	; (8002578 <writeData+0xc4>)
 800252c:	705a      	strb	r2, [r3, #1]
  HAL_SPI_TransmitReceive(&hspi1, (uint8_t*)&txbuf, (uint8_t*)&finalrxbuf, 2, 100);
 800252e:	2364      	movs	r3, #100	; 0x64
 8002530:	9300      	str	r3, [sp, #0]
 8002532:	2302      	movs	r3, #2
 8002534:	4a13      	ldr	r2, [pc, #76]	; (8002584 <writeData+0xd0>)
 8002536:	4910      	ldr	r1, [pc, #64]	; (8002578 <writeData+0xc4>)
 8002538:	4811      	ldr	r0, [pc, #68]	; (8002580 <writeData+0xcc>)
 800253a:	f003 fed8 	bl	80062ee <HAL_SPI_TransmitReceive>
  finalDataVal = finalrxbuf[0] << 8;
 800253e:	4b11      	ldr	r3, [pc, #68]	; (8002584 <writeData+0xd0>)
 8002540:	781b      	ldrb	r3, [r3, #0]
 8002542:	b29b      	uxth	r3, r3
 8002544:	021b      	lsls	r3, r3, #8
 8002546:	b29a      	uxth	r2, r3
 8002548:	4b0f      	ldr	r3, [pc, #60]	; (8002588 <writeData+0xd4>)
 800254a:	801a      	strh	r2, [r3, #0]
  finalDataVal &= finalrxbuf[1];
 800254c:	4b0d      	ldr	r3, [pc, #52]	; (8002584 <writeData+0xd0>)
 800254e:	785b      	ldrb	r3, [r3, #1]
 8002550:	b29a      	uxth	r2, r3
 8002552:	4b0d      	ldr	r3, [pc, #52]	; (8002588 <writeData+0xd4>)
 8002554:	881b      	ldrh	r3, [r3, #0]
 8002556:	4013      	ands	r3, r2
 8002558:	b29a      	uxth	r2, r3
 800255a:	4b0b      	ldr	r3, [pc, #44]	; (8002588 <writeData+0xd4>)
 800255c:	801a      	strh	r2, [r3, #0]
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 800255e:	2201      	movs	r2, #1
 8002560:	2140      	movs	r1, #64	; 0x40
 8002562:	4803      	ldr	r0, [pc, #12]	; (8002570 <writeData+0xbc>)
 8002564:	f002 fd06 	bl	8004f74 <HAL_GPIO_WritePin>
  
}
 8002568:	bf00      	nop
 800256a:	3708      	adds	r7, #8
 800256c:	46bd      	mov	sp, r7
 800256e:	bd80      	pop	{r7, pc}
 8002570:	48000400 	.word	0x48000400
 8002574:	2000049c 	.word	0x2000049c
 8002578:	200004a0 	.word	0x200004a0
 800257c:	200004a4 	.word	0x200004a4
 8002580:	200001e8 	.word	0x200001e8
 8002584:	200004a8 	.word	0x200004a8
 8002588:	200004aa 	.word	0x200004aa

0800258c <parityCheck>:

// Check Parity of a given data.
// See documentation for implementation.
bool parityCheck(uint16_t data){  
 800258c:	b480      	push	{r7}
 800258e:	b087      	sub	sp, #28
 8002590:	af00      	add	r7, sp, #0
 8002592:	4603      	mov	r3, r0
 8002594:	80fb      	strh	r3, [r7, #6]
  uint16_t count=0;
 8002596:	2300      	movs	r3, #0
 8002598:	82fb      	strh	r3, [r7, #22]
  uint16_t b = 1;
 800259a:	2301      	movs	r3, #1
 800259c:	81fb      	strh	r3, [r7, #14]
  for (int i=0; i<15; i++){
 800259e:	2300      	movs	r3, #0
 80025a0:	613b      	str	r3, [r7, #16]
 80025a2:	e00d      	b.n	80025c0 <parityCheck+0x34>
    if (data & (b << i)) {
 80025a4:	88fa      	ldrh	r2, [r7, #6]
 80025a6:	89f9      	ldrh	r1, [r7, #14]
 80025a8:	693b      	ldr	r3, [r7, #16]
 80025aa:	fa01 f303 	lsl.w	r3, r1, r3
 80025ae:	4013      	ands	r3, r2
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d002      	beq.n	80025ba <parityCheck+0x2e>
      count++;
 80025b4:	8afb      	ldrh	r3, [r7, #22]
 80025b6:	3301      	adds	r3, #1
 80025b8:	82fb      	strh	r3, [r7, #22]
  for (int i=0; i<15; i++){
 80025ba:	693b      	ldr	r3, [r7, #16]
 80025bc:	3301      	adds	r3, #1
 80025be:	613b      	str	r3, [r7, #16]
 80025c0:	693b      	ldr	r3, [r7, #16]
 80025c2:	2b0e      	cmp	r3, #14
 80025c4:	ddee      	ble.n	80025a4 <parityCheck+0x18>
    }
  }
  
  if (count%2==0) {
 80025c6:	8afb      	ldrh	r3, [r7, #22]
 80025c8:	f003 0301 	and.w	r3, r3, #1
 80025cc:	b29b      	uxth	r3, r3
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d101      	bne.n	80025d6 <parityCheck+0x4a>
    return 0;
 80025d2:	2300      	movs	r3, #0
 80025d4:	e000      	b.n	80025d8 <parityCheck+0x4c>
  } else {
    return 1;
 80025d6:	2301      	movs	r3, #1
  }  
}
 80025d8:	4618      	mov	r0, r3
 80025da:	371c      	adds	r7, #28
 80025dc:	46bd      	mov	sp, r7
 80025de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e2:	4770      	bx	lr

080025e4 <readRegister>:

// Preprocesses data before sending data via SPI
// Populating the CmdFrame is done here. 
// See documentation for details on implementation
ReadDataFrame readRegister(uint16_t registerAddress){
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b086      	sub	sp, #24
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	4603      	mov	r3, r0
 80025ec:	80fb      	strh	r3, [r7, #6]
  CommandFrame command;
  command.values.rw = READ;
 80025ee:	7d7b      	ldrb	r3, [r7, #21]
 80025f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80025f4:	757b      	strb	r3, [r7, #21]
  command.values.commandFrame = registerAddress;
 80025f6:	88fb      	ldrh	r3, [r7, #6]
 80025f8:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80025fc:	b29a      	uxth	r2, r3
 80025fe:	8abb      	ldrh	r3, [r7, #20]
 8002600:	f362 030d 	bfi	r3, r2, #0, #14
 8002604:	82bb      	strh	r3, [r7, #20]
  command.values.parc = parityCheck(command.raw);
 8002606:	8abb      	ldrh	r3, [r7, #20]
 8002608:	4618      	mov	r0, r3
 800260a:	f7ff ffbf 	bl	800258c <parityCheck>
 800260e:	4603      	mov	r3, r0
 8002610:	461a      	mov	r2, r3
 8002612:	7d7b      	ldrb	r3, [r7, #21]
 8002614:	f362 13c7 	bfi	r3, r2, #7, #1
 8002618:	757b      	strb	r3, [r7, #21]
  
  CommandFrame nopCommand;
  nopCommand.values.rw = READ;
 800261a:	7c7b      	ldrb	r3, [r7, #17]
 800261c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002620:	747b      	strb	r3, [r7, #17]
  nopCommand.values.commandFrame = NOP_REG;
 8002622:	8a3b      	ldrh	r3, [r7, #16]
 8002624:	f36f 030d 	bfc	r3, #0, #14
 8002628:	823b      	strh	r3, [r7, #16]
  nopCommand.values.parc = parityCheck(nopCommand.raw);  
 800262a:	8a3b      	ldrh	r3, [r7, #16]
 800262c:	4618      	mov	r0, r3
 800262e:	f7ff ffad 	bl	800258c <parityCheck>
 8002632:	4603      	mov	r3, r0
 8002634:	461a      	mov	r2, r3
 8002636:	7c7b      	ldrb	r3, [r7, #17]
 8002638:	f362 13c7 	bfi	r3, r2, #7, #1
 800263c:	747b      	strb	r3, [r7, #17]
  ReadDataFrame receivedFrame;
  receivedFrame.raw = readData(command.raw, nopCommand.raw);
 800263e:	8abb      	ldrh	r3, [r7, #20]
 8002640:	8a3a      	ldrh	r2, [r7, #16]
 8002642:	4611      	mov	r1, r2
 8002644:	4618      	mov	r0, r3
 8002646:	f7ff fec7 	bl	80023d8 <readData>
 800264a:	4603      	mov	r3, r0
 800264c:	81bb      	strh	r3, [r7, #12]
  return receivedFrame;
 800264e:	89bb      	ldrh	r3, [r7, #12]
}
 8002650:	4618      	mov	r0, r3
 8002652:	3718      	adds	r7, #24
 8002654:	46bd      	mov	sp, r7
 8002656:	bd80      	pop	{r7, pc}

08002658 <getProgrammedZeroOffset>:

uint16_t getProgrammedZeroOffset(void){
 8002658:	b580      	push	{r7, lr}
 800265a:	b086      	sub	sp, #24
 800265c:	af00      	add	r7, sp, #0
  CommandFrame command;
  command.values.rw = READ;
 800265e:	7c7b      	ldrb	r3, [r7, #17]
 8002660:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002664:	747b      	strb	r3, [r7, #17]
  command.values.commandFrame = ZPOSM_REG;
 8002666:	8a3b      	ldrh	r3, [r7, #16]
 8002668:	2216      	movs	r2, #22
 800266a:	f362 030d 	bfi	r3, r2, #0, #14
 800266e:	823b      	strh	r3, [r7, #16]
  command.values.parc = parityCheck(command.raw);
 8002670:	8a3b      	ldrh	r3, [r7, #16]
 8002672:	4618      	mov	r0, r3
 8002674:	f7ff ff8a 	bl	800258c <parityCheck>
 8002678:	4603      	mov	r3, r0
 800267a:	461a      	mov	r2, r3
 800267c:	7c7b      	ldrb	r3, [r7, #17]
 800267e:	f362 13c7 	bfi	r3, r2, #7, #1
 8002682:	747b      	strb	r3, [r7, #17]
  
  CommandFrame nopCommand;
  nopCommand.values.rw = READ;
 8002684:	7b7b      	ldrb	r3, [r7, #13]
 8002686:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800268a:	737b      	strb	r3, [r7, #13]
  nopCommand.values.commandFrame = NOP_REG;
 800268c:	89bb      	ldrh	r3, [r7, #12]
 800268e:	f36f 030d 	bfc	r3, #0, #14
 8002692:	81bb      	strh	r3, [r7, #12]
  nopCommand.values.parc = parityCheck(nopCommand.raw);  
 8002694:	89bb      	ldrh	r3, [r7, #12]
 8002696:	4618      	mov	r0, r3
 8002698:	f7ff ff78 	bl	800258c <parityCheck>
 800269c:	4603      	mov	r3, r0
 800269e:	461a      	mov	r2, r3
 80026a0:	7b7b      	ldrb	r3, [r7, #13]
 80026a2:	f362 13c7 	bfi	r3, r2, #7, #1
 80026a6:	737b      	strb	r3, [r7, #13]
  uint16_t zposH16,zposL16; // even though ZPOS registers are only 8 bit, the fn we have is 16 bit, so just leave that as is.
  
  ZPOSH_frame ZPOS_H;
  ZPOSL_frame ZPOS_L;

  zposH16 = readData(command.raw, nopCommand.raw);
 80026a8:	8a3b      	ldrh	r3, [r7, #16]
 80026aa:	89ba      	ldrh	r2, [r7, #12]
 80026ac:	4611      	mov	r1, r2
 80026ae:	4618      	mov	r0, r3
 80026b0:	f7ff fe92 	bl	80023d8 <readData>
 80026b4:	4603      	mov	r3, r0
 80026b6:	82fb      	strh	r3, [r7, #22]
  ZPOS_H.raw = zposH16;
 80026b8:	8afb      	ldrh	r3, [r7, #22]
 80026ba:	b2db      	uxtb	r3, r3
 80026bc:	723b      	strb	r3, [r7, #8]

  command.values.rw = READ;
 80026be:	7c7b      	ldrb	r3, [r7, #17]
 80026c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80026c4:	747b      	strb	r3, [r7, #17]
  command.values.commandFrame = ZPOSL_REG;
 80026c6:	8a3b      	ldrh	r3, [r7, #16]
 80026c8:	2217      	movs	r2, #23
 80026ca:	f362 030d 	bfi	r3, r2, #0, #14
 80026ce:	823b      	strh	r3, [r7, #16]
  command.values.parc = parityCheck(command.raw);
 80026d0:	8a3b      	ldrh	r3, [r7, #16]
 80026d2:	4618      	mov	r0, r3
 80026d4:	f7ff ff5a 	bl	800258c <parityCheck>
 80026d8:	4603      	mov	r3, r0
 80026da:	461a      	mov	r2, r3
 80026dc:	7c7b      	ldrb	r3, [r7, #17]
 80026de:	f362 13c7 	bfi	r3, r2, #7, #1
 80026e2:	747b      	strb	r3, [r7, #17]
  

  zposL16 = readData(command.raw, nopCommand.raw);
 80026e4:	8a3b      	ldrh	r3, [r7, #16]
 80026e6:	89ba      	ldrh	r2, [r7, #12]
 80026e8:	4611      	mov	r1, r2
 80026ea:	4618      	mov	r0, r3
 80026ec:	f7ff fe74 	bl	80023d8 <readData>
 80026f0:	4603      	mov	r3, r0
 80026f2:	82bb      	strh	r3, [r7, #20]
  ZPOS_L.raw = zposL16;
 80026f4:	8abb      	ldrh	r3, [r7, #20]
 80026f6:	b2db      	uxtb	r3, r3
 80026f8:	713b      	strb	r3, [r7, #4]
  
  uint16_t zpos = (ZPOS_H.raw << 6) + (ZPOS_L.raw & 0x3F);
 80026fa:	7a3b      	ldrb	r3, [r7, #8]
 80026fc:	b29b      	uxth	r3, r3
 80026fe:	019b      	lsls	r3, r3, #6
 8002700:	b29a      	uxth	r2, r3
 8002702:	793b      	ldrb	r3, [r7, #4]
 8002704:	b29b      	uxth	r3, r3
 8002706:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800270a:	b29b      	uxth	r3, r3
 800270c:	4413      	add	r3, r2
 800270e:	827b      	strh	r3, [r7, #18]
  return zpos;
 8002710:	8a7b      	ldrh	r3, [r7, #18]
}
 8002712:	4618      	mov	r0, r3
 8002714:	3718      	adds	r7, #24
 8002716:	46bd      	mov	sp, r7
 8002718:	bd80      	pop	{r7, pc}

0800271a <writeRegister>:


void writeRegister(uint16_t registerAddress, uint16_t registerValue) {
 800271a:	b580      	push	{r7, lr}
 800271c:	b084      	sub	sp, #16
 800271e:	af00      	add	r7, sp, #0
 8002720:	4603      	mov	r3, r0
 8002722:	460a      	mov	r2, r1
 8002724:	80fb      	strh	r3, [r7, #6]
 8002726:	4613      	mov	r3, r2
 8002728:	80bb      	strh	r3, [r7, #4]
  CommandFrame command;
  command.values.rw = WRITE;
 800272a:	7b7b      	ldrb	r3, [r7, #13]
 800272c:	f36f 1386 	bfc	r3, #6, #1
 8002730:	737b      	strb	r3, [r7, #13]
  command.values.commandFrame = registerAddress;
 8002732:	88fb      	ldrh	r3, [r7, #6]
 8002734:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8002738:	b29a      	uxth	r2, r3
 800273a:	89bb      	ldrh	r3, [r7, #12]
 800273c:	f362 030d 	bfi	r3, r2, #0, #14
 8002740:	81bb      	strh	r3, [r7, #12]
  command.values.parc = parityCheck(command.raw);
 8002742:	89bb      	ldrh	r3, [r7, #12]
 8002744:	4618      	mov	r0, r3
 8002746:	f7ff ff21 	bl	800258c <parityCheck>
 800274a:	4603      	mov	r3, r0
 800274c:	461a      	mov	r2, r3
 800274e:	7b7b      	ldrb	r3, [r7, #13]
 8002750:	f362 13c7 	bfi	r3, r2, #7, #1
 8002754:	737b      	strb	r3, [r7, #13]
  
  WriteDataFrame contentFrame;
  contentFrame.values.data = registerValue;
 8002756:	88bb      	ldrh	r3, [r7, #4]
 8002758:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800275c:	b29a      	uxth	r2, r3
 800275e:	893b      	ldrh	r3, [r7, #8]
 8002760:	f362 030d 	bfi	r3, r2, #0, #14
 8002764:	813b      	strh	r3, [r7, #8]
  contentFrame.values.low = 0; //always low
 8002766:	7a7b      	ldrb	r3, [r7, #9]
 8002768:	f36f 1386 	bfc	r3, #6, #1
 800276c:	727b      	strb	r3, [r7, #9]
  contentFrame.values.pard = parityCheck(contentFrame.raw);
 800276e:	893b      	ldrh	r3, [r7, #8]
 8002770:	4618      	mov	r0, r3
 8002772:	f7ff ff0b 	bl	800258c <parityCheck>
 8002776:	4603      	mov	r3, r0
 8002778:	461a      	mov	r2, r3
 800277a:	7a7b      	ldrb	r3, [r7, #9]
 800277c:	f362 13c7 	bfi	r3, r2, #7, #1
 8002780:	727b      	strb	r3, [r7, #9]
  writeData(command.raw, contentFrame.raw);
 8002782:	89bb      	ldrh	r3, [r7, #12]
 8002784:	893a      	ldrh	r2, [r7, #8]
 8002786:	4611      	mov	r1, r2
 8002788:	4618      	mov	r0, r3
 800278a:	f7ff fe93 	bl	80024b4 <writeData>

  //Add a nop write here and check what value you get back. it should be what you wrote.
  //can return one if successful, else false.
}
 800278e:	bf00      	nop
 8002790:	3710      	adds	r7, #16
 8002792:	46bd      	mov	sp, r7
 8002794:	bd80      	pop	{r7, pc}
	...

08002798 <angleReading>:
void readFromRegister(uint16_t address){
  readRegister(address);
}

Angle angle;
uint16_t angleReading(){
 8002798:	b580      	push	{r7, lr}
 800279a:	b082      	sub	sp, #8
 800279c:	af00      	add	r7, sp, #0
  ReadDataFrame readdataframe = readRegister(ANGLE_REG);
 800279e:	f643 70fe 	movw	r0, #16382	; 0x3ffe
 80027a2:	f7ff ff1f 	bl	80025e4 <readRegister>
 80027a6:	4603      	mov	r3, r0
 80027a8:	80bb      	strh	r3, [r7, #4]
  angle.raw = readdataframe.values.data;
 80027aa:	88bb      	ldrh	r3, [r7, #4]
 80027ac:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80027b0:	b29b      	uxth	r3, r3
 80027b2:	461a      	mov	r2, r3
 80027b4:	4b05      	ldr	r3, [pc, #20]	; (80027cc <angleReading+0x34>)
 80027b6:	801a      	strh	r2, [r3, #0]
  return angle.values.cordicang;
 80027b8:	4b04      	ldr	r3, [pc, #16]	; (80027cc <angleReading+0x34>)
 80027ba:	881b      	ldrh	r3, [r3, #0]
 80027bc:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80027c0:	b29b      	uxth	r3, r3
}
 80027c2:	4618      	mov	r0, r3
 80027c4:	3708      	adds	r7, #8
 80027c6:	46bd      	mov	sp, r7
 80027c8:	bd80      	pop	{r7, pc}
 80027ca:	bf00      	nop
 80027cc:	200004ac 	.word	0x200004ac

080027d0 <writeZeroReg>:


void writeZeroReg(uint16_t zeroValue){
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b084      	sub	sp, #16
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	4603      	mov	r3, r0
 80027d8:	80fb      	strh	r3, [r7, #6]
  Zposl zposl;
  zposl.values.zposl = zeroValue & 0x003F;
 80027da:	88fb      	ldrh	r3, [r7, #6]
 80027dc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80027e0:	b2da      	uxtb	r2, r3
 80027e2:	7b3b      	ldrb	r3, [r7, #12]
 80027e4:	f362 0305 	bfi	r3, r2, #0, #6
 80027e8:	733b      	strb	r3, [r7, #12]
  
  Zposm zposm;
  zposm.values.zposm = (zeroValue >> 6) & 0x00ff;
 80027ea:	88fb      	ldrh	r3, [r7, #6]
 80027ec:	099b      	lsrs	r3, r3, #6
 80027ee:	b29b      	uxth	r3, r3
 80027f0:	b2db      	uxtb	r3, r3
 80027f2:	723b      	strb	r3, [r7, #8]
  
  writeRegister(ZPOSM_REG, zposm.raw);
 80027f4:	7a3b      	ldrb	r3, [r7, #8]
 80027f6:	b29b      	uxth	r3, r3
 80027f8:	4619      	mov	r1, r3
 80027fa:	2016      	movs	r0, #22
 80027fc:	f7ff ff8d 	bl	800271a <writeRegister>
  writeRegister(ZPOSL_REG, zposl.raw);
 8002800:	7b3b      	ldrb	r3, [r7, #12]
 8002802:	b29b      	uxth	r3, r3
 8002804:	4619      	mov	r1, r3
 8002806:	2017      	movs	r0, #23
 8002808:	f7ff ff87 	bl	800271a <writeRegister>
  
}
 800280c:	bf00      	nop
 800280e:	3710      	adds	r7, #16
 8002810:	46bd      	mov	sp, r7
 8002812:	bd80      	pop	{r7, pc}

08002814 <SetupABIwithoutPWM>:

void SetupABIwithoutPWM(void){
 8002814:	b580      	push	{r7, lr}
 8002816:	b082      	sub	sp, #8
 8002818:	af00      	add	r7, sp, #0
  Settings1 settings1;
  settings1.values.factorySetting = 1;
 800281a:	793b      	ldrb	r3, [r7, #4]
 800281c:	f043 0301 	orr.w	r3, r3, #1
 8002820:	713b      	strb	r3, [r7, #4]
  settings1.values.not_used = 0;
 8002822:	793b      	ldrb	r3, [r7, #4]
 8002824:	f36f 0341 	bfc	r3, #1, #1
 8002828:	713b      	strb	r3, [r7, #4]
  settings1.values.dir = 0;  // By definition A leads B for CW direction. for us seen from the front, rotating in a CW direction gives A leading B.
 800282a:	793b      	ldrb	r3, [r7, #4]
 800282c:	f36f 0382 	bfc	r3, #2, #1
 8002830:	713b      	strb	r3, [r7, #4]
  settings1.values.uvw_abi = 0; // 0-ABI with W pin as PWM, 1-UVW with I pin as PWM
 8002832:	793b      	ldrb	r3, [r7, #4]
 8002834:	f36f 03c3 	bfc	r3, #3, #1
 8002838:	713b      	strb	r3, [r7, #4]
  settings1.values.daecdis = 0;
 800283a:	793b      	ldrb	r3, [r7, #4]
 800283c:	f36f 1304 	bfc	r3, #4, #1
 8002840:	713b      	strb	r3, [r7, #4]
  settings1.values.abibin = 1; // ABI-decimal or binary.
 8002842:	793b      	ldrb	r3, [r7, #4]
 8002844:	f043 0320 	orr.w	r3, r3, #32
 8002848:	713b      	strb	r3, [r7, #4]
  settings1.values.dataselect = 0; //1 is cordic Angle, 0 is dynamic angle compensation. Remove for very slow speeds.
 800284a:	793b      	ldrb	r3, [r7, #4]
 800284c:	f36f 1386 	bfc	r3, #6, #1
 8002850:	713b      	strb	r3, [r7, #4]
  settings1.values.pwmon = 0; //sets pwm on W pin if 1.
 8002852:	793b      	ldrb	r3, [r7, #4]
 8002854:	f36f 13c7 	bfc	r3, #7, #1
 8002858:	713b      	strb	r3, [r7, #4]

  AS5047_writeRegister(SETTINGS1_REG, settings1.raw);
 800285a:	88bb      	ldrh	r3, [r7, #4]
 800285c:	4619      	mov	r1, r3
 800285e:	2018      	movs	r0, #24
 8002860:	f7ff fd79 	bl	8002356 <AS5047_writeRegister>

  Settings2 settings2;
  settings2.values.abires = 0; // with abibin sets the resolution
 8002864:	783b      	ldrb	r3, [r7, #0]
 8002866:	f36f 1347 	bfc	r3, #5, #3
 800286a:	703b      	strb	r3, [r7, #0]
  settings2.values.uvwpp = 4; // 5 pole pairs - 0b100
 800286c:	783b      	ldrb	r3, [r7, #0]
 800286e:	2204      	movs	r2, #4
 8002870:	f362 0302 	bfi	r3, r2, #0, #3
 8002874:	703b      	strb	r3, [r7, #0]
  AS5047_writeRegister(SETTINGS2_REG,settings2.raw);
 8002876:	783b      	ldrb	r3, [r7, #0]
 8002878:	b29b      	uxth	r3, r3
 800287a:	4619      	mov	r1, r3
 800287c:	2019      	movs	r0, #25
 800287e:	f7ff fd6a 	bl	8002356 <AS5047_writeRegister>
}
 8002882:	bf00      	nop
 8002884:	3708      	adds	r7, #8
 8002886:	46bd      	mov	sp, r7
 8002888:	bd80      	pop	{r7, pc}

0800288a <Check_ABI_SetCorrectly>:

uint8_t Check_ABI_SetCorrectly(Settings1 settings1, Settings2 settings2){
 800288a:	b480      	push	{r7}
 800288c:	b083      	sub	sp, #12
 800288e:	af00      	add	r7, sp, #0
 8002890:	80b8      	strh	r0, [r7, #4]
 8002892:	7039      	strb	r1, [r7, #0]
  if ((settings1.values.uvw_abi == 0) && (settings1.values.abibin == 1 ) && (settings1.values.pwmon == 0 ) && ( settings1.values.dir == 0)
 8002894:	793b      	ldrb	r3, [r7, #4]
 8002896:	f003 0308 	and.w	r3, r3, #8
 800289a:	b2db      	uxtb	r3, r3
 800289c:	2b00      	cmp	r3, #0
 800289e:	d11f      	bne.n	80028e0 <Check_ABI_SetCorrectly+0x56>
 80028a0:	793b      	ldrb	r3, [r7, #4]
 80028a2:	f003 0320 	and.w	r3, r3, #32
 80028a6:	b2db      	uxtb	r3, r3
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d019      	beq.n	80028e0 <Check_ABI_SetCorrectly+0x56>
 80028ac:	793b      	ldrb	r3, [r7, #4]
 80028ae:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80028b2:	b2db      	uxtb	r3, r3
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d113      	bne.n	80028e0 <Check_ABI_SetCorrectly+0x56>
 80028b8:	793b      	ldrb	r3, [r7, #4]
 80028ba:	f003 0304 	and.w	r3, r3, #4
 80028be:	b2db      	uxtb	r3, r3
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d10d      	bne.n	80028e0 <Check_ABI_SetCorrectly+0x56>
      && (settings2.values.abires == 0)  && ( settings2.values.uvwpp == 4)){
 80028c4:	783b      	ldrb	r3, [r7, #0]
 80028c6:	f023 031f 	bic.w	r3, r3, #31
 80028ca:	b2db      	uxtb	r3, r3
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d107      	bne.n	80028e0 <Check_ABI_SetCorrectly+0x56>
 80028d0:	783b      	ldrb	r3, [r7, #0]
 80028d2:	f003 0307 	and.w	r3, r3, #7
 80028d6:	b2db      	uxtb	r3, r3
 80028d8:	2b04      	cmp	r3, #4
 80028da:	d101      	bne.n	80028e0 <Check_ABI_SetCorrectly+0x56>
        return 1;
 80028dc:	2301      	movs	r3, #1
 80028de:	e000      	b.n	80028e2 <Check_ABI_SetCorrectly+0x58>
      }
  else{
    return 0;
 80028e0:	2300      	movs	r3, #0
  }
}
 80028e2:	4618      	mov	r0, r3
 80028e4:	370c      	adds	r7, #12
 80028e6:	46bd      	mov	sp, r7
 80028e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ec:	4770      	bx	lr
	...

080028f0 <GetAveragedAngleReading>:

uint16_t angleArrayEnc[2] = {0};
uint16_t GetAveragedAngleReading(void){
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b084      	sub	sp, #16
 80028f4:	af00      	add	r7, sp, #0
	long longAngleData=0;
 80028f6:	2300      	movs	r3, #0
 80028f8:	60fb      	str	r3, [r7, #12]
	uint16_t angleData=0;
 80028fa:	2300      	movs	r3, #0
 80028fc:	807b      	strh	r3, [r7, #2]
	uint8_t count = 0;
 80028fe:	2300      	movs	r3, #0
 8002900:	72fb      	strb	r3, [r7, #11]
	for (int i=0;i<2;i++){
 8002902:	2300      	movs	r3, #0
 8002904:	607b      	str	r3, [r7, #4]
 8002906:	e01a      	b.n	800293e <GetAveragedAngleReading+0x4e>
		uint16_t angle_ = angleReading();
 8002908:	f7ff ff46 	bl	8002798 <angleReading>
 800290c:	4603      	mov	r3, r0
 800290e:	803b      	strh	r3, [r7, #0]
		if (angle_ != 0){
 8002910:	883b      	ldrh	r3, [r7, #0]
 8002912:	2b00      	cmp	r3, #0
 8002914:	d00d      	beq.n	8002932 <GetAveragedAngleReading+0x42>
			count++;
 8002916:	7afb      	ldrb	r3, [r7, #11]
 8002918:	3301      	adds	r3, #1
 800291a:	72fb      	strb	r3, [r7, #11]
			angleArrayEnc[i] = angle_;
 800291c:	490e      	ldr	r1, [pc, #56]	; (8002958 <GetAveragedAngleReading+0x68>)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	883a      	ldrh	r2, [r7, #0]
 8002922:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
			longAngleData += (int16_t) angle_;
 8002926:	f9b7 3000 	ldrsh.w	r3, [r7]
 800292a:	461a      	mov	r2, r3
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	4413      	add	r3, r2
 8002930:	60fb      	str	r3, [r7, #12]
		}
		HAL_Delay(1);
 8002932:	2001      	movs	r0, #1
 8002934:	f000 f9a0 	bl	8002c78 <HAL_Delay>
	for (int i=0;i<2;i++){
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	3301      	adds	r3, #1
 800293c:	607b      	str	r3, [r7, #4]
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	2b01      	cmp	r3, #1
 8002942:	dde1      	ble.n	8002908 <GetAveragedAngleReading+0x18>
	}
	angleData = longAngleData/count;
 8002944:	7afb      	ldrb	r3, [r7, #11]
 8002946:	68fa      	ldr	r2, [r7, #12]
 8002948:	fb92 f3f3 	sdiv	r3, r2, r3
 800294c:	807b      	strh	r3, [r7, #2]
	return angleData;
 800294e:	887b      	ldrh	r3, [r7, #2]
 }
 8002950:	4618      	mov	r0, r3
 8002952:	3710      	adds	r7, #16
 8002954:	46bd      	mov	sp, r7
 8002956:	bd80      	pop	{r7, pc}
 8002958:	200004b0 	.word	0x200004b0

0800295c <setupCalibration>:
uint16_t encCalib_pwmVal = 0;

extern TIM_HandleTypeDef htim1;


void setupCalibration(uint8_t dutyPercentage,uint16_t delayTime_ms){
 800295c:	b5b0      	push	{r4, r5, r7, lr}
 800295e:	b082      	sub	sp, #8
 8002960:	af00      	add	r7, sp, #0
 8002962:	4603      	mov	r3, r0
 8002964:	460a      	mov	r2, r1
 8002966:	71fb      	strb	r3, [r7, #7]
 8002968:	4613      	mov	r3, r2
 800296a:	80bb      	strh	r3, [r7, #4]
	encCalib_pwmVal = ((float)dutyPercentage/100.0) * htim1.Instance->ARR;
 800296c:	79fb      	ldrb	r3, [r7, #7]
 800296e:	ee07 3a90 	vmov	s15, r3
 8002972:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002976:	ee17 0a90 	vmov	r0, s15
 800297a:	f7fd fdb1 	bl	80004e0 <__aeabi_f2d>
 800297e:	f04f 0200 	mov.w	r2, #0
 8002982:	4b12      	ldr	r3, [pc, #72]	; (80029cc <setupCalibration+0x70>)
 8002984:	f7fd ff2e 	bl	80007e4 <__aeabi_ddiv>
 8002988:	4602      	mov	r2, r0
 800298a:	460b      	mov	r3, r1
 800298c:	4614      	mov	r4, r2
 800298e:	461d      	mov	r5, r3
 8002990:	4b0f      	ldr	r3, [pc, #60]	; (80029d0 <setupCalibration+0x74>)
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002996:	4618      	mov	r0, r3
 8002998:	f7fd fd80 	bl	800049c <__aeabi_ui2d>
 800299c:	4602      	mov	r2, r0
 800299e:	460b      	mov	r3, r1
 80029a0:	4620      	mov	r0, r4
 80029a2:	4629      	mov	r1, r5
 80029a4:	f7fd fdf4 	bl	8000590 <__aeabi_dmul>
 80029a8:	4602      	mov	r2, r0
 80029aa:	460b      	mov	r3, r1
 80029ac:	4610      	mov	r0, r2
 80029ae:	4619      	mov	r1, r3
 80029b0:	f7fe f800 	bl	80009b4 <__aeabi_d2uiz>
 80029b4:	4603      	mov	r3, r0
 80029b6:	b29a      	uxth	r2, r3
 80029b8:	4b06      	ldr	r3, [pc, #24]	; (80029d4 <setupCalibration+0x78>)
 80029ba:	801a      	strh	r2, [r3, #0]
	encCalib_delayTime = delayTime_ms;
 80029bc:	4a06      	ldr	r2, [pc, #24]	; (80029d8 <setupCalibration+0x7c>)
 80029be:	88bb      	ldrh	r3, [r7, #4]
 80029c0:	8013      	strh	r3, [r2, #0]
}
 80029c2:	bf00      	nop
 80029c4:	3708      	adds	r7, #8
 80029c6:	46bd      	mov	sp, r7
 80029c8:	bdb0      	pop	{r4, r5, r7, pc}
 80029ca:	bf00      	nop
 80029cc:	40590000 	.word	0x40590000
 80029d0:	2000024c 	.word	0x2000024c
 80029d4:	200004b6 	.word	0x200004b6
 80029d8:	200004b4 	.word	0x200004b4

080029dc <setPhaseU>:

void setPhaseU(uint16_t pwmVal){
 80029dc:	b480      	push	{r7}
 80029de:	b083      	sub	sp, #12
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	4603      	mov	r3, r0
 80029e4:	80fb      	strh	r3, [r7, #6]
	htim1.Instance->CCR1 = pwmVal;
 80029e6:	4b05      	ldr	r3, [pc, #20]	; (80029fc <setPhaseU+0x20>)
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	88fa      	ldrh	r2, [r7, #6]
 80029ec:	635a      	str	r2, [r3, #52]	; 0x34
}
 80029ee:	bf00      	nop
 80029f0:	370c      	adds	r7, #12
 80029f2:	46bd      	mov	sp, r7
 80029f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f8:	4770      	bx	lr
 80029fa:	bf00      	nop
 80029fc:	2000024c 	.word	0x2000024c

08002a00 <setPhaseV>:
void setPhaseV(uint16_t pwmVal){
 8002a00:	b480      	push	{r7}
 8002a02:	b083      	sub	sp, #12
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	4603      	mov	r3, r0
 8002a08:	80fb      	strh	r3, [r7, #6]
	htim1.Instance->CCR2 = pwmVal;
 8002a0a:	4b05      	ldr	r3, [pc, #20]	; (8002a20 <setPhaseV+0x20>)
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	88fa      	ldrh	r2, [r7, #6]
 8002a10:	639a      	str	r2, [r3, #56]	; 0x38
}
 8002a12:	bf00      	nop
 8002a14:	370c      	adds	r7, #12
 8002a16:	46bd      	mov	sp, r7
 8002a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1c:	4770      	bx	lr
 8002a1e:	bf00      	nop
 8002a20:	2000024c 	.word	0x2000024c

08002a24 <setPhaseW>:
void setPhaseW(uint16_t pwmVal){
 8002a24:	b480      	push	{r7}
 8002a26:	b083      	sub	sp, #12
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	80fb      	strh	r3, [r7, #6]
	htim1.Instance->CCR3 = pwmVal;
 8002a2e:	4b05      	ldr	r3, [pc, #20]	; (8002a44 <setPhaseW+0x20>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	88fa      	ldrh	r2, [r7, #6]
 8002a34:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8002a36:	bf00      	nop
 8002a38:	370c      	adds	r7, #12
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a40:	4770      	bx	lr
 8002a42:	bf00      	nop
 8002a44:	2000024c 	.word	0x2000024c

08002a48 <TurnOffAllPhases>:

void TurnOffAllPhases(void){
 8002a48:	b480      	push	{r7}
 8002a4a:	af00      	add	r7, sp, #0
	htim1.Instance->CCR1 = 0;
 8002a4c:	4b08      	ldr	r3, [pc, #32]	; (8002a70 <TurnOffAllPhases+0x28>)
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	2200      	movs	r2, #0
 8002a52:	635a      	str	r2, [r3, #52]	; 0x34
	htim1.Instance->CCR2 = 0;
 8002a54:	4b06      	ldr	r3, [pc, #24]	; (8002a70 <TurnOffAllPhases+0x28>)
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	2200      	movs	r2, #0
 8002a5a:	639a      	str	r2, [r3, #56]	; 0x38
	htim1.Instance->CCR3 = 0;
 8002a5c:	4b04      	ldr	r3, [pc, #16]	; (8002a70 <TurnOffAllPhases+0x28>)
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	2200      	movs	r2, #0
 8002a62:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8002a64:	bf00      	nop
 8002a66:	46bd      	mov	sp, r7
 8002a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6c:	4770      	bx	lr
 8002a6e:	bf00      	nop
 8002a70:	2000024c 	.word	0x2000024c

08002a74 <voltageOnPrincipalAxis>:

void voltageOnPrincipalAxis(uint8_t axis){
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b082      	sub	sp, #8
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	4603      	mov	r3, r0
 8002a7c:	71fb      	strb	r3, [r7, #7]
	if (axis == 1){
 8002a7e:	79fb      	ldrb	r3, [r7, #7]
 8002a80:	2b01      	cmp	r3, #1
 8002a82:	d111      	bne.n	8002aa8 <voltageOnPrincipalAxis+0x34>
		setPhaseU(encCalib_pwmVal);
 8002a84:	4b42      	ldr	r3, [pc, #264]	; (8002b90 <voltageOnPrincipalAxis+0x11c>)
 8002a86:	881b      	ldrh	r3, [r3, #0]
 8002a88:	4618      	mov	r0, r3
 8002a8a:	f7ff ffa7 	bl	80029dc <setPhaseU>
		setPhaseV(0);
 8002a8e:	2000      	movs	r0, #0
 8002a90:	f7ff ffb6 	bl	8002a00 <setPhaseV>
		setPhaseW(0);
 8002a94:	2000      	movs	r0, #0
 8002a96:	f7ff ffc5 	bl	8002a24 <setPhaseW>
		HAL_Delay(encCalib_delayTime);
 8002a9a:	4b3e      	ldr	r3, [pc, #248]	; (8002b94 <voltageOnPrincipalAxis+0x120>)
 8002a9c:	881b      	ldrh	r3, [r3, #0]
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	f000 f8ea 	bl	8002c78 <HAL_Delay>
		TurnOffAllPhases();
 8002aa4:	f7ff ffd0 	bl	8002a48 <TurnOffAllPhases>
	}
	if (axis == 2){
 8002aa8:	79fb      	ldrb	r3, [r7, #7]
 8002aaa:	2b02      	cmp	r3, #2
 8002aac:	d113      	bne.n	8002ad6 <voltageOnPrincipalAxis+0x62>
		setPhaseU(encCalib_pwmVal);
 8002aae:	4b38      	ldr	r3, [pc, #224]	; (8002b90 <voltageOnPrincipalAxis+0x11c>)
 8002ab0:	881b      	ldrh	r3, [r3, #0]
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	f7ff ff92 	bl	80029dc <setPhaseU>
		setPhaseV(encCalib_pwmVal);
 8002ab8:	4b35      	ldr	r3, [pc, #212]	; (8002b90 <voltageOnPrincipalAxis+0x11c>)
 8002aba:	881b      	ldrh	r3, [r3, #0]
 8002abc:	4618      	mov	r0, r3
 8002abe:	f7ff ff9f 	bl	8002a00 <setPhaseV>
		setPhaseW(0);
 8002ac2:	2000      	movs	r0, #0
 8002ac4:	f7ff ffae 	bl	8002a24 <setPhaseW>
		HAL_Delay(encCalib_delayTime);
 8002ac8:	4b32      	ldr	r3, [pc, #200]	; (8002b94 <voltageOnPrincipalAxis+0x120>)
 8002aca:	881b      	ldrh	r3, [r3, #0]
 8002acc:	4618      	mov	r0, r3
 8002ace:	f000 f8d3 	bl	8002c78 <HAL_Delay>
		TurnOffAllPhases();
 8002ad2:	f7ff ffb9 	bl	8002a48 <TurnOffAllPhases>
	}
	if (axis == 3){
 8002ad6:	79fb      	ldrb	r3, [r7, #7]
 8002ad8:	2b03      	cmp	r3, #3
 8002ada:	d111      	bne.n	8002b00 <voltageOnPrincipalAxis+0x8c>
		setPhaseU(0);
 8002adc:	2000      	movs	r0, #0
 8002ade:	f7ff ff7d 	bl	80029dc <setPhaseU>
		setPhaseV(encCalib_pwmVal);
 8002ae2:	4b2b      	ldr	r3, [pc, #172]	; (8002b90 <voltageOnPrincipalAxis+0x11c>)
 8002ae4:	881b      	ldrh	r3, [r3, #0]
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	f7ff ff8a 	bl	8002a00 <setPhaseV>
		setPhaseW(0);
 8002aec:	2000      	movs	r0, #0
 8002aee:	f7ff ff99 	bl	8002a24 <setPhaseW>
		HAL_Delay(encCalib_delayTime);
 8002af2:	4b28      	ldr	r3, [pc, #160]	; (8002b94 <voltageOnPrincipalAxis+0x120>)
 8002af4:	881b      	ldrh	r3, [r3, #0]
 8002af6:	4618      	mov	r0, r3
 8002af8:	f000 f8be 	bl	8002c78 <HAL_Delay>
		TurnOffAllPhases();
 8002afc:	f7ff ffa4 	bl	8002a48 <TurnOffAllPhases>
	}
	if (axis == 4){
 8002b00:	79fb      	ldrb	r3, [r7, #7]
 8002b02:	2b04      	cmp	r3, #4
 8002b04:	d113      	bne.n	8002b2e <voltageOnPrincipalAxis+0xba>
		setPhaseU(0);
 8002b06:	2000      	movs	r0, #0
 8002b08:	f7ff ff68 	bl	80029dc <setPhaseU>
		setPhaseV(encCalib_pwmVal);
 8002b0c:	4b20      	ldr	r3, [pc, #128]	; (8002b90 <voltageOnPrincipalAxis+0x11c>)
 8002b0e:	881b      	ldrh	r3, [r3, #0]
 8002b10:	4618      	mov	r0, r3
 8002b12:	f7ff ff75 	bl	8002a00 <setPhaseV>
		setPhaseW(encCalib_pwmVal);
 8002b16:	4b1e      	ldr	r3, [pc, #120]	; (8002b90 <voltageOnPrincipalAxis+0x11c>)
 8002b18:	881b      	ldrh	r3, [r3, #0]
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	f7ff ff82 	bl	8002a24 <setPhaseW>
		HAL_Delay(encCalib_delayTime);
 8002b20:	4b1c      	ldr	r3, [pc, #112]	; (8002b94 <voltageOnPrincipalAxis+0x120>)
 8002b22:	881b      	ldrh	r3, [r3, #0]
 8002b24:	4618      	mov	r0, r3
 8002b26:	f000 f8a7 	bl	8002c78 <HAL_Delay>
		TurnOffAllPhases();
 8002b2a:	f7ff ff8d 	bl	8002a48 <TurnOffAllPhases>
	}
	if (axis == 5){
 8002b2e:	79fb      	ldrb	r3, [r7, #7]
 8002b30:	2b05      	cmp	r3, #5
 8002b32:	d111      	bne.n	8002b58 <voltageOnPrincipalAxis+0xe4>
		setPhaseU(0);
 8002b34:	2000      	movs	r0, #0
 8002b36:	f7ff ff51 	bl	80029dc <setPhaseU>
		setPhaseV(0);
 8002b3a:	2000      	movs	r0, #0
 8002b3c:	f7ff ff60 	bl	8002a00 <setPhaseV>
		setPhaseW(encCalib_pwmVal);
 8002b40:	4b13      	ldr	r3, [pc, #76]	; (8002b90 <voltageOnPrincipalAxis+0x11c>)
 8002b42:	881b      	ldrh	r3, [r3, #0]
 8002b44:	4618      	mov	r0, r3
 8002b46:	f7ff ff6d 	bl	8002a24 <setPhaseW>
		HAL_Delay(encCalib_delayTime);
 8002b4a:	4b12      	ldr	r3, [pc, #72]	; (8002b94 <voltageOnPrincipalAxis+0x120>)
 8002b4c:	881b      	ldrh	r3, [r3, #0]
 8002b4e:	4618      	mov	r0, r3
 8002b50:	f000 f892 	bl	8002c78 <HAL_Delay>
		TurnOffAllPhases();
 8002b54:	f7ff ff78 	bl	8002a48 <TurnOffAllPhases>
	}
	if (axis == 6){
 8002b58:	79fb      	ldrb	r3, [r7, #7]
 8002b5a:	2b06      	cmp	r3, #6
 8002b5c:	d113      	bne.n	8002b86 <voltageOnPrincipalAxis+0x112>
		setPhaseU(encCalib_pwmVal);
 8002b5e:	4b0c      	ldr	r3, [pc, #48]	; (8002b90 <voltageOnPrincipalAxis+0x11c>)
 8002b60:	881b      	ldrh	r3, [r3, #0]
 8002b62:	4618      	mov	r0, r3
 8002b64:	f7ff ff3a 	bl	80029dc <setPhaseU>
		setPhaseV(0);
 8002b68:	2000      	movs	r0, #0
 8002b6a:	f7ff ff49 	bl	8002a00 <setPhaseV>
		setPhaseW(encCalib_pwmVal);
 8002b6e:	4b08      	ldr	r3, [pc, #32]	; (8002b90 <voltageOnPrincipalAxis+0x11c>)
 8002b70:	881b      	ldrh	r3, [r3, #0]
 8002b72:	4618      	mov	r0, r3
 8002b74:	f7ff ff56 	bl	8002a24 <setPhaseW>
		HAL_Delay(encCalib_delayTime);
 8002b78:	4b06      	ldr	r3, [pc, #24]	; (8002b94 <voltageOnPrincipalAxis+0x120>)
 8002b7a:	881b      	ldrh	r3, [r3, #0]
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	f000 f87b 	bl	8002c78 <HAL_Delay>
		TurnOffAllPhases();
 8002b82:	f7ff ff61 	bl	8002a48 <TurnOffAllPhases>
	}
}
 8002b86:	bf00      	nop
 8002b88:	3708      	adds	r7, #8
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	bd80      	pop	{r7, pc}
 8002b8e:	bf00      	nop
 8002b90:	200004b6 	.word	0x200004b6
 8002b94:	200004b4 	.word	0x200004b4

08002b98 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b082      	sub	sp, #8
 8002b9c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002ba2:	2003      	movs	r0, #3
 8002ba4:	f001 fafc 	bl	80041a0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002ba8:	200f      	movs	r0, #15
 8002baa:	f000 f80d 	bl	8002bc8 <HAL_InitTick>
 8002bae:	4603      	mov	r3, r0
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d002      	beq.n	8002bba <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002bb4:	2301      	movs	r3, #1
 8002bb6:	71fb      	strb	r3, [r7, #7]
 8002bb8:	e001      	b.n	8002bbe <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002bba:	f7fe fe79 	bl	80018b0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002bbe:	79fb      	ldrb	r3, [r7, #7]

}
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	3708      	adds	r7, #8
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	bd80      	pop	{r7, pc}

08002bc8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b084      	sub	sp, #16
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8002bd4:	4b16      	ldr	r3, [pc, #88]	; (8002c30 <HAL_InitTick+0x68>)
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d022      	beq.n	8002c22 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8002bdc:	4b15      	ldr	r3, [pc, #84]	; (8002c34 <HAL_InitTick+0x6c>)
 8002bde:	681a      	ldr	r2, [r3, #0]
 8002be0:	4b13      	ldr	r3, [pc, #76]	; (8002c30 <HAL_InitTick+0x68>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002be8:	fbb1 f3f3 	udiv	r3, r1, r3
 8002bec:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	f001 fb08 	bl	8004206 <HAL_SYSTICK_Config>
 8002bf6:	4603      	mov	r3, r0
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d10f      	bne.n	8002c1c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2b0f      	cmp	r3, #15
 8002c00:	d809      	bhi.n	8002c16 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002c02:	2200      	movs	r2, #0
 8002c04:	6879      	ldr	r1, [r7, #4]
 8002c06:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002c0a:	f001 fad4 	bl	80041b6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002c0e:	4a0a      	ldr	r2, [pc, #40]	; (8002c38 <HAL_InitTick+0x70>)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	6013      	str	r3, [r2, #0]
 8002c14:	e007      	b.n	8002c26 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8002c16:	2301      	movs	r3, #1
 8002c18:	73fb      	strb	r3, [r7, #15]
 8002c1a:	e004      	b.n	8002c26 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002c1c:	2301      	movs	r3, #1
 8002c1e:	73fb      	strb	r3, [r7, #15]
 8002c20:	e001      	b.n	8002c26 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002c22:	2301      	movs	r3, #1
 8002c24:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002c26:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c28:	4618      	mov	r0, r3
 8002c2a:	3710      	adds	r7, #16
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	bd80      	pop	{r7, pc}
 8002c30:	20000008 	.word	0x20000008
 8002c34:	20000000 	.word	0x20000000
 8002c38:	20000004 	.word	0x20000004

08002c3c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002c3c:	b480      	push	{r7}
 8002c3e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002c40:	4b05      	ldr	r3, [pc, #20]	; (8002c58 <HAL_IncTick+0x1c>)
 8002c42:	681a      	ldr	r2, [r3, #0]
 8002c44:	4b05      	ldr	r3, [pc, #20]	; (8002c5c <HAL_IncTick+0x20>)
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	4413      	add	r3, r2
 8002c4a:	4a03      	ldr	r2, [pc, #12]	; (8002c58 <HAL_IncTick+0x1c>)
 8002c4c:	6013      	str	r3, [r2, #0]
}
 8002c4e:	bf00      	nop
 8002c50:	46bd      	mov	sp, r7
 8002c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c56:	4770      	bx	lr
 8002c58:	200004b8 	.word	0x200004b8
 8002c5c:	20000008 	.word	0x20000008

08002c60 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002c60:	b480      	push	{r7}
 8002c62:	af00      	add	r7, sp, #0
  return uwTick;
 8002c64:	4b03      	ldr	r3, [pc, #12]	; (8002c74 <HAL_GetTick+0x14>)
 8002c66:	681b      	ldr	r3, [r3, #0]
}
 8002c68:	4618      	mov	r0, r3
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c70:	4770      	bx	lr
 8002c72:	bf00      	nop
 8002c74:	200004b8 	.word	0x200004b8

08002c78 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b084      	sub	sp, #16
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002c80:	f7ff ffee 	bl	8002c60 <HAL_GetTick>
 8002c84:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002c90:	d004      	beq.n	8002c9c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8002c92:	4b09      	ldr	r3, [pc, #36]	; (8002cb8 <HAL_Delay+0x40>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	68fa      	ldr	r2, [r7, #12]
 8002c98:	4413      	add	r3, r2
 8002c9a:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002c9c:	bf00      	nop
 8002c9e:	f7ff ffdf 	bl	8002c60 <HAL_GetTick>
 8002ca2:	4602      	mov	r2, r0
 8002ca4:	68bb      	ldr	r3, [r7, #8]
 8002ca6:	1ad3      	subs	r3, r2, r3
 8002ca8:	68fa      	ldr	r2, [r7, #12]
 8002caa:	429a      	cmp	r2, r3
 8002cac:	d8f7      	bhi.n	8002c9e <HAL_Delay+0x26>
  {
  }
}
 8002cae:	bf00      	nop
 8002cb0:	bf00      	nop
 8002cb2:	3710      	adds	r7, #16
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	bd80      	pop	{r7, pc}
 8002cb8:	20000008 	.word	0x20000008

08002cbc <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002cbc:	b480      	push	{r7}
 8002cbe:	b083      	sub	sp, #12
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
 8002cc4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	689b      	ldr	r3, [r3, #8]
 8002cca:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002cce:	683b      	ldr	r3, [r7, #0]
 8002cd0:	431a      	orrs	r2, r3
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	609a      	str	r2, [r3, #8]
}
 8002cd6:	bf00      	nop
 8002cd8:	370c      	adds	r7, #12
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce0:	4770      	bx	lr

08002ce2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002ce2:	b480      	push	{r7}
 8002ce4:	b083      	sub	sp, #12
 8002ce6:	af00      	add	r7, sp, #0
 8002ce8:	6078      	str	r0, [r7, #4]
 8002cea:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	689b      	ldr	r3, [r3, #8]
 8002cf0:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	431a      	orrs	r2, r3
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	609a      	str	r2, [r3, #8]
}
 8002cfc:	bf00      	nop
 8002cfe:	370c      	adds	r7, #12
 8002d00:	46bd      	mov	sp, r7
 8002d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d06:	4770      	bx	lr

08002d08 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002d08:	b480      	push	{r7}
 8002d0a:	b083      	sub	sp, #12
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	689b      	ldr	r3, [r3, #8]
 8002d14:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002d18:	4618      	mov	r0, r3
 8002d1a:	370c      	adds	r7, #12
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d22:	4770      	bx	lr

08002d24 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002d24:	b480      	push	{r7}
 8002d26:	b087      	sub	sp, #28
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	60f8      	str	r0, [r7, #12]
 8002d2c:	60b9      	str	r1, [r7, #8]
 8002d2e:	607a      	str	r2, [r7, #4]
 8002d30:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	3360      	adds	r3, #96	; 0x60
 8002d36:	461a      	mov	r2, r3
 8002d38:	68bb      	ldr	r3, [r7, #8]
 8002d3a:	009b      	lsls	r3, r3, #2
 8002d3c:	4413      	add	r3, r2
 8002d3e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002d40:	697b      	ldr	r3, [r7, #20]
 8002d42:	681a      	ldr	r2, [r3, #0]
 8002d44:	4b08      	ldr	r3, [pc, #32]	; (8002d68 <LL_ADC_SetOffset+0x44>)
 8002d46:	4013      	ands	r3, r2
 8002d48:	687a      	ldr	r2, [r7, #4]
 8002d4a:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8002d4e:	683a      	ldr	r2, [r7, #0]
 8002d50:	430a      	orrs	r2, r1
 8002d52:	4313      	orrs	r3, r2
 8002d54:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002d58:	697b      	ldr	r3, [r7, #20]
 8002d5a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002d5c:	bf00      	nop
 8002d5e:	371c      	adds	r7, #28
 8002d60:	46bd      	mov	sp, r7
 8002d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d66:	4770      	bx	lr
 8002d68:	03fff000 	.word	0x03fff000

08002d6c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002d6c:	b480      	push	{r7}
 8002d6e:	b085      	sub	sp, #20
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
 8002d74:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	3360      	adds	r3, #96	; 0x60
 8002d7a:	461a      	mov	r2, r3
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	009b      	lsls	r3, r3, #2
 8002d80:	4413      	add	r3, r2
 8002d82:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	3714      	adds	r7, #20
 8002d90:	46bd      	mov	sp, r7
 8002d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d96:	4770      	bx	lr

08002d98 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002d98:	b480      	push	{r7}
 8002d9a:	b087      	sub	sp, #28
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	60f8      	str	r0, [r7, #12]
 8002da0:	60b9      	str	r1, [r7, #8]
 8002da2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	3360      	adds	r3, #96	; 0x60
 8002da8:	461a      	mov	r2, r3
 8002daa:	68bb      	ldr	r3, [r7, #8]
 8002dac:	009b      	lsls	r3, r3, #2
 8002dae:	4413      	add	r3, r2
 8002db0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002db2:	697b      	ldr	r3, [r7, #20]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	431a      	orrs	r2, r3
 8002dbe:	697b      	ldr	r3, [r7, #20]
 8002dc0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002dc2:	bf00      	nop
 8002dc4:	371c      	adds	r7, #28
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dcc:	4770      	bx	lr

08002dce <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8002dce:	b480      	push	{r7}
 8002dd0:	b087      	sub	sp, #28
 8002dd2:	af00      	add	r7, sp, #0
 8002dd4:	60f8      	str	r0, [r7, #12]
 8002dd6:	60b9      	str	r1, [r7, #8]
 8002dd8:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	3360      	adds	r3, #96	; 0x60
 8002dde:	461a      	mov	r2, r3
 8002de0:	68bb      	ldr	r3, [r7, #8]
 8002de2:	009b      	lsls	r3, r3, #2
 8002de4:	4413      	add	r3, r2
 8002de6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002de8:	697b      	ldr	r3, [r7, #20]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	431a      	orrs	r2, r3
 8002df4:	697b      	ldr	r3, [r7, #20]
 8002df6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8002df8:	bf00      	nop
 8002dfa:	371c      	adds	r7, #28
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e02:	4770      	bx	lr

08002e04 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8002e04:	b480      	push	{r7}
 8002e06:	b087      	sub	sp, #28
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	60f8      	str	r0, [r7, #12]
 8002e0c:	60b9      	str	r1, [r7, #8]
 8002e0e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	3360      	adds	r3, #96	; 0x60
 8002e14:	461a      	mov	r2, r3
 8002e16:	68bb      	ldr	r3, [r7, #8]
 8002e18:	009b      	lsls	r3, r3, #2
 8002e1a:	4413      	add	r3, r2
 8002e1c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002e1e:	697b      	ldr	r3, [r7, #20]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	431a      	orrs	r2, r3
 8002e2a:	697b      	ldr	r3, [r7, #20]
 8002e2c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8002e2e:	bf00      	nop
 8002e30:	371c      	adds	r7, #28
 8002e32:	46bd      	mov	sp, r7
 8002e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e38:	4770      	bx	lr

08002e3a <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8002e3a:	b480      	push	{r7}
 8002e3c:	b083      	sub	sp, #12
 8002e3e:	af00      	add	r7, sp, #0
 8002e40:	6078      	str	r0, [r7, #4]
 8002e42:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	695b      	ldr	r3, [r3, #20]
 8002e48:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	431a      	orrs	r2, r3
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	615a      	str	r2, [r3, #20]
}
 8002e54:	bf00      	nop
 8002e56:	370c      	adds	r7, #12
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5e:	4770      	bx	lr

08002e60 <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002e60:	b480      	push	{r7}
 8002e62:	b087      	sub	sp, #28
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	60f8      	str	r0, [r7, #12]
 8002e68:	60b9      	str	r1, [r7, #8]
 8002e6a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	3330      	adds	r3, #48	; 0x30
 8002e70:	461a      	mov	r2, r3
 8002e72:	68bb      	ldr	r3, [r7, #8]
 8002e74:	0a1b      	lsrs	r3, r3, #8
 8002e76:	009b      	lsls	r3, r3, #2
 8002e78:	f003 030c 	and.w	r3, r3, #12
 8002e7c:	4413      	add	r3, r2
 8002e7e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002e80:	697b      	ldr	r3, [r7, #20]
 8002e82:	681a      	ldr	r2, [r3, #0]
 8002e84:	68bb      	ldr	r3, [r7, #8]
 8002e86:	f003 031f 	and.w	r3, r3, #31
 8002e8a:	211f      	movs	r1, #31
 8002e8c:	fa01 f303 	lsl.w	r3, r1, r3
 8002e90:	43db      	mvns	r3, r3
 8002e92:	401a      	ands	r2, r3
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	0e9b      	lsrs	r3, r3, #26
 8002e98:	f003 011f 	and.w	r1, r3, #31
 8002e9c:	68bb      	ldr	r3, [r7, #8]
 8002e9e:	f003 031f 	and.w	r3, r3, #31
 8002ea2:	fa01 f303 	lsl.w	r3, r1, r3
 8002ea6:	431a      	orrs	r2, r3
 8002ea8:	697b      	ldr	r3, [r7, #20]
 8002eaa:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002eac:	bf00      	nop
 8002eae:	371c      	adds	r7, #28
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb6:	4770      	bx	lr

08002eb8 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002eb8:	b480      	push	{r7}
 8002eba:	b087      	sub	sp, #28
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	60f8      	str	r0, [r7, #12]
 8002ec0:	60b9      	str	r1, [r7, #8]
 8002ec2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	3314      	adds	r3, #20
 8002ec8:	461a      	mov	r2, r3
 8002eca:	68bb      	ldr	r3, [r7, #8]
 8002ecc:	0e5b      	lsrs	r3, r3, #25
 8002ece:	009b      	lsls	r3, r3, #2
 8002ed0:	f003 0304 	and.w	r3, r3, #4
 8002ed4:	4413      	add	r3, r2
 8002ed6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002ed8:	697b      	ldr	r3, [r7, #20]
 8002eda:	681a      	ldr	r2, [r3, #0]
 8002edc:	68bb      	ldr	r3, [r7, #8]
 8002ede:	0d1b      	lsrs	r3, r3, #20
 8002ee0:	f003 031f 	and.w	r3, r3, #31
 8002ee4:	2107      	movs	r1, #7
 8002ee6:	fa01 f303 	lsl.w	r3, r1, r3
 8002eea:	43db      	mvns	r3, r3
 8002eec:	401a      	ands	r2, r3
 8002eee:	68bb      	ldr	r3, [r7, #8]
 8002ef0:	0d1b      	lsrs	r3, r3, #20
 8002ef2:	f003 031f 	and.w	r3, r3, #31
 8002ef6:	6879      	ldr	r1, [r7, #4]
 8002ef8:	fa01 f303 	lsl.w	r3, r1, r3
 8002efc:	431a      	orrs	r2, r3
 8002efe:	697b      	ldr	r3, [r7, #20]
 8002f00:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002f02:	bf00      	nop
 8002f04:	371c      	adds	r7, #28
 8002f06:	46bd      	mov	sp, r7
 8002f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0c:	4770      	bx	lr
	...

08002f10 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002f10:	b480      	push	{r7}
 8002f12:	b085      	sub	sp, #20
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	60f8      	str	r0, [r7, #12]
 8002f18:	60b9      	str	r1, [r7, #8]
 8002f1a:	607a      	str	r2, [r7, #4]
  /* Bits for single or differential mode selection for each channel are set  */
  /* to 1 only when the differential mode is selected, and to 0 when the      */
  /* single mode is selected.                                                 */
  
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	4a0f      	ldr	r2, [pc, #60]	; (8002f5c <LL_ADC_SetChannelSingleDiff+0x4c>)
 8002f20:	4293      	cmp	r3, r2
 8002f22:	d10a      	bne.n	8002f3a <LL_ADC_SetChannelSingleDiff+0x2a>
  {
    SET_BIT(ADCx->DIFSEL,
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002f2a:	68bb      	ldr	r3, [r7, #8]
 8002f2c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f30:	431a      	orrs	r2, r3
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  else
  {
    CLEAR_BIT(ADCx->DIFSEL,
            Channel & ADC_SINGLEDIFF_CHANNEL_MASK);
  }
}
 8002f38:	e00a      	b.n	8002f50 <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002f40:	68bb      	ldr	r3, [r7, #8]
 8002f42:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f46:	43db      	mvns	r3, r3
 8002f48:	401a      	ands	r2, r3
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8002f50:	bf00      	nop
 8002f52:	3714      	adds	r7, #20
 8002f54:	46bd      	mov	sp, r7
 8002f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5a:	4770      	bx	lr
 8002f5c:	407f0000 	.word	0x407f0000

08002f60 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002f60:	b480      	push	{r7}
 8002f62:	b083      	sub	sp, #12
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	689b      	ldr	r3, [r3, #8]
 8002f6c:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8002f70:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002f74:	687a      	ldr	r2, [r7, #4]
 8002f76:	6093      	str	r3, [r2, #8]
}
 8002f78:	bf00      	nop
 8002f7a:	370c      	adds	r7, #12
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f82:	4770      	bx	lr

08002f84 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002f84:	b480      	push	{r7}
 8002f86:	b083      	sub	sp, #12
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	689b      	ldr	r3, [r3, #8]
 8002f90:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002f94:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002f98:	d101      	bne.n	8002f9e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002f9a:	2301      	movs	r3, #1
 8002f9c:	e000      	b.n	8002fa0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002f9e:	2300      	movs	r3, #0
}
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	370c      	adds	r7, #12
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002faa:	4770      	bx	lr

08002fac <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002fac:	b480      	push	{r7}
 8002fae:	b083      	sub	sp, #12
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	689b      	ldr	r3, [r3, #8]
 8002fb8:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002fbc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002fc0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002fc8:	bf00      	nop
 8002fca:	370c      	adds	r7, #12
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd2:	4770      	bx	lr

08002fd4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002fd4:	b480      	push	{r7}
 8002fd6:	b083      	sub	sp, #12
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	689b      	ldr	r3, [r3, #8]
 8002fe0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fe4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002fe8:	d101      	bne.n	8002fee <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002fea:	2301      	movs	r3, #1
 8002fec:	e000      	b.n	8002ff0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002fee:	2300      	movs	r3, #0
}
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	370c      	adds	r7, #12
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffa:	4770      	bx	lr

08002ffc <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002ffc:	b480      	push	{r7}
 8002ffe:	b083      	sub	sp, #12
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	689b      	ldr	r3, [r3, #8]
 8003008:	f003 0301 	and.w	r3, r3, #1
 800300c:	2b01      	cmp	r3, #1
 800300e:	d101      	bne.n	8003014 <LL_ADC_IsEnabled+0x18>
 8003010:	2301      	movs	r3, #1
 8003012:	e000      	b.n	8003016 <LL_ADC_IsEnabled+0x1a>
 8003014:	2300      	movs	r3, #0
}
 8003016:	4618      	mov	r0, r3
 8003018:	370c      	adds	r7, #12
 800301a:	46bd      	mov	sp, r7
 800301c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003020:	4770      	bx	lr

08003022 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003022:	b480      	push	{r7}
 8003024:	b083      	sub	sp, #12
 8003026:	af00      	add	r7, sp, #0
 8003028:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	689b      	ldr	r3, [r3, #8]
 800302e:	f003 0304 	and.w	r3, r3, #4
 8003032:	2b04      	cmp	r3, #4
 8003034:	d101      	bne.n	800303a <LL_ADC_REG_IsConversionOngoing+0x18>
 8003036:	2301      	movs	r3, #1
 8003038:	e000      	b.n	800303c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800303a:	2300      	movs	r3, #0
}
 800303c:	4618      	mov	r0, r3
 800303e:	370c      	adds	r7, #12
 8003040:	46bd      	mov	sp, r7
 8003042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003046:	4770      	bx	lr

08003048 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003048:	b480      	push	{r7}
 800304a:	b083      	sub	sp, #12
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	689b      	ldr	r3, [r3, #8]
 8003054:	f003 0308 	and.w	r3, r3, #8
 8003058:	2b08      	cmp	r3, #8
 800305a:	d101      	bne.n	8003060 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800305c:	2301      	movs	r3, #1
 800305e:	e000      	b.n	8003062 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003060:	2300      	movs	r3, #0
}
 8003062:	4618      	mov	r0, r3
 8003064:	370c      	adds	r7, #12
 8003066:	46bd      	mov	sp, r7
 8003068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306c:	4770      	bx	lr
	...

08003070 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003070:	b590      	push	{r4, r7, lr}
 8003072:	b089      	sub	sp, #36	; 0x24
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003078:	2300      	movs	r3, #0
 800307a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800307c:	2300      	movs	r3, #0
 800307e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2b00      	cmp	r3, #0
 8003084:	d101      	bne.n	800308a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8003086:	2301      	movs	r3, #1
 8003088:	e177      	b.n	800337a <HAL_ADC_Init+0x30a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	695b      	ldr	r3, [r3, #20]
 800308e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003094:	2b00      	cmp	r3, #0
 8003096:	d109      	bne.n	80030ac <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003098:	6878      	ldr	r0, [r7, #4]
 800309a:	f7fe fc2d 	bl	80018f8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	2200      	movs	r2, #0
 80030a2:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2200      	movs	r2, #0
 80030a8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	4618      	mov	r0, r3
 80030b2:	f7ff ff67 	bl	8002f84 <LL_ADC_IsDeepPowerDownEnabled>
 80030b6:	4603      	mov	r3, r0
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d004      	beq.n	80030c6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	4618      	mov	r0, r3
 80030c2:	f7ff ff4d 	bl	8002f60 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	4618      	mov	r0, r3
 80030cc:	f7ff ff82 	bl	8002fd4 <LL_ADC_IsInternalRegulatorEnabled>
 80030d0:	4603      	mov	r3, r0
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d115      	bne.n	8003102 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	4618      	mov	r0, r3
 80030dc:	f7ff ff66 	bl	8002fac <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80030e0:	4b9c      	ldr	r3, [pc, #624]	; (8003354 <HAL_ADC_Init+0x2e4>)
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	099b      	lsrs	r3, r3, #6
 80030e6:	4a9c      	ldr	r2, [pc, #624]	; (8003358 <HAL_ADC_Init+0x2e8>)
 80030e8:	fba2 2303 	umull	r2, r3, r2, r3
 80030ec:	099b      	lsrs	r3, r3, #6
 80030ee:	3301      	adds	r3, #1
 80030f0:	005b      	lsls	r3, r3, #1
 80030f2:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80030f4:	e002      	b.n	80030fc <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80030f6:	68bb      	ldr	r3, [r7, #8]
 80030f8:	3b01      	subs	r3, #1
 80030fa:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80030fc:	68bb      	ldr	r3, [r7, #8]
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d1f9      	bne.n	80030f6 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	4618      	mov	r0, r3
 8003108:	f7ff ff64 	bl	8002fd4 <LL_ADC_IsInternalRegulatorEnabled>
 800310c:	4603      	mov	r3, r0
 800310e:	2b00      	cmp	r3, #0
 8003110:	d10d      	bne.n	800312e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003116:	f043 0210 	orr.w	r2, r3, #16
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003122:	f043 0201 	orr.w	r2, r3, #1
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 800312a:	2301      	movs	r3, #1
 800312c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	4618      	mov	r0, r3
 8003134:	f7ff ff75 	bl	8003022 <LL_ADC_REG_IsConversionOngoing>
 8003138:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800313e:	f003 0310 	and.w	r3, r3, #16
 8003142:	2b00      	cmp	r3, #0
 8003144:	f040 8110 	bne.w	8003368 <HAL_ADC_Init+0x2f8>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003148:	697b      	ldr	r3, [r7, #20]
 800314a:	2b00      	cmp	r3, #0
 800314c:	f040 810c 	bne.w	8003368 <HAL_ADC_Init+0x2f8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003154:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8003158:	f043 0202 	orr.w	r2, r3, #2
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	4618      	mov	r0, r3
 8003166:	f7ff ff49 	bl	8002ffc <LL_ADC_IsEnabled>
 800316a:	4603      	mov	r3, r0
 800316c:	2b00      	cmp	r3, #0
 800316e:	d111      	bne.n	8003194 <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003170:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8003174:	f7ff ff42 	bl	8002ffc <LL_ADC_IsEnabled>
 8003178:	4604      	mov	r4, r0
 800317a:	4878      	ldr	r0, [pc, #480]	; (800335c <HAL_ADC_Init+0x2ec>)
 800317c:	f7ff ff3e 	bl	8002ffc <LL_ADC_IsEnabled>
 8003180:	4603      	mov	r3, r0
 8003182:	4323      	orrs	r3, r4
 8003184:	2b00      	cmp	r3, #0
 8003186:	d105      	bne.n	8003194 <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	685b      	ldr	r3, [r3, #4]
 800318c:	4619      	mov	r1, r3
 800318e:	4874      	ldr	r0, [pc, #464]	; (8003360 <HAL_ADC_Init+0x2f0>)
 8003190:	f7ff fd94 	bl	8002cbc <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	7f5b      	ldrb	r3, [r3, #29]
 8003198:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800319e:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80031a4:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80031aa:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80031b2:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80031b4:	4313      	orrs	r3, r2
 80031b6:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80031be:	2b01      	cmp	r3, #1
 80031c0:	d106      	bne.n	80031d0 <HAL_ADC_Init+0x160>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031c6:	3b01      	subs	r3, #1
 80031c8:	045b      	lsls	r3, r3, #17
 80031ca:	69ba      	ldr	r2, [r7, #24]
 80031cc:	4313      	orrs	r3, r2
 80031ce:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d009      	beq.n	80031ec <HAL_ADC_Init+0x17c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031dc:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031e4:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80031e6:	69ba      	ldr	r2, [r7, #24]
 80031e8:	4313      	orrs	r3, r2
 80031ea:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	68da      	ldr	r2, [r3, #12]
 80031f2:	4b5c      	ldr	r3, [pc, #368]	; (8003364 <HAL_ADC_Init+0x2f4>)
 80031f4:	4013      	ands	r3, r2
 80031f6:	687a      	ldr	r2, [r7, #4]
 80031f8:	6812      	ldr	r2, [r2, #0]
 80031fa:	69b9      	ldr	r1, [r7, #24]
 80031fc:	430b      	orrs	r3, r1
 80031fe:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	691b      	ldr	r3, [r3, #16]
 8003206:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	430a      	orrs	r2, r1
 8003214:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	4618      	mov	r0, r3
 800321c:	f7ff ff01 	bl	8003022 <LL_ADC_REG_IsConversionOngoing>
 8003220:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	4618      	mov	r0, r3
 8003228:	f7ff ff0e 	bl	8003048 <LL_ADC_INJ_IsConversionOngoing>
 800322c:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800322e:	693b      	ldr	r3, [r7, #16]
 8003230:	2b00      	cmp	r3, #0
 8003232:	d16d      	bne.n	8003310 <HAL_ADC_Init+0x2a0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	2b00      	cmp	r3, #0
 8003238:	d16a      	bne.n	8003310 <HAL_ADC_Init+0x2a0>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800323e:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003246:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8003248:	4313      	orrs	r3, r2
 800324a:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	68db      	ldr	r3, [r3, #12]
 8003252:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003256:	f023 0302 	bic.w	r3, r3, #2
 800325a:	687a      	ldr	r2, [r7, #4]
 800325c:	6812      	ldr	r2, [r2, #0]
 800325e:	69b9      	ldr	r1, [r7, #24]
 8003260:	430b      	orrs	r3, r1
 8003262:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	691b      	ldr	r3, [r3, #16]
 8003268:	2b00      	cmp	r3, #0
 800326a:	d017      	beq.n	800329c <HAL_ADC_Init+0x22c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	691a      	ldr	r2, [r3, #16]
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800327a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8003284:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003288:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800328c:	687a      	ldr	r2, [r7, #4]
 800328e:	6911      	ldr	r1, [r2, #16]
 8003290:	687a      	ldr	r2, [r7, #4]
 8003292:	6812      	ldr	r2, [r2, #0]
 8003294:	430b      	orrs	r3, r1
 8003296:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 800329a:	e013      	b.n	80032c4 <HAL_ADC_Init+0x254>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	691a      	ldr	r2, [r3, #16]
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80032aa:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80032b4:	687a      	ldr	r2, [r7, #4]
 80032b6:	6812      	ldr	r2, [r2, #0]
 80032b8:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80032bc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80032c0:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80032ca:	2b01      	cmp	r3, #1
 80032cc:	d118      	bne.n	8003300 <HAL_ADC_Init+0x290>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	691b      	ldr	r3, [r3, #16]
 80032d4:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80032d8:	f023 0304 	bic.w	r3, r3, #4
 80032dc:	687a      	ldr	r2, [r7, #4]
 80032de:	6c51      	ldr	r1, [r2, #68]	; 0x44
 80032e0:	687a      	ldr	r2, [r7, #4]
 80032e2:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80032e4:	4311      	orrs	r1, r2
 80032e6:	687a      	ldr	r2, [r7, #4]
 80032e8:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80032ea:	4311      	orrs	r1, r2
 80032ec:	687a      	ldr	r2, [r7, #4]
 80032ee:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80032f0:	430a      	orrs	r2, r1
 80032f2:	431a      	orrs	r2, r3
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f042 0201 	orr.w	r2, r2, #1
 80032fc:	611a      	str	r2, [r3, #16]
 80032fe:	e007      	b.n	8003310 <HAL_ADC_Init+0x2a0>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	691a      	ldr	r2, [r3, #16]
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f022 0201 	bic.w	r2, r2, #1
 800330e:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	695b      	ldr	r3, [r3, #20]
 8003314:	2b01      	cmp	r3, #1
 8003316:	d10c      	bne.n	8003332 <HAL_ADC_Init+0x2c2>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800331e:	f023 010f 	bic.w	r1, r3, #15
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6a1b      	ldr	r3, [r3, #32]
 8003326:	1e5a      	subs	r2, r3, #1
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	430a      	orrs	r2, r1
 800332e:	631a      	str	r2, [r3, #48]	; 0x30
 8003330:	e007      	b.n	8003342 <HAL_ADC_Init+0x2d2>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f022 020f 	bic.w	r2, r2, #15
 8003340:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003346:	f023 0303 	bic.w	r3, r3, #3
 800334a:	f043 0201 	orr.w	r2, r3, #1
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	65da      	str	r2, [r3, #92]	; 0x5c
 8003352:	e011      	b.n	8003378 <HAL_ADC_Init+0x308>
 8003354:	20000000 	.word	0x20000000
 8003358:	053e2d63 	.word	0x053e2d63
 800335c:	50000100 	.word	0x50000100
 8003360:	50000300 	.word	0x50000300
 8003364:	fff04007 	.word	0xfff04007
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800336c:	f043 0210 	orr.w	r2, r3, #16
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003374:	2301      	movs	r3, #1
 8003376:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003378:	7ffb      	ldrb	r3, [r7, #31]
}
 800337a:	4618      	mov	r0, r3
 800337c:	3724      	adds	r7, #36	; 0x24
 800337e:	46bd      	mov	sp, r7
 8003380:	bd90      	pop	{r4, r7, pc}
 8003382:	bf00      	nop

08003384 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003384:	b580      	push	{r7, lr}
 8003386:	b0b6      	sub	sp, #216	; 0xd8
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
 800338c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800338e:	2300      	movs	r3, #0
 8003390:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003394:	2300      	movs	r3, #0
 8003396:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800339e:	2b01      	cmp	r3, #1
 80033a0:	d101      	bne.n	80033a6 <HAL_ADC_ConfigChannel+0x22>
 80033a2:	2302      	movs	r3, #2
 80033a4:	e3c8      	b.n	8003b38 <HAL_ADC_ConfigChannel+0x7b4>
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	2201      	movs	r2, #1
 80033aa:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	4618      	mov	r0, r3
 80033b4:	f7ff fe35 	bl	8003022 <LL_ADC_REG_IsConversionOngoing>
 80033b8:	4603      	mov	r3, r0
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	f040 83ad 	bne.w	8003b1a <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6818      	ldr	r0, [r3, #0]
 80033c4:	683b      	ldr	r3, [r7, #0]
 80033c6:	6859      	ldr	r1, [r3, #4]
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	461a      	mov	r2, r3
 80033ce:	f7ff fd47 	bl	8002e60 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	4618      	mov	r0, r3
 80033d8:	f7ff fe23 	bl	8003022 <LL_ADC_REG_IsConversionOngoing>
 80033dc:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	4618      	mov	r0, r3
 80033e6:	f7ff fe2f 	bl	8003048 <LL_ADC_INJ_IsConversionOngoing>
 80033ea:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80033ee:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	f040 81d9 	bne.w	80037aa <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80033f8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	f040 81d4 	bne.w	80037aa <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8003402:	683b      	ldr	r3, [r7, #0]
 8003404:	689b      	ldr	r3, [r3, #8]
 8003406:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800340a:	d10f      	bne.n	800342c <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6818      	ldr	r0, [r3, #0]
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	2200      	movs	r2, #0
 8003416:	4619      	mov	r1, r3
 8003418:	f7ff fd4e 	bl	8002eb8 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8003424:	4618      	mov	r0, r3
 8003426:	f7ff fd08 	bl	8002e3a <LL_ADC_SetSamplingTimeCommonConfig>
 800342a:	e00e      	b.n	800344a <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6818      	ldr	r0, [r3, #0]
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	6819      	ldr	r1, [r3, #0]
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	689b      	ldr	r3, [r3, #8]
 8003438:	461a      	mov	r2, r3
 800343a:	f7ff fd3d 	bl	8002eb8 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	2100      	movs	r1, #0
 8003444:	4618      	mov	r0, r3
 8003446:	f7ff fcf8 	bl	8002e3a <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800344a:	683b      	ldr	r3, [r7, #0]
 800344c:	695a      	ldr	r2, [r3, #20]
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	68db      	ldr	r3, [r3, #12]
 8003454:	08db      	lsrs	r3, r3, #3
 8003456:	f003 0303 	and.w	r3, r3, #3
 800345a:	005b      	lsls	r3, r3, #1
 800345c:	fa02 f303 	lsl.w	r3, r2, r3
 8003460:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	691b      	ldr	r3, [r3, #16]
 8003468:	2b04      	cmp	r3, #4
 800346a:	d022      	beq.n	80034b2 <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	6818      	ldr	r0, [r3, #0]
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	6919      	ldr	r1, [r3, #16]
 8003474:	683b      	ldr	r3, [r7, #0]
 8003476:	681a      	ldr	r2, [r3, #0]
 8003478:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800347c:	f7ff fc52 	bl	8002d24 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	6818      	ldr	r0, [r3, #0]
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	6919      	ldr	r1, [r3, #16]
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	699b      	ldr	r3, [r3, #24]
 800348c:	461a      	mov	r2, r3
 800348e:	f7ff fc9e 	bl	8002dce <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6818      	ldr	r0, [r3, #0]
 8003496:	683b      	ldr	r3, [r7, #0]
 8003498:	6919      	ldr	r1, [r3, #16]
 800349a:	683b      	ldr	r3, [r7, #0]
 800349c:	7f1b      	ldrb	r3, [r3, #28]
 800349e:	2b01      	cmp	r3, #1
 80034a0:	d102      	bne.n	80034a8 <HAL_ADC_ConfigChannel+0x124>
 80034a2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80034a6:	e000      	b.n	80034aa <HAL_ADC_ConfigChannel+0x126>
 80034a8:	2300      	movs	r3, #0
 80034aa:	461a      	mov	r2, r3
 80034ac:	f7ff fcaa 	bl	8002e04 <LL_ADC_SetOffsetSaturation>
 80034b0:	e17b      	b.n	80037aa <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	2100      	movs	r1, #0
 80034b8:	4618      	mov	r0, r3
 80034ba:	f7ff fc57 	bl	8002d6c <LL_ADC_GetOffsetChannel>
 80034be:	4603      	mov	r3, r0
 80034c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d10a      	bne.n	80034de <HAL_ADC_ConfigChannel+0x15a>
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	2100      	movs	r1, #0
 80034ce:	4618      	mov	r0, r3
 80034d0:	f7ff fc4c 	bl	8002d6c <LL_ADC_GetOffsetChannel>
 80034d4:	4603      	mov	r3, r0
 80034d6:	0e9b      	lsrs	r3, r3, #26
 80034d8:	f003 021f 	and.w	r2, r3, #31
 80034dc:	e01e      	b.n	800351c <HAL_ADC_ConfigChannel+0x198>
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	2100      	movs	r1, #0
 80034e4:	4618      	mov	r0, r3
 80034e6:	f7ff fc41 	bl	8002d6c <LL_ADC_GetOffsetChannel>
 80034ea:	4603      	mov	r3, r0
 80034ec:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034f0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80034f4:	fa93 f3a3 	rbit	r3, r3
 80034f8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80034fc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003500:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003504:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003508:	2b00      	cmp	r3, #0
 800350a:	d101      	bne.n	8003510 <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 800350c:	2320      	movs	r3, #32
 800350e:	e004      	b.n	800351a <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 8003510:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003514:	fab3 f383 	clz	r3, r3
 8003518:	b2db      	uxtb	r3, r3
 800351a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003524:	2b00      	cmp	r3, #0
 8003526:	d105      	bne.n	8003534 <HAL_ADC_ConfigChannel+0x1b0>
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	0e9b      	lsrs	r3, r3, #26
 800352e:	f003 031f 	and.w	r3, r3, #31
 8003532:	e018      	b.n	8003566 <HAL_ADC_ConfigChannel+0x1e2>
 8003534:	683b      	ldr	r3, [r7, #0]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800353c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003540:	fa93 f3a3 	rbit	r3, r3
 8003544:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8003548:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800354c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8003550:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003554:	2b00      	cmp	r3, #0
 8003556:	d101      	bne.n	800355c <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 8003558:	2320      	movs	r3, #32
 800355a:	e004      	b.n	8003566 <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 800355c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003560:	fab3 f383 	clz	r3, r3
 8003564:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003566:	429a      	cmp	r2, r3
 8003568:	d106      	bne.n	8003578 <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	2200      	movs	r2, #0
 8003570:	2100      	movs	r1, #0
 8003572:	4618      	mov	r0, r3
 8003574:	f7ff fc10 	bl	8002d98 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	2101      	movs	r1, #1
 800357e:	4618      	mov	r0, r3
 8003580:	f7ff fbf4 	bl	8002d6c <LL_ADC_GetOffsetChannel>
 8003584:	4603      	mov	r3, r0
 8003586:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800358a:	2b00      	cmp	r3, #0
 800358c:	d10a      	bne.n	80035a4 <HAL_ADC_ConfigChannel+0x220>
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	2101      	movs	r1, #1
 8003594:	4618      	mov	r0, r3
 8003596:	f7ff fbe9 	bl	8002d6c <LL_ADC_GetOffsetChannel>
 800359a:	4603      	mov	r3, r0
 800359c:	0e9b      	lsrs	r3, r3, #26
 800359e:	f003 021f 	and.w	r2, r3, #31
 80035a2:	e01e      	b.n	80035e2 <HAL_ADC_ConfigChannel+0x25e>
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	2101      	movs	r1, #1
 80035aa:	4618      	mov	r0, r3
 80035ac:	f7ff fbde 	bl	8002d6c <LL_ADC_GetOffsetChannel>
 80035b0:	4603      	mov	r3, r0
 80035b2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035b6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80035ba:	fa93 f3a3 	rbit	r3, r3
 80035be:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80035c2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80035c6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80035ca:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d101      	bne.n	80035d6 <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 80035d2:	2320      	movs	r3, #32
 80035d4:	e004      	b.n	80035e0 <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 80035d6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80035da:	fab3 f383 	clz	r3, r3
 80035de:	b2db      	uxtb	r3, r3
 80035e0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80035e2:	683b      	ldr	r3, [r7, #0]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d105      	bne.n	80035fa <HAL_ADC_ConfigChannel+0x276>
 80035ee:	683b      	ldr	r3, [r7, #0]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	0e9b      	lsrs	r3, r3, #26
 80035f4:	f003 031f 	and.w	r3, r3, #31
 80035f8:	e018      	b.n	800362c <HAL_ADC_ConfigChannel+0x2a8>
 80035fa:	683b      	ldr	r3, [r7, #0]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003602:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003606:	fa93 f3a3 	rbit	r3, r3
 800360a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 800360e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003612:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8003616:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800361a:	2b00      	cmp	r3, #0
 800361c:	d101      	bne.n	8003622 <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 800361e:	2320      	movs	r3, #32
 8003620:	e004      	b.n	800362c <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 8003622:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003626:	fab3 f383 	clz	r3, r3
 800362a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800362c:	429a      	cmp	r2, r3
 800362e:	d106      	bne.n	800363e <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	2200      	movs	r2, #0
 8003636:	2101      	movs	r1, #1
 8003638:	4618      	mov	r0, r3
 800363a:	f7ff fbad 	bl	8002d98 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	2102      	movs	r1, #2
 8003644:	4618      	mov	r0, r3
 8003646:	f7ff fb91 	bl	8002d6c <LL_ADC_GetOffsetChannel>
 800364a:	4603      	mov	r3, r0
 800364c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003650:	2b00      	cmp	r3, #0
 8003652:	d10a      	bne.n	800366a <HAL_ADC_ConfigChannel+0x2e6>
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	2102      	movs	r1, #2
 800365a:	4618      	mov	r0, r3
 800365c:	f7ff fb86 	bl	8002d6c <LL_ADC_GetOffsetChannel>
 8003660:	4603      	mov	r3, r0
 8003662:	0e9b      	lsrs	r3, r3, #26
 8003664:	f003 021f 	and.w	r2, r3, #31
 8003668:	e01e      	b.n	80036a8 <HAL_ADC_ConfigChannel+0x324>
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	2102      	movs	r1, #2
 8003670:	4618      	mov	r0, r3
 8003672:	f7ff fb7b 	bl	8002d6c <LL_ADC_GetOffsetChannel>
 8003676:	4603      	mov	r3, r0
 8003678:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800367c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003680:	fa93 f3a3 	rbit	r3, r3
 8003684:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8003688:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800368c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8003690:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003694:	2b00      	cmp	r3, #0
 8003696:	d101      	bne.n	800369c <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 8003698:	2320      	movs	r3, #32
 800369a:	e004      	b.n	80036a6 <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 800369c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80036a0:	fab3 f383 	clz	r3, r3
 80036a4:	b2db      	uxtb	r3, r3
 80036a6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80036a8:	683b      	ldr	r3, [r7, #0]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d105      	bne.n	80036c0 <HAL_ADC_ConfigChannel+0x33c>
 80036b4:	683b      	ldr	r3, [r7, #0]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	0e9b      	lsrs	r3, r3, #26
 80036ba:	f003 031f 	and.w	r3, r3, #31
 80036be:	e016      	b.n	80036ee <HAL_ADC_ConfigChannel+0x36a>
 80036c0:	683b      	ldr	r3, [r7, #0]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036c8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80036cc:	fa93 f3a3 	rbit	r3, r3
 80036d0:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80036d2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80036d4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80036d8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d101      	bne.n	80036e4 <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 80036e0:	2320      	movs	r3, #32
 80036e2:	e004      	b.n	80036ee <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 80036e4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80036e8:	fab3 f383 	clz	r3, r3
 80036ec:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80036ee:	429a      	cmp	r2, r3
 80036f0:	d106      	bne.n	8003700 <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	2200      	movs	r2, #0
 80036f8:	2102      	movs	r1, #2
 80036fa:	4618      	mov	r0, r3
 80036fc:	f7ff fb4c 	bl	8002d98 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	2103      	movs	r1, #3
 8003706:	4618      	mov	r0, r3
 8003708:	f7ff fb30 	bl	8002d6c <LL_ADC_GetOffsetChannel>
 800370c:	4603      	mov	r3, r0
 800370e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003712:	2b00      	cmp	r3, #0
 8003714:	d10a      	bne.n	800372c <HAL_ADC_ConfigChannel+0x3a8>
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	2103      	movs	r1, #3
 800371c:	4618      	mov	r0, r3
 800371e:	f7ff fb25 	bl	8002d6c <LL_ADC_GetOffsetChannel>
 8003722:	4603      	mov	r3, r0
 8003724:	0e9b      	lsrs	r3, r3, #26
 8003726:	f003 021f 	and.w	r2, r3, #31
 800372a:	e017      	b.n	800375c <HAL_ADC_ConfigChannel+0x3d8>
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	2103      	movs	r1, #3
 8003732:	4618      	mov	r0, r3
 8003734:	f7ff fb1a 	bl	8002d6c <LL_ADC_GetOffsetChannel>
 8003738:	4603      	mov	r3, r0
 800373a:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800373c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800373e:	fa93 f3a3 	rbit	r3, r3
 8003742:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8003744:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003746:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8003748:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800374a:	2b00      	cmp	r3, #0
 800374c:	d101      	bne.n	8003752 <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 800374e:	2320      	movs	r3, #32
 8003750:	e003      	b.n	800375a <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 8003752:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003754:	fab3 f383 	clz	r3, r3
 8003758:	b2db      	uxtb	r3, r3
 800375a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003764:	2b00      	cmp	r3, #0
 8003766:	d105      	bne.n	8003774 <HAL_ADC_ConfigChannel+0x3f0>
 8003768:	683b      	ldr	r3, [r7, #0]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	0e9b      	lsrs	r3, r3, #26
 800376e:	f003 031f 	and.w	r3, r3, #31
 8003772:	e011      	b.n	8003798 <HAL_ADC_ConfigChannel+0x414>
 8003774:	683b      	ldr	r3, [r7, #0]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800377a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800377c:	fa93 f3a3 	rbit	r3, r3
 8003780:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8003782:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003784:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8003786:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003788:	2b00      	cmp	r3, #0
 800378a:	d101      	bne.n	8003790 <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 800378c:	2320      	movs	r3, #32
 800378e:	e003      	b.n	8003798 <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 8003790:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003792:	fab3 f383 	clz	r3, r3
 8003796:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003798:	429a      	cmp	r2, r3
 800379a:	d106      	bne.n	80037aa <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	2200      	movs	r2, #0
 80037a2:	2103      	movs	r1, #3
 80037a4:	4618      	mov	r0, r3
 80037a6:	f7ff faf7 	bl	8002d98 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	4618      	mov	r0, r3
 80037b0:	f7ff fc24 	bl	8002ffc <LL_ADC_IsEnabled>
 80037b4:	4603      	mov	r3, r0
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	f040 8140 	bne.w	8003a3c <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6818      	ldr	r0, [r3, #0]
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	6819      	ldr	r1, [r3, #0]
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	68db      	ldr	r3, [r3, #12]
 80037c8:	461a      	mov	r2, r3
 80037ca:	f7ff fba1 	bl	8002f10 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80037ce:	683b      	ldr	r3, [r7, #0]
 80037d0:	68db      	ldr	r3, [r3, #12]
 80037d2:	4a8f      	ldr	r2, [pc, #572]	; (8003a10 <HAL_ADC_ConfigChannel+0x68c>)
 80037d4:	4293      	cmp	r3, r2
 80037d6:	f040 8131 	bne.w	8003a3c <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80037de:	683b      	ldr	r3, [r7, #0]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d10b      	bne.n	8003802 <HAL_ADC_ConfigChannel+0x47e>
 80037ea:	683b      	ldr	r3, [r7, #0]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	0e9b      	lsrs	r3, r3, #26
 80037f0:	3301      	adds	r3, #1
 80037f2:	f003 031f 	and.w	r3, r3, #31
 80037f6:	2b09      	cmp	r3, #9
 80037f8:	bf94      	ite	ls
 80037fa:	2301      	movls	r3, #1
 80037fc:	2300      	movhi	r3, #0
 80037fe:	b2db      	uxtb	r3, r3
 8003800:	e019      	b.n	8003836 <HAL_ADC_ConfigChannel+0x4b2>
 8003802:	683b      	ldr	r3, [r7, #0]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003808:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800380a:	fa93 f3a3 	rbit	r3, r3
 800380e:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8003810:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003812:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8003814:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003816:	2b00      	cmp	r3, #0
 8003818:	d101      	bne.n	800381e <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 800381a:	2320      	movs	r3, #32
 800381c:	e003      	b.n	8003826 <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 800381e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003820:	fab3 f383 	clz	r3, r3
 8003824:	b2db      	uxtb	r3, r3
 8003826:	3301      	adds	r3, #1
 8003828:	f003 031f 	and.w	r3, r3, #31
 800382c:	2b09      	cmp	r3, #9
 800382e:	bf94      	ite	ls
 8003830:	2301      	movls	r3, #1
 8003832:	2300      	movhi	r3, #0
 8003834:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003836:	2b00      	cmp	r3, #0
 8003838:	d079      	beq.n	800392e <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800383a:	683b      	ldr	r3, [r7, #0]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003842:	2b00      	cmp	r3, #0
 8003844:	d107      	bne.n	8003856 <HAL_ADC_ConfigChannel+0x4d2>
 8003846:	683b      	ldr	r3, [r7, #0]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	0e9b      	lsrs	r3, r3, #26
 800384c:	3301      	adds	r3, #1
 800384e:	069b      	lsls	r3, r3, #26
 8003850:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003854:	e015      	b.n	8003882 <HAL_ADC_ConfigChannel+0x4fe>
 8003856:	683b      	ldr	r3, [r7, #0]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800385c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800385e:	fa93 f3a3 	rbit	r3, r3
 8003862:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003864:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003866:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8003868:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800386a:	2b00      	cmp	r3, #0
 800386c:	d101      	bne.n	8003872 <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 800386e:	2320      	movs	r3, #32
 8003870:	e003      	b.n	800387a <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 8003872:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003874:	fab3 f383 	clz	r3, r3
 8003878:	b2db      	uxtb	r3, r3
 800387a:	3301      	adds	r3, #1
 800387c:	069b      	lsls	r3, r3, #26
 800387e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003882:	683b      	ldr	r3, [r7, #0]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800388a:	2b00      	cmp	r3, #0
 800388c:	d109      	bne.n	80038a2 <HAL_ADC_ConfigChannel+0x51e>
 800388e:	683b      	ldr	r3, [r7, #0]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	0e9b      	lsrs	r3, r3, #26
 8003894:	3301      	adds	r3, #1
 8003896:	f003 031f 	and.w	r3, r3, #31
 800389a:	2101      	movs	r1, #1
 800389c:	fa01 f303 	lsl.w	r3, r1, r3
 80038a0:	e017      	b.n	80038d2 <HAL_ADC_ConfigChannel+0x54e>
 80038a2:	683b      	ldr	r3, [r7, #0]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80038aa:	fa93 f3a3 	rbit	r3, r3
 80038ae:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 80038b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80038b2:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 80038b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d101      	bne.n	80038be <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 80038ba:	2320      	movs	r3, #32
 80038bc:	e003      	b.n	80038c6 <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 80038be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80038c0:	fab3 f383 	clz	r3, r3
 80038c4:	b2db      	uxtb	r3, r3
 80038c6:	3301      	adds	r3, #1
 80038c8:	f003 031f 	and.w	r3, r3, #31
 80038cc:	2101      	movs	r1, #1
 80038ce:	fa01 f303 	lsl.w	r3, r1, r3
 80038d2:	ea42 0103 	orr.w	r1, r2, r3
 80038d6:	683b      	ldr	r3, [r7, #0]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d10a      	bne.n	80038f8 <HAL_ADC_ConfigChannel+0x574>
 80038e2:	683b      	ldr	r3, [r7, #0]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	0e9b      	lsrs	r3, r3, #26
 80038e8:	3301      	adds	r3, #1
 80038ea:	f003 021f 	and.w	r2, r3, #31
 80038ee:	4613      	mov	r3, r2
 80038f0:	005b      	lsls	r3, r3, #1
 80038f2:	4413      	add	r3, r2
 80038f4:	051b      	lsls	r3, r3, #20
 80038f6:	e018      	b.n	800392a <HAL_ADC_ConfigChannel+0x5a6>
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003900:	fa93 f3a3 	rbit	r3, r3
 8003904:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003906:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003908:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 800390a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800390c:	2b00      	cmp	r3, #0
 800390e:	d101      	bne.n	8003914 <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 8003910:	2320      	movs	r3, #32
 8003912:	e003      	b.n	800391c <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 8003914:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003916:	fab3 f383 	clz	r3, r3
 800391a:	b2db      	uxtb	r3, r3
 800391c:	3301      	adds	r3, #1
 800391e:	f003 021f 	and.w	r2, r3, #31
 8003922:	4613      	mov	r3, r2
 8003924:	005b      	lsls	r3, r3, #1
 8003926:	4413      	add	r3, r2
 8003928:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800392a:	430b      	orrs	r3, r1
 800392c:	e081      	b.n	8003a32 <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800392e:	683b      	ldr	r3, [r7, #0]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003936:	2b00      	cmp	r3, #0
 8003938:	d107      	bne.n	800394a <HAL_ADC_ConfigChannel+0x5c6>
 800393a:	683b      	ldr	r3, [r7, #0]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	0e9b      	lsrs	r3, r3, #26
 8003940:	3301      	adds	r3, #1
 8003942:	069b      	lsls	r3, r3, #26
 8003944:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003948:	e015      	b.n	8003976 <HAL_ADC_ConfigChannel+0x5f2>
 800394a:	683b      	ldr	r3, [r7, #0]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003950:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003952:	fa93 f3a3 	rbit	r3, r3
 8003956:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8003958:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800395a:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 800395c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800395e:	2b00      	cmp	r3, #0
 8003960:	d101      	bne.n	8003966 <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 8003962:	2320      	movs	r3, #32
 8003964:	e003      	b.n	800396e <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 8003966:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003968:	fab3 f383 	clz	r3, r3
 800396c:	b2db      	uxtb	r3, r3
 800396e:	3301      	adds	r3, #1
 8003970:	069b      	lsls	r3, r3, #26
 8003972:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003976:	683b      	ldr	r3, [r7, #0]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800397e:	2b00      	cmp	r3, #0
 8003980:	d109      	bne.n	8003996 <HAL_ADC_ConfigChannel+0x612>
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	0e9b      	lsrs	r3, r3, #26
 8003988:	3301      	adds	r3, #1
 800398a:	f003 031f 	and.w	r3, r3, #31
 800398e:	2101      	movs	r1, #1
 8003990:	fa01 f303 	lsl.w	r3, r1, r3
 8003994:	e017      	b.n	80039c6 <HAL_ADC_ConfigChannel+0x642>
 8003996:	683b      	ldr	r3, [r7, #0]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800399c:	6a3b      	ldr	r3, [r7, #32]
 800399e:	fa93 f3a3 	rbit	r3, r3
 80039a2:	61fb      	str	r3, [r7, #28]
  return result;
 80039a4:	69fb      	ldr	r3, [r7, #28]
 80039a6:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80039a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d101      	bne.n	80039b2 <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 80039ae:	2320      	movs	r3, #32
 80039b0:	e003      	b.n	80039ba <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 80039b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039b4:	fab3 f383 	clz	r3, r3
 80039b8:	b2db      	uxtb	r3, r3
 80039ba:	3301      	adds	r3, #1
 80039bc:	f003 031f 	and.w	r3, r3, #31
 80039c0:	2101      	movs	r1, #1
 80039c2:	fa01 f303 	lsl.w	r3, r1, r3
 80039c6:	ea42 0103 	orr.w	r1, r2, r3
 80039ca:	683b      	ldr	r3, [r7, #0]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d10d      	bne.n	80039f2 <HAL_ADC_ConfigChannel+0x66e>
 80039d6:	683b      	ldr	r3, [r7, #0]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	0e9b      	lsrs	r3, r3, #26
 80039dc:	3301      	adds	r3, #1
 80039de:	f003 021f 	and.w	r2, r3, #31
 80039e2:	4613      	mov	r3, r2
 80039e4:	005b      	lsls	r3, r3, #1
 80039e6:	4413      	add	r3, r2
 80039e8:	3b1e      	subs	r3, #30
 80039ea:	051b      	lsls	r3, r3, #20
 80039ec:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80039f0:	e01e      	b.n	8003a30 <HAL_ADC_ConfigChannel+0x6ac>
 80039f2:	683b      	ldr	r3, [r7, #0]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039f8:	697b      	ldr	r3, [r7, #20]
 80039fa:	fa93 f3a3 	rbit	r3, r3
 80039fe:	613b      	str	r3, [r7, #16]
  return result;
 8003a00:	693b      	ldr	r3, [r7, #16]
 8003a02:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003a04:	69bb      	ldr	r3, [r7, #24]
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d104      	bne.n	8003a14 <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 8003a0a:	2320      	movs	r3, #32
 8003a0c:	e006      	b.n	8003a1c <HAL_ADC_ConfigChannel+0x698>
 8003a0e:	bf00      	nop
 8003a10:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8003a14:	69bb      	ldr	r3, [r7, #24]
 8003a16:	fab3 f383 	clz	r3, r3
 8003a1a:	b2db      	uxtb	r3, r3
 8003a1c:	3301      	adds	r3, #1
 8003a1e:	f003 021f 	and.w	r2, r3, #31
 8003a22:	4613      	mov	r3, r2
 8003a24:	005b      	lsls	r3, r3, #1
 8003a26:	4413      	add	r3, r2
 8003a28:	3b1e      	subs	r3, #30
 8003a2a:	051b      	lsls	r3, r3, #20
 8003a2c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003a30:	430b      	orrs	r3, r1
 8003a32:	683a      	ldr	r2, [r7, #0]
 8003a34:	6892      	ldr	r2, [r2, #8]
 8003a36:	4619      	mov	r1, r3
 8003a38:	f7ff fa3e 	bl	8002eb8 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003a3c:	683b      	ldr	r3, [r7, #0]
 8003a3e:	681a      	ldr	r2, [r3, #0]
 8003a40:	4b3f      	ldr	r3, [pc, #252]	; (8003b40 <HAL_ADC_ConfigChannel+0x7bc>)
 8003a42:	4013      	ands	r3, r2
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d071      	beq.n	8003b2c <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003a48:	483e      	ldr	r0, [pc, #248]	; (8003b44 <HAL_ADC_ConfigChannel+0x7c0>)
 8003a4a:	f7ff f95d 	bl	8002d08 <LL_ADC_GetCommonPathInternalCh>
 8003a4e:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8003a52:	683b      	ldr	r3, [r7, #0]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	4a3c      	ldr	r2, [pc, #240]	; (8003b48 <HAL_ADC_ConfigChannel+0x7c4>)
 8003a58:	4293      	cmp	r3, r2
 8003a5a:	d004      	beq.n	8003a66 <HAL_ADC_ConfigChannel+0x6e2>
 8003a5c:	683b      	ldr	r3, [r7, #0]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	4a3a      	ldr	r2, [pc, #232]	; (8003b4c <HAL_ADC_ConfigChannel+0x7c8>)
 8003a62:	4293      	cmp	r3, r2
 8003a64:	d127      	bne.n	8003ab6 <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003a66:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003a6a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d121      	bne.n	8003ab6 <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003a7a:	d157      	bne.n	8003b2c <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003a7c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003a80:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003a84:	4619      	mov	r1, r3
 8003a86:	482f      	ldr	r0, [pc, #188]	; (8003b44 <HAL_ADC_ConfigChannel+0x7c0>)
 8003a88:	f7ff f92b 	bl	8002ce2 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003a8c:	4b30      	ldr	r3, [pc, #192]	; (8003b50 <HAL_ADC_ConfigChannel+0x7cc>)
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	099b      	lsrs	r3, r3, #6
 8003a92:	4a30      	ldr	r2, [pc, #192]	; (8003b54 <HAL_ADC_ConfigChannel+0x7d0>)
 8003a94:	fba2 2303 	umull	r2, r3, r2, r3
 8003a98:	099b      	lsrs	r3, r3, #6
 8003a9a:	1c5a      	adds	r2, r3, #1
 8003a9c:	4613      	mov	r3, r2
 8003a9e:	005b      	lsls	r3, r3, #1
 8003aa0:	4413      	add	r3, r2
 8003aa2:	009b      	lsls	r3, r3, #2
 8003aa4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003aa6:	e002      	b.n	8003aae <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	3b01      	subs	r3, #1
 8003aac:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d1f9      	bne.n	8003aa8 <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003ab4:	e03a      	b.n	8003b2c <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003ab6:	683b      	ldr	r3, [r7, #0]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	4a27      	ldr	r2, [pc, #156]	; (8003b58 <HAL_ADC_ConfigChannel+0x7d4>)
 8003abc:	4293      	cmp	r3, r2
 8003abe:	d113      	bne.n	8003ae8 <HAL_ADC_ConfigChannel+0x764>
 8003ac0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003ac4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d10d      	bne.n	8003ae8 <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	4a22      	ldr	r2, [pc, #136]	; (8003b5c <HAL_ADC_ConfigChannel+0x7d8>)
 8003ad2:	4293      	cmp	r3, r2
 8003ad4:	d02a      	beq.n	8003b2c <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003ad6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003ada:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003ade:	4619      	mov	r1, r3
 8003ae0:	4818      	ldr	r0, [pc, #96]	; (8003b44 <HAL_ADC_ConfigChannel+0x7c0>)
 8003ae2:	f7ff f8fe 	bl	8002ce2 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003ae6:	e021      	b.n	8003b2c <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8003ae8:	683b      	ldr	r3, [r7, #0]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	4a1c      	ldr	r2, [pc, #112]	; (8003b60 <HAL_ADC_ConfigChannel+0x7dc>)
 8003aee:	4293      	cmp	r3, r2
 8003af0:	d11c      	bne.n	8003b2c <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003af2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003af6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d116      	bne.n	8003b2c <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	4a16      	ldr	r2, [pc, #88]	; (8003b5c <HAL_ADC_ConfigChannel+0x7d8>)
 8003b04:	4293      	cmp	r3, r2
 8003b06:	d011      	beq.n	8003b2c <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003b08:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003b0c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003b10:	4619      	mov	r1, r3
 8003b12:	480c      	ldr	r0, [pc, #48]	; (8003b44 <HAL_ADC_ConfigChannel+0x7c0>)
 8003b14:	f7ff f8e5 	bl	8002ce2 <LL_ADC_SetCommonPathInternalCh>
 8003b18:	e008      	b.n	8003b2c <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b1e:	f043 0220 	orr.w	r2, r3, #32
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003b26:	2301      	movs	r3, #1
 8003b28:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	2200      	movs	r2, #0
 8003b30:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8003b34:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8003b38:	4618      	mov	r0, r3
 8003b3a:	37d8      	adds	r7, #216	; 0xd8
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	bd80      	pop	{r7, pc}
 8003b40:	80080000 	.word	0x80080000
 8003b44:	50000300 	.word	0x50000300
 8003b48:	c3210000 	.word	0xc3210000
 8003b4c:	90c00010 	.word	0x90c00010
 8003b50:	20000000 	.word	0x20000000
 8003b54:	053e2d63 	.word	0x053e2d63
 8003b58:	c7520000 	.word	0xc7520000
 8003b5c:	50000100 	.word	0x50000100
 8003b60:	cb840000 	.word	0xcb840000

08003b64 <LL_ADC_IsEnabled>:
{
 8003b64:	b480      	push	{r7}
 8003b66:	b083      	sub	sp, #12
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	689b      	ldr	r3, [r3, #8]
 8003b70:	f003 0301 	and.w	r3, r3, #1
 8003b74:	2b01      	cmp	r3, #1
 8003b76:	d101      	bne.n	8003b7c <LL_ADC_IsEnabled+0x18>
 8003b78:	2301      	movs	r3, #1
 8003b7a:	e000      	b.n	8003b7e <LL_ADC_IsEnabled+0x1a>
 8003b7c:	2300      	movs	r3, #0
}
 8003b7e:	4618      	mov	r0, r3
 8003b80:	370c      	adds	r7, #12
 8003b82:	46bd      	mov	sp, r7
 8003b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b88:	4770      	bx	lr

08003b8a <LL_ADC_REG_IsConversionOngoing>:
{
 8003b8a:	b480      	push	{r7}
 8003b8c:	b083      	sub	sp, #12
 8003b8e:	af00      	add	r7, sp, #0
 8003b90:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	689b      	ldr	r3, [r3, #8]
 8003b96:	f003 0304 	and.w	r3, r3, #4
 8003b9a:	2b04      	cmp	r3, #4
 8003b9c:	d101      	bne.n	8003ba2 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003b9e:	2301      	movs	r3, #1
 8003ba0:	e000      	b.n	8003ba4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003ba2:	2300      	movs	r3, #0
}
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	370c      	adds	r7, #12
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bae:	4770      	bx	lr

08003bb0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8003bb0:	b590      	push	{r4, r7, lr}
 8003bb2:	b0a1      	sub	sp, #132	; 0x84
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
 8003bb8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003bba:	2300      	movs	r3, #0
 8003bbc:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8003bc6:	2b01      	cmp	r3, #1
 8003bc8:	d101      	bne.n	8003bce <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003bca:	2302      	movs	r3, #2
 8003bcc:	e08b      	b.n	8003ce6 <HAL_ADCEx_MultiModeConfigChannel+0x136>
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	2201      	movs	r2, #1
 8003bd2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8003bd6:	2300      	movs	r3, #0
 8003bd8:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8003bda:	2300      	movs	r3, #0
 8003bdc:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003be6:	d102      	bne.n	8003bee <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003be8:	4b41      	ldr	r3, [pc, #260]	; (8003cf0 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8003bea:	60bb      	str	r3, [r7, #8]
 8003bec:	e001      	b.n	8003bf2 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8003bee:	2300      	movs	r3, #0
 8003bf0:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8003bf2:	68bb      	ldr	r3, [r7, #8]
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d10b      	bne.n	8003c10 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bfc:	f043 0220 	orr.w	r2, r3, #32
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	2200      	movs	r2, #0
 8003c08:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8003c0c:	2301      	movs	r3, #1
 8003c0e:	e06a      	b.n	8003ce6 <HAL_ADCEx_MultiModeConfigChannel+0x136>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8003c10:	68bb      	ldr	r3, [r7, #8]
 8003c12:	4618      	mov	r0, r3
 8003c14:	f7ff ffb9 	bl	8003b8a <LL_ADC_REG_IsConversionOngoing>
 8003c18:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	4618      	mov	r0, r3
 8003c20:	f7ff ffb3 	bl	8003b8a <LL_ADC_REG_IsConversionOngoing>
 8003c24:	4603      	mov	r3, r0
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d14c      	bne.n	8003cc4 <HAL_ADCEx_MultiModeConfigChannel+0x114>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8003c2a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d149      	bne.n	8003cc4 <HAL_ADCEx_MultiModeConfigChannel+0x114>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003c30:	4b30      	ldr	r3, [pc, #192]	; (8003cf4 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 8003c32:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003c34:	683b      	ldr	r3, [r7, #0]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d028      	beq.n	8003c8e <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003c3c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003c3e:	689b      	ldr	r3, [r3, #8]
 8003c40:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003c44:	683b      	ldr	r3, [r7, #0]
 8003c46:	6859      	ldr	r1, [r3, #4]
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003c4e:	035b      	lsls	r3, r3, #13
 8003c50:	430b      	orrs	r3, r1
 8003c52:	431a      	orrs	r2, r3
 8003c54:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003c56:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003c58:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8003c5c:	f7ff ff82 	bl	8003b64 <LL_ADC_IsEnabled>
 8003c60:	4604      	mov	r4, r0
 8003c62:	4823      	ldr	r0, [pc, #140]	; (8003cf0 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8003c64:	f7ff ff7e 	bl	8003b64 <LL_ADC_IsEnabled>
 8003c68:	4603      	mov	r3, r0
 8003c6a:	4323      	orrs	r3, r4
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d133      	bne.n	8003cd8 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003c70:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003c72:	689b      	ldr	r3, [r3, #8]
 8003c74:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003c78:	f023 030f 	bic.w	r3, r3, #15
 8003c7c:	683a      	ldr	r2, [r7, #0]
 8003c7e:	6811      	ldr	r1, [r2, #0]
 8003c80:	683a      	ldr	r2, [r7, #0]
 8003c82:	6892      	ldr	r2, [r2, #8]
 8003c84:	430a      	orrs	r2, r1
 8003c86:	431a      	orrs	r2, r3
 8003c88:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003c8a:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003c8c:	e024      	b.n	8003cd8 <HAL_ADCEx_MultiModeConfigChannel+0x128>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003c8e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003c90:	689b      	ldr	r3, [r3, #8]
 8003c92:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003c96:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003c98:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003c9a:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8003c9e:	f7ff ff61 	bl	8003b64 <LL_ADC_IsEnabled>
 8003ca2:	4604      	mov	r4, r0
 8003ca4:	4812      	ldr	r0, [pc, #72]	; (8003cf0 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8003ca6:	f7ff ff5d 	bl	8003b64 <LL_ADC_IsEnabled>
 8003caa:	4603      	mov	r3, r0
 8003cac:	4323      	orrs	r3, r4
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d112      	bne.n	8003cd8 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003cb2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003cb4:	689b      	ldr	r3, [r3, #8]
 8003cb6:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003cba:	f023 030f 	bic.w	r3, r3, #15
 8003cbe:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003cc0:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003cc2:	e009      	b.n	8003cd8 <HAL_ADCEx_MultiModeConfigChannel+0x128>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cc8:	f043 0220 	orr.w	r2, r3, #32
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003cd0:	2301      	movs	r3, #1
 8003cd2:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8003cd6:	e000      	b.n	8003cda <HAL_ADCEx_MultiModeConfigChannel+0x12a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003cd8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	2200      	movs	r2, #0
 8003cde:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8003ce2:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	3784      	adds	r7, #132	; 0x84
 8003cea:	46bd      	mov	sp, r7
 8003cec:	bd90      	pop	{r4, r7, pc}
 8003cee:	bf00      	nop
 8003cf0:	50000100 	.word	0x50000100
 8003cf4:	50000300 	.word	0x50000300

08003cf8 <LL_EXTI_EnableIT_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 8003cf8:	b480      	push	{r7}
 8003cfa:	b083      	sub	sp, #12
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8003d00:	4b05      	ldr	r3, [pc, #20]	; (8003d18 <LL_EXTI_EnableIT_0_31+0x20>)
 8003d02:	681a      	ldr	r2, [r3, #0]
 8003d04:	4904      	ldr	r1, [pc, #16]	; (8003d18 <LL_EXTI_EnableIT_0_31+0x20>)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	4313      	orrs	r3, r2
 8003d0a:	600b      	str	r3, [r1, #0]
}
 8003d0c:	bf00      	nop
 8003d0e:	370c      	adds	r7, #12
 8003d10:	46bd      	mov	sp, r7
 8003d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d16:	4770      	bx	lr
 8003d18:	40010400 	.word	0x40010400

08003d1c <LL_EXTI_DisableIT_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 8003d1c:	b480      	push	{r7}
 8003d1e:	b083      	sub	sp, #12
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 8003d24:	4b06      	ldr	r3, [pc, #24]	; (8003d40 <LL_EXTI_DisableIT_0_31+0x24>)
 8003d26:	681a      	ldr	r2, [r3, #0]
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	43db      	mvns	r3, r3
 8003d2c:	4904      	ldr	r1, [pc, #16]	; (8003d40 <LL_EXTI_DisableIT_0_31+0x24>)
 8003d2e:	4013      	ands	r3, r2
 8003d30:	600b      	str	r3, [r1, #0]
}
 8003d32:	bf00      	nop
 8003d34:	370c      	adds	r7, #12
 8003d36:	46bd      	mov	sp, r7
 8003d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3c:	4770      	bx	lr
 8003d3e:	bf00      	nop
 8003d40:	40010400 	.word	0x40010400

08003d44 <LL_EXTI_EnableEvent_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_0_31(uint32_t ExtiLine)
{
 8003d44:	b480      	push	{r7}
 8003d46:	b083      	sub	sp, #12
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 8003d4c:	4b05      	ldr	r3, [pc, #20]	; (8003d64 <LL_EXTI_EnableEvent_0_31+0x20>)
 8003d4e:	685a      	ldr	r2, [r3, #4]
 8003d50:	4904      	ldr	r1, [pc, #16]	; (8003d64 <LL_EXTI_EnableEvent_0_31+0x20>)
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	4313      	orrs	r3, r2
 8003d56:	604b      	str	r3, [r1, #4]

}
 8003d58:	bf00      	nop
 8003d5a:	370c      	adds	r7, #12
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d62:	4770      	bx	lr
 8003d64:	40010400 	.word	0x40010400

08003d68 <LL_EXTI_DisableEvent_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
 8003d68:	b480      	push	{r7}
 8003d6a:	b083      	sub	sp, #12
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 8003d70:	4b06      	ldr	r3, [pc, #24]	; (8003d8c <LL_EXTI_DisableEvent_0_31+0x24>)
 8003d72:	685a      	ldr	r2, [r3, #4]
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	43db      	mvns	r3, r3
 8003d78:	4904      	ldr	r1, [pc, #16]	; (8003d8c <LL_EXTI_DisableEvent_0_31+0x24>)
 8003d7a:	4013      	ands	r3, r2
 8003d7c:	604b      	str	r3, [r1, #4]
}
 8003d7e:	bf00      	nop
 8003d80:	370c      	adds	r7, #12
 8003d82:	46bd      	mov	sp, r7
 8003d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d88:	4770      	bx	lr
 8003d8a:	bf00      	nop
 8003d8c:	40010400 	.word	0x40010400

08003d90 <LL_EXTI_EnableRisingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8003d90:	b480      	push	{r7}
 8003d92:	b083      	sub	sp, #12
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8003d98:	4b05      	ldr	r3, [pc, #20]	; (8003db0 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8003d9a:	689a      	ldr	r2, [r3, #8]
 8003d9c:	4904      	ldr	r1, [pc, #16]	; (8003db0 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	4313      	orrs	r3, r2
 8003da2:	608b      	str	r3, [r1, #8]

}
 8003da4:	bf00      	nop
 8003da6:	370c      	adds	r7, #12
 8003da8:	46bd      	mov	sp, r7
 8003daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dae:	4770      	bx	lr
 8003db0:	40010400 	.word	0x40010400

08003db4 <LL_EXTI_DisableRisingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 8003db4:	b480      	push	{r7}
 8003db6:	b083      	sub	sp, #12
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 8003dbc:	4b06      	ldr	r3, [pc, #24]	; (8003dd8 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8003dbe:	689a      	ldr	r2, [r3, #8]
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	43db      	mvns	r3, r3
 8003dc4:	4904      	ldr	r1, [pc, #16]	; (8003dd8 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8003dc6:	4013      	ands	r3, r2
 8003dc8:	608b      	str	r3, [r1, #8]

}
 8003dca:	bf00      	nop
 8003dcc:	370c      	adds	r7, #12
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd4:	4770      	bx	lr
 8003dd6:	bf00      	nop
 8003dd8:	40010400 	.word	0x40010400

08003ddc <LL_EXTI_EnableFallingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 8003ddc:	b480      	push	{r7}
 8003dde:	b083      	sub	sp, #12
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 8003de4:	4b05      	ldr	r3, [pc, #20]	; (8003dfc <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8003de6:	68da      	ldr	r2, [r3, #12]
 8003de8:	4904      	ldr	r1, [pc, #16]	; (8003dfc <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	4313      	orrs	r3, r2
 8003dee:	60cb      	str	r3, [r1, #12]
}
 8003df0:	bf00      	nop
 8003df2:	370c      	adds	r7, #12
 8003df4:	46bd      	mov	sp, r7
 8003df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfa:	4770      	bx	lr
 8003dfc:	40010400 	.word	0x40010400

08003e00 <LL_EXTI_DisableFallingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 8003e00:	b480      	push	{r7}
 8003e02:	b083      	sub	sp, #12
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 8003e08:	4b06      	ldr	r3, [pc, #24]	; (8003e24 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8003e0a:	68da      	ldr	r2, [r3, #12]
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	43db      	mvns	r3, r3
 8003e10:	4904      	ldr	r1, [pc, #16]	; (8003e24 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8003e12:	4013      	ands	r3, r2
 8003e14:	60cb      	str	r3, [r1, #12]
}
 8003e16:	bf00      	nop
 8003e18:	370c      	adds	r7, #12
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e20:	4770      	bx	lr
 8003e22:	bf00      	nop
 8003e24:	40010400 	.word	0x40010400

08003e28 <LL_EXTI_ClearFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 8003e28:	b480      	push	{r7}
 8003e2a:	b083      	sub	sp, #12
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR1, ExtiLine);
 8003e30:	4a04      	ldr	r2, [pc, #16]	; (8003e44 <LL_EXTI_ClearFlag_0_31+0x1c>)
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6153      	str	r3, [r2, #20]
}
 8003e36:	bf00      	nop
 8003e38:	370c      	adds	r7, #12
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e40:	4770      	bx	lr
 8003e42:	bf00      	nop
 8003e44:	40010400 	.word	0x40010400

08003e48 <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 8003e48:	b580      	push	{r7, lr}
 8003e4a:	b088      	sub	sp, #32
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	6078      	str	r0, [r7, #4]
  uint32_t tmp_csr;
  uint32_t exti_line;
  uint32_t comp_voltage_scaler_initialized; /* Value "0" if comparator voltage scaler is not initialized */
  __IO uint32_t wait_loop_index = 0UL;
 8003e50:	2300      	movs	r3, #0
 8003e52:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8003e54:	2300      	movs	r3, #0
 8003e56:	77fb      	strb	r3, [r7, #31]

  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d102      	bne.n	8003e64 <HAL_COMP_Init+0x1c>
  {
    status = HAL_ERROR;
 8003e5e:	2301      	movs	r3, #1
 8003e60:	77fb      	strb	r3, [r7, #31]
 8003e62:	e0bc      	b.n	8003fde <HAL_COMP_Init+0x196>
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003e6e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003e72:	d102      	bne.n	8003e7a <HAL_COMP_Init+0x32>
  {
    status = HAL_ERROR;
 8003e74:	2301      	movs	r3, #1
 8003e76:	77fb      	strb	r3, [r7, #31]
 8003e78:	e0b1      	b.n	8003fde <HAL_COMP_Init+0x196>
    assert_param(IS_COMP_OUTPUTPOL(hcomp->Init.OutputPol));
    assert_param(IS_COMP_HYSTERESIS(hcomp->Init.Hysteresis));
    assert_param(IS_COMP_BLANKINGSRC_INSTANCE(hcomp->Instance, hcomp->Init.BlankingSrce));
    assert_param(IS_COMP_TRIGGERMODE(hcomp->Init.TriggerMode));

    if(hcomp->State == HAL_COMP_STATE_RESET)
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	7f5b      	ldrb	r3, [r3, #29]
 8003e7e:	b2db      	uxtb	r3, r3
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d108      	bne.n	8003e96 <HAL_COMP_Init+0x4e>
    {
      /* Allocate lock resource and initialize it */
      hcomp->Lock = HAL_UNLOCKED;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	2200      	movs	r2, #0
 8003e88:	771a      	strb	r2, [r3, #28]

      /* Set COMP error code to none */
      COMP_CLEAR_ERRORCODE(hcomp);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	621a      	str	r2, [r3, #32]
#else
      /* Init the low level hardware */
      /* Note: Internal control clock of the comparators must                 */
      /*       be enabled in "HAL_COMP_MspInit()"                             */
      /*       using "__HAL_RCC_SYSCFG_CLK_ENABLE()".                         */
      HAL_COMP_MspInit(hcomp);
 8003e90:	6878      	ldr	r0, [r7, #4]
 8003e92:	f7fd fdef 	bl	8001a74 <HAL_COMP_MspInit>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
    }

    /* Memorize voltage scaler state before initialization */
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003ea0:	61bb      	str	r3, [r7, #24]

    /* Set COMP parameters */
    tmp_csr = (  hcomp->Init.InputMinus
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	689a      	ldr	r2, [r3, #8]
               | hcomp->Init.InputPlus
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	685b      	ldr	r3, [r3, #4]
 8003eaa:	431a      	orrs	r2, r3
               | hcomp->Init.BlankingSrce
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	695b      	ldr	r3, [r3, #20]
 8003eb0:	431a      	orrs	r2, r3
               | hcomp->Init.Hysteresis
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	68db      	ldr	r3, [r3, #12]
 8003eb6:	431a      	orrs	r2, r3
               | hcomp->Init.OutputPol
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	691b      	ldr	r3, [r3, #16]
    tmp_csr = (  hcomp->Init.InputMinus
 8003ebc:	4313      	orrs	r3, r2
 8003ebe:	617b      	str	r3, [r7, #20]
              );

    /* Set parameters in COMP register */
    /* Note: Update all bits except read-only, lock and enable bits */
    MODIFY_REG(hcomp->Instance->CSR,
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	681a      	ldr	r2, [r3, #0]
 8003ec6:	4b48      	ldr	r3, [pc, #288]	; (8003fe8 <HAL_COMP_Init+0x1a0>)
 8003ec8:	4013      	ands	r3, r2
 8003eca:	687a      	ldr	r2, [r7, #4]
 8003ecc:	6812      	ldr	r2, [r2, #0]
 8003ece:	6979      	ldr	r1, [r7, #20]
 8003ed0:	430b      	orrs	r3, r1
 8003ed2:	6013      	str	r3, [r2, #0]
               tmp_csr
              );

    /* Delay for COMP scaler bridge voltage stabilization */
    /* Apply the delay if voltage scaler bridge is required and not already enabled */
    if ((READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN) != 0UL) &&
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d016      	beq.n	8003f10 <HAL_COMP_Init+0xc8>
 8003ee2:	69bb      	ldr	r3, [r7, #24]
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d113      	bne.n	8003f10 <HAL_COMP_Init+0xc8>
    {
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((COMP_DELAY_VOLTAGE_SCALER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003ee8:	4b40      	ldr	r3, [pc, #256]	; (8003fec <HAL_COMP_Init+0x1a4>)
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	099b      	lsrs	r3, r3, #6
 8003eee:	4a40      	ldr	r2, [pc, #256]	; (8003ff0 <HAL_COMP_Init+0x1a8>)
 8003ef0:	fba2 2303 	umull	r2, r3, r2, r3
 8003ef4:	099b      	lsrs	r3, r3, #6
 8003ef6:	1c5a      	adds	r2, r3, #1
 8003ef8:	4613      	mov	r3, r2
 8003efa:	009b      	lsls	r3, r3, #2
 8003efc:	4413      	add	r3, r2
 8003efe:	009b      	lsls	r3, r3, #2
 8003f00:	60fb      	str	r3, [r7, #12]
      while(wait_loop_index != 0UL)
 8003f02:	e002      	b.n	8003f0a <HAL_COMP_Init+0xc2>
      {
        wait_loop_index--;
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	3b01      	subs	r3, #1
 8003f08:	60fb      	str	r3, [r7, #12]
      while(wait_loop_index != 0UL)
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d1f9      	bne.n	8003f04 <HAL_COMP_Init+0xbc>
      }
    }

    /* Get the EXTI line corresponding to the selected COMP instance */
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	4a37      	ldr	r2, [pc, #220]	; (8003ff4 <HAL_COMP_Init+0x1ac>)
 8003f16:	4293      	cmp	r3, r2
 8003f18:	d012      	beq.n	8003f40 <HAL_COMP_Init+0xf8>
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	4a36      	ldr	r2, [pc, #216]	; (8003ff8 <HAL_COMP_Init+0x1b0>)
 8003f20:	4293      	cmp	r3, r2
 8003f22:	d00a      	beq.n	8003f3a <HAL_COMP_Init+0xf2>
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	4a34      	ldr	r2, [pc, #208]	; (8003ffc <HAL_COMP_Init+0x1b4>)
 8003f2a:	4293      	cmp	r3, r2
 8003f2c:	d102      	bne.n	8003f34 <HAL_COMP_Init+0xec>
 8003f2e:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8003f32:	e007      	b.n	8003f44 <HAL_COMP_Init+0xfc>
 8003f34:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003f38:	e004      	b.n	8003f44 <HAL_COMP_Init+0xfc>
 8003f3a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003f3e:	e001      	b.n	8003f44 <HAL_COMP_Init+0xfc>
 8003f40:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003f44:	613b      	str	r3, [r7, #16]

    /* Manage EXTI settings */
    if((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	699b      	ldr	r3, [r3, #24]
 8003f4a:	f003 0303 	and.w	r3, r3, #3
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d037      	beq.n	8003fc2 <HAL_COMP_Init+0x17a>
    {
      /* Configure EXTI rising edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	699b      	ldr	r3, [r3, #24]
 8003f56:	f003 0310 	and.w	r3, r3, #16
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d003      	beq.n	8003f66 <HAL_COMP_Init+0x11e>
        else
        {
          LL_EXTI_EnableRisingTrig_0_31(exti_line);
        }
#else
        LL_EXTI_EnableRisingTrig_0_31(exti_line);
 8003f5e:	6938      	ldr	r0, [r7, #16]
 8003f60:	f7ff ff16 	bl	8003d90 <LL_EXTI_EnableRisingTrig_0_31>
 8003f64:	e002      	b.n	8003f6c <HAL_COMP_Init+0x124>
        else
        {
          LL_EXTI_DisableRisingTrig_0_31(exti_line);
        }
#else
        LL_EXTI_DisableRisingTrig_0_31(exti_line);
 8003f66:	6938      	ldr	r0, [r7, #16]
 8003f68:	f7ff ff24 	bl	8003db4 <LL_EXTI_DisableRisingTrig_0_31>
#endif /* COMP7 */
      }

      /* Configure EXTI falling edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	699b      	ldr	r3, [r3, #24]
 8003f70:	f003 0320 	and.w	r3, r3, #32
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d003      	beq.n	8003f80 <HAL_COMP_Init+0x138>
        else
        {
          LL_EXTI_EnableFallingTrig_0_31(exti_line);
        }
#else
        LL_EXTI_EnableFallingTrig_0_31(exti_line);
 8003f78:	6938      	ldr	r0, [r7, #16]
 8003f7a:	f7ff ff2f 	bl	8003ddc <LL_EXTI_EnableFallingTrig_0_31>
 8003f7e:	e002      	b.n	8003f86 <HAL_COMP_Init+0x13e>
        else
        {
          LL_EXTI_DisableFallingTrig_0_31(exti_line);
        }
#else
        LL_EXTI_DisableFallingTrig_0_31(exti_line);
 8003f80:	6938      	ldr	r0, [r7, #16]
 8003f82:	f7ff ff3d 	bl	8003e00 <LL_EXTI_DisableFallingTrig_0_31>
      else
      {
        LL_EXTI_ClearFlag_0_31(exti_line);
      }
#else
      LL_EXTI_ClearFlag_0_31(exti_line);
 8003f86:	6938      	ldr	r0, [r7, #16]
 8003f88:	f7ff ff4e 	bl	8003e28 <LL_EXTI_ClearFlag_0_31>
#endif /* COMP7 */

      /* Configure EXTI event mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != 0UL)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	699b      	ldr	r3, [r3, #24]
 8003f90:	f003 0302 	and.w	r3, r3, #2
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d003      	beq.n	8003fa0 <HAL_COMP_Init+0x158>
        else
        {
          LL_EXTI_EnableEvent_0_31(exti_line);
        }
#else
        LL_EXTI_EnableEvent_0_31(exti_line);
 8003f98:	6938      	ldr	r0, [r7, #16]
 8003f9a:	f7ff fed3 	bl	8003d44 <LL_EXTI_EnableEvent_0_31>
 8003f9e:	e002      	b.n	8003fa6 <HAL_COMP_Init+0x15e>
        else
        {
          LL_EXTI_DisableEvent_0_31(exti_line);
        }
#else
        LL_EXTI_DisableEvent_0_31(exti_line);
 8003fa0:	6938      	ldr	r0, [r7, #16]
 8003fa2:	f7ff fee1 	bl	8003d68 <LL_EXTI_DisableEvent_0_31>
#endif /* COMP7 */
      }

      /* Configure EXTI interrupt mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	699b      	ldr	r3, [r3, #24]
 8003faa:	f003 0301 	and.w	r3, r3, #1
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d003      	beq.n	8003fba <HAL_COMP_Init+0x172>
        else
        {
          LL_EXTI_EnableIT_0_31(exti_line);
        }
#else
        LL_EXTI_EnableIT_0_31(exti_line);
 8003fb2:	6938      	ldr	r0, [r7, #16]
 8003fb4:	f7ff fea0 	bl	8003cf8 <LL_EXTI_EnableIT_0_31>
 8003fb8:	e009      	b.n	8003fce <HAL_COMP_Init+0x186>
        else
        {
          LL_EXTI_DisableIT_0_31(exti_line);
        }
#else
        LL_EXTI_DisableIT_0_31(exti_line);
 8003fba:	6938      	ldr	r0, [r7, #16]
 8003fbc:	f7ff feae 	bl	8003d1c <LL_EXTI_DisableIT_0_31>
 8003fc0:	e005      	b.n	8003fce <HAL_COMP_Init+0x186>
      else
      {
        LL_EXTI_DisableEvent_0_31(exti_line);
      }
#else
      LL_EXTI_DisableEvent_0_31(exti_line);
 8003fc2:	6938      	ldr	r0, [r7, #16]
 8003fc4:	f7ff fed0 	bl	8003d68 <LL_EXTI_DisableEvent_0_31>
      else
      {
        LL_EXTI_DisableIT_0_31(exti_line);
      }
#else
      LL_EXTI_DisableIT_0_31(exti_line);
 8003fc8:	6938      	ldr	r0, [r7, #16]
 8003fca:	f7ff fea7 	bl	8003d1c <LL_EXTI_DisableIT_0_31>
    }

    /* Set HAL COMP handle state */
    /* Note: Transition from state reset to state ready,                      */
    /*       otherwise (coming from state ready or busy) no state update.     */
    if (hcomp->State == HAL_COMP_STATE_RESET)
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	7f5b      	ldrb	r3, [r3, #29]
 8003fd2:	b2db      	uxtb	r3, r3
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d102      	bne.n	8003fde <HAL_COMP_Init+0x196>
    {
      hcomp->State = HAL_COMP_STATE_READY;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2201      	movs	r2, #1
 8003fdc:	775a      	strb	r2, [r3, #29]
    }
  }

  return status;
 8003fde:	7ffb      	ldrb	r3, [r7, #31]
}
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	3720      	adds	r7, #32
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	bd80      	pop	{r7, pc}
 8003fe8:	ff007e0f 	.word	0xff007e0f
 8003fec:	20000000 	.word	0x20000000
 8003ff0:	053e2d63 	.word	0x053e2d63
 8003ff4:	40010200 	.word	0x40010200
 8003ff8:	40010204 	.word	0x40010204
 8003ffc:	40010208 	.word	0x40010208

08004000 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004000:	b480      	push	{r7}
 8004002:	b085      	sub	sp, #20
 8004004:	af00      	add	r7, sp, #0
 8004006:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	f003 0307 	and.w	r3, r3, #7
 800400e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004010:	4b0c      	ldr	r3, [pc, #48]	; (8004044 <__NVIC_SetPriorityGrouping+0x44>)
 8004012:	68db      	ldr	r3, [r3, #12]
 8004014:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004016:	68ba      	ldr	r2, [r7, #8]
 8004018:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800401c:	4013      	ands	r3, r2
 800401e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004024:	68bb      	ldr	r3, [r7, #8]
 8004026:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004028:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800402c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004030:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004032:	4a04      	ldr	r2, [pc, #16]	; (8004044 <__NVIC_SetPriorityGrouping+0x44>)
 8004034:	68bb      	ldr	r3, [r7, #8]
 8004036:	60d3      	str	r3, [r2, #12]
}
 8004038:	bf00      	nop
 800403a:	3714      	adds	r7, #20
 800403c:	46bd      	mov	sp, r7
 800403e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004042:	4770      	bx	lr
 8004044:	e000ed00 	.word	0xe000ed00

08004048 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004048:	b480      	push	{r7}
 800404a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800404c:	4b04      	ldr	r3, [pc, #16]	; (8004060 <__NVIC_GetPriorityGrouping+0x18>)
 800404e:	68db      	ldr	r3, [r3, #12]
 8004050:	0a1b      	lsrs	r3, r3, #8
 8004052:	f003 0307 	and.w	r3, r3, #7
}
 8004056:	4618      	mov	r0, r3
 8004058:	46bd      	mov	sp, r7
 800405a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405e:	4770      	bx	lr
 8004060:	e000ed00 	.word	0xe000ed00

08004064 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004064:	b480      	push	{r7}
 8004066:	b083      	sub	sp, #12
 8004068:	af00      	add	r7, sp, #0
 800406a:	4603      	mov	r3, r0
 800406c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800406e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004072:	2b00      	cmp	r3, #0
 8004074:	db0b      	blt.n	800408e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004076:	79fb      	ldrb	r3, [r7, #7]
 8004078:	f003 021f 	and.w	r2, r3, #31
 800407c:	4907      	ldr	r1, [pc, #28]	; (800409c <__NVIC_EnableIRQ+0x38>)
 800407e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004082:	095b      	lsrs	r3, r3, #5
 8004084:	2001      	movs	r0, #1
 8004086:	fa00 f202 	lsl.w	r2, r0, r2
 800408a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800408e:	bf00      	nop
 8004090:	370c      	adds	r7, #12
 8004092:	46bd      	mov	sp, r7
 8004094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004098:	4770      	bx	lr
 800409a:	bf00      	nop
 800409c:	e000e100 	.word	0xe000e100

080040a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80040a0:	b480      	push	{r7}
 80040a2:	b083      	sub	sp, #12
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	4603      	mov	r3, r0
 80040a8:	6039      	str	r1, [r7, #0]
 80040aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80040ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	db0a      	blt.n	80040ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80040b4:	683b      	ldr	r3, [r7, #0]
 80040b6:	b2da      	uxtb	r2, r3
 80040b8:	490c      	ldr	r1, [pc, #48]	; (80040ec <__NVIC_SetPriority+0x4c>)
 80040ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040be:	0112      	lsls	r2, r2, #4
 80040c0:	b2d2      	uxtb	r2, r2
 80040c2:	440b      	add	r3, r1
 80040c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80040c8:	e00a      	b.n	80040e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80040ca:	683b      	ldr	r3, [r7, #0]
 80040cc:	b2da      	uxtb	r2, r3
 80040ce:	4908      	ldr	r1, [pc, #32]	; (80040f0 <__NVIC_SetPriority+0x50>)
 80040d0:	79fb      	ldrb	r3, [r7, #7]
 80040d2:	f003 030f 	and.w	r3, r3, #15
 80040d6:	3b04      	subs	r3, #4
 80040d8:	0112      	lsls	r2, r2, #4
 80040da:	b2d2      	uxtb	r2, r2
 80040dc:	440b      	add	r3, r1
 80040de:	761a      	strb	r2, [r3, #24]
}
 80040e0:	bf00      	nop
 80040e2:	370c      	adds	r7, #12
 80040e4:	46bd      	mov	sp, r7
 80040e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ea:	4770      	bx	lr
 80040ec:	e000e100 	.word	0xe000e100
 80040f0:	e000ed00 	.word	0xe000ed00

080040f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80040f4:	b480      	push	{r7}
 80040f6:	b089      	sub	sp, #36	; 0x24
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	60f8      	str	r0, [r7, #12]
 80040fc:	60b9      	str	r1, [r7, #8]
 80040fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	f003 0307 	and.w	r3, r3, #7
 8004106:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004108:	69fb      	ldr	r3, [r7, #28]
 800410a:	f1c3 0307 	rsb	r3, r3, #7
 800410e:	2b04      	cmp	r3, #4
 8004110:	bf28      	it	cs
 8004112:	2304      	movcs	r3, #4
 8004114:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004116:	69fb      	ldr	r3, [r7, #28]
 8004118:	3304      	adds	r3, #4
 800411a:	2b06      	cmp	r3, #6
 800411c:	d902      	bls.n	8004124 <NVIC_EncodePriority+0x30>
 800411e:	69fb      	ldr	r3, [r7, #28]
 8004120:	3b03      	subs	r3, #3
 8004122:	e000      	b.n	8004126 <NVIC_EncodePriority+0x32>
 8004124:	2300      	movs	r3, #0
 8004126:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004128:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800412c:	69bb      	ldr	r3, [r7, #24]
 800412e:	fa02 f303 	lsl.w	r3, r2, r3
 8004132:	43da      	mvns	r2, r3
 8004134:	68bb      	ldr	r3, [r7, #8]
 8004136:	401a      	ands	r2, r3
 8004138:	697b      	ldr	r3, [r7, #20]
 800413a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800413c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004140:	697b      	ldr	r3, [r7, #20]
 8004142:	fa01 f303 	lsl.w	r3, r1, r3
 8004146:	43d9      	mvns	r1, r3
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800414c:	4313      	orrs	r3, r2
         );
}
 800414e:	4618      	mov	r0, r3
 8004150:	3724      	adds	r7, #36	; 0x24
 8004152:	46bd      	mov	sp, r7
 8004154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004158:	4770      	bx	lr
	...

0800415c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800415c:	b580      	push	{r7, lr}
 800415e:	b082      	sub	sp, #8
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	3b01      	subs	r3, #1
 8004168:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800416c:	d301      	bcc.n	8004172 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800416e:	2301      	movs	r3, #1
 8004170:	e00f      	b.n	8004192 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004172:	4a0a      	ldr	r2, [pc, #40]	; (800419c <SysTick_Config+0x40>)
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	3b01      	subs	r3, #1
 8004178:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800417a:	210f      	movs	r1, #15
 800417c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004180:	f7ff ff8e 	bl	80040a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004184:	4b05      	ldr	r3, [pc, #20]	; (800419c <SysTick_Config+0x40>)
 8004186:	2200      	movs	r2, #0
 8004188:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800418a:	4b04      	ldr	r3, [pc, #16]	; (800419c <SysTick_Config+0x40>)
 800418c:	2207      	movs	r2, #7
 800418e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004190:	2300      	movs	r3, #0
}
 8004192:	4618      	mov	r0, r3
 8004194:	3708      	adds	r7, #8
 8004196:	46bd      	mov	sp, r7
 8004198:	bd80      	pop	{r7, pc}
 800419a:	bf00      	nop
 800419c:	e000e010 	.word	0xe000e010

080041a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80041a0:	b580      	push	{r7, lr}
 80041a2:	b082      	sub	sp, #8
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80041a8:	6878      	ldr	r0, [r7, #4]
 80041aa:	f7ff ff29 	bl	8004000 <__NVIC_SetPriorityGrouping>
}
 80041ae:	bf00      	nop
 80041b0:	3708      	adds	r7, #8
 80041b2:	46bd      	mov	sp, r7
 80041b4:	bd80      	pop	{r7, pc}

080041b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80041b6:	b580      	push	{r7, lr}
 80041b8:	b086      	sub	sp, #24
 80041ba:	af00      	add	r7, sp, #0
 80041bc:	4603      	mov	r3, r0
 80041be:	60b9      	str	r1, [r7, #8]
 80041c0:	607a      	str	r2, [r7, #4]
 80041c2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80041c4:	f7ff ff40 	bl	8004048 <__NVIC_GetPriorityGrouping>
 80041c8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80041ca:	687a      	ldr	r2, [r7, #4]
 80041cc:	68b9      	ldr	r1, [r7, #8]
 80041ce:	6978      	ldr	r0, [r7, #20]
 80041d0:	f7ff ff90 	bl	80040f4 <NVIC_EncodePriority>
 80041d4:	4602      	mov	r2, r0
 80041d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80041da:	4611      	mov	r1, r2
 80041dc:	4618      	mov	r0, r3
 80041de:	f7ff ff5f 	bl	80040a0 <__NVIC_SetPriority>
}
 80041e2:	bf00      	nop
 80041e4:	3718      	adds	r7, #24
 80041e6:	46bd      	mov	sp, r7
 80041e8:	bd80      	pop	{r7, pc}

080041ea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80041ea:	b580      	push	{r7, lr}
 80041ec:	b082      	sub	sp, #8
 80041ee:	af00      	add	r7, sp, #0
 80041f0:	4603      	mov	r3, r0
 80041f2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80041f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041f8:	4618      	mov	r0, r3
 80041fa:	f7ff ff33 	bl	8004064 <__NVIC_EnableIRQ>
}
 80041fe:	bf00      	nop
 8004200:	3708      	adds	r7, #8
 8004202:	46bd      	mov	sp, r7
 8004204:	bd80      	pop	{r7, pc}

08004206 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004206:	b580      	push	{r7, lr}
 8004208:	b082      	sub	sp, #8
 800420a:	af00      	add	r7, sp, #0
 800420c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800420e:	6878      	ldr	r0, [r7, #4]
 8004210:	f7ff ffa4 	bl	800415c <SysTick_Config>
 8004214:	4603      	mov	r3, r0
}
 8004216:	4618      	mov	r0, r3
 8004218:	3708      	adds	r7, #8
 800421a:	46bd      	mov	sp, r7
 800421c:	bd80      	pop	{r7, pc}

0800421e <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 800421e:	b580      	push	{r7, lr}
 8004220:	b082      	sub	sp, #8
 8004222:	af00      	add	r7, sp, #0
 8004224:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	2b00      	cmp	r3, #0
 800422a:	d101      	bne.n	8004230 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 800422c:	2301      	movs	r3, #1
 800422e:	e014      	b.n	800425a <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	791b      	ldrb	r3, [r3, #4]
 8004234:	b2db      	uxtb	r3, r3
 8004236:	2b00      	cmp	r3, #0
 8004238:	d105      	bne.n	8004246 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	2200      	movs	r2, #0
 800423e:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8004240:	6878      	ldr	r0, [r7, #4]
 8004242:	f7fd fc4b 	bl	8001adc <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	2202      	movs	r2, #2
 800424a:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2200      	movs	r2, #0
 8004250:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	2201      	movs	r2, #1
 8004256:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8004258:	2300      	movs	r3, #0
}
 800425a:	4618      	mov	r0, r3
 800425c:	3708      	adds	r7, #8
 800425e:	46bd      	mov	sp, r7
 8004260:	bd80      	pop	{r7, pc}
	...

08004264 <HAL_DAC_ConfigChannel>:
  *         (1) On this STM32 series, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8004264:	b580      	push	{r7, lr}
 8004266:	b08a      	sub	sp, #40	; 0x28
 8004268:	af00      	add	r7, sp, #0
 800426a:	60f8      	str	r0, [r7, #12]
 800426c:	60b9      	str	r1, [r7, #8]
 800426e:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	795b      	ldrb	r3, [r3, #5]
 8004274:	2b01      	cmp	r3, #1
 8004276:	d101      	bne.n	800427c <HAL_DAC_ConfigChannel+0x18>
 8004278:	2302      	movs	r3, #2
 800427a:	e192      	b.n	80045a2 <HAL_DAC_ConfigChannel+0x33e>
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	2201      	movs	r2, #1
 8004280:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	2202      	movs	r2, #2
 8004286:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8004288:	68bb      	ldr	r3, [r7, #8]
 800428a:	689b      	ldr	r3, [r3, #8]
 800428c:	2b04      	cmp	r3, #4
 800428e:	d174      	bne.n	800437a <HAL_DAC_ConfigChannel+0x116>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8004290:	f7fe fce6 	bl	8002c60 <HAL_GetTick>
 8004294:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	2b00      	cmp	r3, #0
 800429a:	d134      	bne.n	8004306 <HAL_DAC_ConfigChannel+0xa2>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800429c:	e011      	b.n	80042c2 <HAL_DAC_ConfigChannel+0x5e>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800429e:	f7fe fcdf 	bl	8002c60 <HAL_GetTick>
 80042a2:	4602      	mov	r2, r0
 80042a4:	69fb      	ldr	r3, [r7, #28]
 80042a6:	1ad3      	subs	r3, r2, r3
 80042a8:	2b01      	cmp	r3, #1
 80042aa:	d90a      	bls.n	80042c2 <HAL_DAC_ConfigChannel+0x5e>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	691b      	ldr	r3, [r3, #16]
 80042b0:	f043 0208 	orr.w	r2, r3, #8
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	2203      	movs	r2, #3
 80042bc:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 80042be:	2303      	movs	r3, #3
 80042c0:	e16f      	b.n	80045a2 <HAL_DAC_ConfigChannel+0x33e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042c8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d1e6      	bne.n	800429e <HAL_DAC_ConfigChannel+0x3a>
        }
      }
      HAL_Delay(1);
 80042d0:	2001      	movs	r0, #1
 80042d2:	f7fe fcd1 	bl	8002c78 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	68ba      	ldr	r2, [r7, #8]
 80042dc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80042de:	641a      	str	r2, [r3, #64]	; 0x40
 80042e0:	e01e      	b.n	8004320 <HAL_DAC_ConfigChannel+0xbc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80042e2:	f7fe fcbd 	bl	8002c60 <HAL_GetTick>
 80042e6:	4602      	mov	r2, r0
 80042e8:	69fb      	ldr	r3, [r7, #28]
 80042ea:	1ad3      	subs	r3, r2, r3
 80042ec:	2b01      	cmp	r3, #1
 80042ee:	d90a      	bls.n	8004306 <HAL_DAC_ConfigChannel+0xa2>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	691b      	ldr	r3, [r3, #16]
 80042f4:	f043 0208 	orr.w	r2, r3, #8
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	2203      	movs	r2, #3
 8004300:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8004302:	2303      	movs	r3, #3
 8004304:	e14d      	b.n	80045a2 <HAL_DAC_ConfigChannel+0x33e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800430c:	2b00      	cmp	r3, #0
 800430e:	dbe8      	blt.n	80042e2 <HAL_DAC_ConfigChannel+0x7e>
        }
      }
      HAL_Delay(1U);
 8004310:	2001      	movs	r0, #1
 8004312:	f7fe fcb1 	bl	8002c78 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	68ba      	ldr	r2, [r7, #8]
 800431c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800431e:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	f003 0310 	and.w	r3, r3, #16
 800432c:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8004330:	fa01 f303 	lsl.w	r3, r1, r3
 8004334:	43db      	mvns	r3, r3
 8004336:	ea02 0103 	and.w	r1, r2, r3
 800433a:	68bb      	ldr	r3, [r7, #8]
 800433c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	f003 0310 	and.w	r3, r3, #16
 8004344:	409a      	lsls	r2, r3
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	430a      	orrs	r2, r1
 800434c:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	f003 0310 	and.w	r3, r3, #16
 800435a:	21ff      	movs	r1, #255	; 0xff
 800435c:	fa01 f303 	lsl.w	r3, r1, r3
 8004360:	43db      	mvns	r3, r3
 8004362:	ea02 0103 	and.w	r1, r2, r3
 8004366:	68bb      	ldr	r3, [r7, #8]
 8004368:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	f003 0310 	and.w	r3, r3, #16
 8004370:	409a      	lsls	r2, r3
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	430a      	orrs	r2, r1
 8004378:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 800437a:	68bb      	ldr	r3, [r7, #8]
 800437c:	69db      	ldr	r3, [r3, #28]
 800437e:	2b01      	cmp	r3, #1
 8004380:	d11d      	bne.n	80043be <HAL_DAC_ConfigChannel+0x15a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004388:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	f003 0310 	and.w	r3, r3, #16
 8004390:	221f      	movs	r2, #31
 8004392:	fa02 f303 	lsl.w	r3, r2, r3
 8004396:	43db      	mvns	r3, r3
 8004398:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800439a:	4013      	ands	r3, r2
 800439c:	627b      	str	r3, [r7, #36]	; 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 800439e:	68bb      	ldr	r3, [r7, #8]
 80043a0:	6a1b      	ldr	r3, [r3, #32]
 80043a2:	61bb      	str	r3, [r7, #24]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	f003 0310 	and.w	r3, r3, #16
 80043aa:	69ba      	ldr	r2, [r7, #24]
 80043ac:	fa02 f303 	lsl.w	r3, r2, r3
 80043b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043b2:	4313      	orrs	r3, r2
 80043b4:	627b      	str	r3, [r7, #36]	; 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043bc:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043c4:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	f003 0310 	and.w	r3, r3, #16
 80043cc:	2207      	movs	r2, #7
 80043ce:	fa02 f303 	lsl.w	r3, r2, r3
 80043d2:	43db      	mvns	r3, r3
 80043d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043d6:	4013      	ands	r3, r2
 80043d8:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 80043da:	68bb      	ldr	r3, [r7, #8]
 80043dc:	699b      	ldr	r3, [r3, #24]
 80043de:	2b01      	cmp	r3, #1
 80043e0:	d102      	bne.n	80043e8 <HAL_DAC_ConfigChannel+0x184>
  {
    connectOnChip = 0x00000000UL;
 80043e2:	2300      	movs	r3, #0
 80043e4:	623b      	str	r3, [r7, #32]
 80043e6:	e00f      	b.n	8004408 <HAL_DAC_ConfigChannel+0x1a4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 80043e8:	68bb      	ldr	r3, [r7, #8]
 80043ea:	699b      	ldr	r3, [r3, #24]
 80043ec:	2b02      	cmp	r3, #2
 80043ee:	d102      	bne.n	80043f6 <HAL_DAC_ConfigChannel+0x192>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 80043f0:	2301      	movs	r3, #1
 80043f2:	623b      	str	r3, [r7, #32]
 80043f4:	e008      	b.n	8004408 <HAL_DAC_ConfigChannel+0x1a4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 80043f6:	68bb      	ldr	r3, [r7, #8]
 80043f8:	695b      	ldr	r3, [r3, #20]
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d102      	bne.n	8004404 <HAL_DAC_ConfigChannel+0x1a0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 80043fe:	2301      	movs	r3, #1
 8004400:	623b      	str	r3, [r7, #32]
 8004402:	e001      	b.n	8004408 <HAL_DAC_ConfigChannel+0x1a4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8004404:	2300      	movs	r3, #0
 8004406:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8004408:	68bb      	ldr	r3, [r7, #8]
 800440a:	689a      	ldr	r2, [r3, #8]
 800440c:	68bb      	ldr	r3, [r7, #8]
 800440e:	695b      	ldr	r3, [r3, #20]
 8004410:	4313      	orrs	r3, r2
 8004412:	6a3a      	ldr	r2, [r7, #32]
 8004414:	4313      	orrs	r3, r2
 8004416:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	f003 0310 	and.w	r3, r3, #16
 800441e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004422:	fa02 f303 	lsl.w	r3, r2, r3
 8004426:	43db      	mvns	r3, r3
 8004428:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800442a:	4013      	ands	r3, r2
 800442c:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 800442e:	68bb      	ldr	r3, [r7, #8]
 8004430:	791b      	ldrb	r3, [r3, #4]
 8004432:	2b01      	cmp	r3, #1
 8004434:	d102      	bne.n	800443c <HAL_DAC_ConfigChannel+0x1d8>
 8004436:	f44f 7380 	mov.w	r3, #256	; 0x100
 800443a:	e000      	b.n	800443e <HAL_DAC_ConfigChannel+0x1da>
 800443c:	2300      	movs	r3, #0
 800443e:	69ba      	ldr	r2, [r7, #24]
 8004440:	4313      	orrs	r3, r2
 8004442:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	f003 0310 	and.w	r3, r3, #16
 800444a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800444e:	fa02 f303 	lsl.w	r3, r2, r3
 8004452:	43db      	mvns	r3, r3
 8004454:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004456:	4013      	ands	r3, r2
 8004458:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 800445a:	68bb      	ldr	r3, [r7, #8]
 800445c:	795b      	ldrb	r3, [r3, #5]
 800445e:	2b01      	cmp	r3, #1
 8004460:	d102      	bne.n	8004468 <HAL_DAC_ConfigChannel+0x204>
 8004462:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004466:	e000      	b.n	800446a <HAL_DAC_ConfigChannel+0x206>
 8004468:	2300      	movs	r3, #0
 800446a:	69ba      	ldr	r2, [r7, #24]
 800446c:	4313      	orrs	r3, r2
 800446e:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 8004470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004472:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8004476:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 8004478:	68bb      	ldr	r3, [r7, #8]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	2b02      	cmp	r3, #2
 800447e:	d114      	bne.n	80044aa <HAL_DAC_ConfigChannel+0x246>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 8004480:	f001 fc1e 	bl	8005cc0 <HAL_RCC_GetHCLKFreq>
 8004484:	6178      	str	r0, [r7, #20]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 8004486:	697b      	ldr	r3, [r7, #20]
 8004488:	4a48      	ldr	r2, [pc, #288]	; (80045ac <HAL_DAC_ConfigChannel+0x348>)
 800448a:	4293      	cmp	r3, r2
 800448c:	d904      	bls.n	8004498 <HAL_DAC_ConfigChannel+0x234>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 800448e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004490:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004494:	627b      	str	r3, [r7, #36]	; 0x24
 8004496:	e00f      	b.n	80044b8 <HAL_DAC_ConfigChannel+0x254>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8004498:	697b      	ldr	r3, [r7, #20]
 800449a:	4a45      	ldr	r2, [pc, #276]	; (80045b0 <HAL_DAC_ConfigChannel+0x34c>)
 800449c:	4293      	cmp	r3, r2
 800449e:	d90a      	bls.n	80044b6 <HAL_DAC_ConfigChannel+0x252>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 80044a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044a2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80044a6:	627b      	str	r3, [r7, #36]	; 0x24
 80044a8:	e006      	b.n	80044b8 <HAL_DAC_ConfigChannel+0x254>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 80044aa:	68bb      	ldr	r3, [r7, #8]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044b0:	4313      	orrs	r3, r2
 80044b2:	627b      	str	r3, [r7, #36]	; 0x24
 80044b4:	e000      	b.n	80044b8 <HAL_DAC_ConfigChannel+0x254>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 80044b6:	bf00      	nop
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	f003 0310 	and.w	r3, r3, #16
 80044be:	69ba      	ldr	r2, [r7, #24]
 80044c0:	fa02 f303 	lsl.w	r3, r2, r3
 80044c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044c6:	4313      	orrs	r3, r2
 80044c8:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044d0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	6819      	ldr	r1, [r3, #0]
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	f003 0310 	and.w	r3, r3, #16
 80044de:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80044e2:	fa02 f303 	lsl.w	r3, r2, r3
 80044e6:	43da      	mvns	r2, r3
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	400a      	ands	r2, r1
 80044ee:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	f003 0310 	and.w	r3, r3, #16
 80044fe:	f640 72fe 	movw	r2, #4094	; 0xffe
 8004502:	fa02 f303 	lsl.w	r3, r2, r3
 8004506:	43db      	mvns	r3, r3
 8004508:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800450a:	4013      	ands	r3, r2
 800450c:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 800450e:	68bb      	ldr	r3, [r7, #8]
 8004510:	68db      	ldr	r3, [r3, #12]
 8004512:	61bb      	str	r3, [r7, #24]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	f003 0310 	and.w	r3, r3, #16
 800451a:	69ba      	ldr	r2, [r7, #24]
 800451c:	fa02 f303 	lsl.w	r3, r2, r3
 8004520:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004522:	4313      	orrs	r3, r2
 8004524:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800452c:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	6819      	ldr	r1, [r3, #0]
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	f003 0310 	and.w	r3, r3, #16
 800453a:	22c0      	movs	r2, #192	; 0xc0
 800453c:	fa02 f303 	lsl.w	r3, r2, r3
 8004540:	43da      	mvns	r2, r3
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	400a      	ands	r2, r1
 8004548:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 800454a:	68bb      	ldr	r3, [r7, #8]
 800454c:	68db      	ldr	r3, [r3, #12]
 800454e:	089b      	lsrs	r3, r3, #2
 8004550:	f003 030f 	and.w	r3, r3, #15
 8004554:	61bb      	str	r3, [r7, #24]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 8004556:	68bb      	ldr	r3, [r7, #8]
 8004558:	691b      	ldr	r3, [r3, #16]
 800455a:	089b      	lsrs	r3, r3, #2
 800455c:	021b      	lsls	r3, r3, #8
 800455e:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004562:	69ba      	ldr	r2, [r7, #24]
 8004564:	4313      	orrs	r3, r2
 8004566:	61bb      	str	r3, [r7, #24]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1) << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	f003 0310 	and.w	r3, r3, #16
 8004574:	f640 710f 	movw	r1, #3855	; 0xf0f
 8004578:	fa01 f303 	lsl.w	r3, r1, r3
 800457c:	43db      	mvns	r3, r3
 800457e:	ea02 0103 	and.w	r1, r2, r3
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	f003 0310 	and.w	r3, r3, #16
 8004588:	69ba      	ldr	r2, [r7, #24]
 800458a:	409a      	lsls	r2, r3
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	430a      	orrs	r2, r1
 8004592:	661a      	str	r2, [r3, #96]	; 0x60
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	2201      	movs	r2, #1
 8004598:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	2200      	movs	r2, #0
 800459e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80045a0:	2300      	movs	r3, #0
}
 80045a2:	4618      	mov	r0, r3
 80045a4:	3728      	adds	r7, #40	; 0x28
 80045a6:	46bd      	mov	sp, r7
 80045a8:	bd80      	pop	{r7, pc}
 80045aa:	bf00      	nop
 80045ac:	09896800 	.word	0x09896800
 80045b0:	04c4b400 	.word	0x04c4b400

080045b4 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 80045b4:	b580      	push	{r7, lr}
 80045b6:	b084      	sub	sp, #16
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d101      	bne.n	80045c6 <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 80045c2:	2301      	movs	r3, #1
 80045c4:	e147      	b.n	8004856 <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80045cc:	b2db      	uxtb	r3, r3
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d106      	bne.n	80045e0 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	2200      	movs	r2, #0
 80045d6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 80045da:	6878      	ldr	r0, [r7, #4]
 80045dc:	f7fd fa9e 	bl	8001b1c <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	699a      	ldr	r2, [r3, #24]
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f022 0210 	bic.w	r2, r2, #16
 80045ee:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80045f0:	f7fe fb36 	bl	8002c60 <HAL_GetTick>
 80045f4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80045f6:	e012      	b.n	800461e <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80045f8:	f7fe fb32 	bl	8002c60 <HAL_GetTick>
 80045fc:	4602      	mov	r2, r0
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	1ad3      	subs	r3, r2, r3
 8004602:	2b0a      	cmp	r3, #10
 8004604:	d90b      	bls.n	800461e <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800460a:	f043 0201 	orr.w	r2, r3, #1
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	2203      	movs	r2, #3
 8004616:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 800461a:	2301      	movs	r3, #1
 800461c:	e11b      	b.n	8004856 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	699b      	ldr	r3, [r3, #24]
 8004624:	f003 0308 	and.w	r3, r3, #8
 8004628:	2b08      	cmp	r3, #8
 800462a:	d0e5      	beq.n	80045f8 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	699a      	ldr	r2, [r3, #24]
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f042 0201 	orr.w	r2, r2, #1
 800463a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 800463c:	f7fe fb10 	bl	8002c60 <HAL_GetTick>
 8004640:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8004642:	e012      	b.n	800466a <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8004644:	f7fe fb0c 	bl	8002c60 <HAL_GetTick>
 8004648:	4602      	mov	r2, r0
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	1ad3      	subs	r3, r2, r3
 800464e:	2b0a      	cmp	r3, #10
 8004650:	d90b      	bls.n	800466a <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004656:	f043 0201 	orr.w	r2, r3, #1
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	2203      	movs	r2, #3
 8004662:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8004666:	2301      	movs	r3, #1
 8004668:	e0f5      	b.n	8004856 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	699b      	ldr	r3, [r3, #24]
 8004670:	f003 0301 	and.w	r3, r3, #1
 8004674:	2b00      	cmp	r3, #0
 8004676:	d0e5      	beq.n	8004644 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	699a      	ldr	r2, [r3, #24]
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f042 0202 	orr.w	r2, r2, #2
 8004686:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	4a74      	ldr	r2, [pc, #464]	; (8004860 <HAL_FDCAN_Init+0x2ac>)
 800468e:	4293      	cmp	r3, r2
 8004690:	d103      	bne.n	800469a <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8004692:	4a74      	ldr	r2, [pc, #464]	; (8004864 <HAL_FDCAN_Init+0x2b0>)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	685b      	ldr	r3, [r3, #4]
 8004698:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	7c1b      	ldrb	r3, [r3, #16]
 800469e:	2b01      	cmp	r3, #1
 80046a0:	d108      	bne.n	80046b4 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	699a      	ldr	r2, [r3, #24]
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80046b0:	619a      	str	r2, [r3, #24]
 80046b2:	e007      	b.n	80046c4 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	699a      	ldr	r2, [r3, #24]
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80046c2:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	7c5b      	ldrb	r3, [r3, #17]
 80046c8:	2b01      	cmp	r3, #1
 80046ca:	d108      	bne.n	80046de <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	699a      	ldr	r2, [r3, #24]
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80046da:	619a      	str	r2, [r3, #24]
 80046dc:	e007      	b.n	80046ee <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	699a      	ldr	r2, [r3, #24]
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80046ec:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	7c9b      	ldrb	r3, [r3, #18]
 80046f2:	2b01      	cmp	r3, #1
 80046f4:	d108      	bne.n	8004708 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	699a      	ldr	r2, [r3, #24]
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004704:	619a      	str	r2, [r3, #24]
 8004706:	e007      	b.n	8004718 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	699a      	ldr	r2, [r3, #24]
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004716:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	699b      	ldr	r3, [r3, #24]
 800471e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	689a      	ldr	r2, [r3, #8]
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	430a      	orrs	r2, r1
 800472c:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	699a      	ldr	r2, [r3, #24]
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 800473c:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	691a      	ldr	r2, [r3, #16]
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f022 0210 	bic.w	r2, r2, #16
 800474c:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	68db      	ldr	r3, [r3, #12]
 8004752:	2b01      	cmp	r3, #1
 8004754:	d108      	bne.n	8004768 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	699a      	ldr	r2, [r3, #24]
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f042 0204 	orr.w	r2, r2, #4
 8004764:	619a      	str	r2, [r3, #24]
 8004766:	e02c      	b.n	80047c2 <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	68db      	ldr	r3, [r3, #12]
 800476c:	2b00      	cmp	r3, #0
 800476e:	d028      	beq.n	80047c2 <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	68db      	ldr	r3, [r3, #12]
 8004774:	2b02      	cmp	r3, #2
 8004776:	d01c      	beq.n	80047b2 <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	699a      	ldr	r2, [r3, #24]
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004786:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	691a      	ldr	r2, [r3, #16]
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f042 0210 	orr.w	r2, r2, #16
 8004796:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	68db      	ldr	r3, [r3, #12]
 800479c:	2b03      	cmp	r3, #3
 800479e:	d110      	bne.n	80047c2 <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	699a      	ldr	r2, [r3, #24]
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f042 0220 	orr.w	r2, r2, #32
 80047ae:	619a      	str	r2, [r3, #24]
 80047b0:	e007      	b.n	80047c2 <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	699a      	ldr	r2, [r3, #24]
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f042 0220 	orr.w	r2, r2, #32
 80047c0:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	699b      	ldr	r3, [r3, #24]
 80047c6:	3b01      	subs	r3, #1
 80047c8:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	69db      	ldr	r3, [r3, #28]
 80047ce:	3b01      	subs	r3, #1
 80047d0:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80047d2:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	6a1b      	ldr	r3, [r3, #32]
 80047d8:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80047da:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	695b      	ldr	r3, [r3, #20]
 80047e2:	3b01      	subs	r3, #1
 80047e4:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80047ea:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80047ec:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	689b      	ldr	r3, [r3, #8]
 80047f2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80047f6:	d115      	bne.n	8004824 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047fc:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004802:	3b01      	subs	r3, #1
 8004804:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8004806:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800480c:	3b01      	subs	r3, #1
 800480e:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8004810:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004818:	3b01      	subs	r3, #1
 800481a:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8004820:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8004822:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	430a      	orrs	r2, r1
 8004836:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 800483a:	6878      	ldr	r0, [r7, #4]
 800483c:	f000 f9c2 	bl	8004bc4 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2200      	movs	r2, #0
 8004844:	659a      	str	r2, [r3, #88]	; 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	2200      	movs	r2, #0
 800484a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2201      	movs	r2, #1
 8004850:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return HAL_OK;
 8004854:	2300      	movs	r3, #0
}
 8004856:	4618      	mov	r0, r3
 8004858:	3710      	adds	r7, #16
 800485a:	46bd      	mov	sp, r7
 800485c:	bd80      	pop	{r7, pc}
 800485e:	bf00      	nop
 8004860:	40006400 	.word	0x40006400
 8004864:	40006500 	.word	0x40006500

08004868 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8004868:	b580      	push	{r7, lr}
 800486a:	b08a      	sub	sp, #40	; 0x28
 800486c:	af00      	add	r7, sp, #0
 800486e:	6078      	str	r0, [r7, #4]
  uint32_t Errors;
  uint32_t ErrorStatusITs;
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004876:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 800487a:	627b      	str	r3, [r7, #36]	; 0x24
  TxEventFifoITs &= hfdcan->Instance->IE;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004882:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004884:	4013      	ands	r3, r2
 8004886:	627b      	str	r3, [r7, #36]	; 0x24
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800488e:	f003 0307 	and.w	r3, r3, #7
 8004892:	623b      	str	r3, [r7, #32]
  RxFifo0ITs &= hfdcan->Instance->IE;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800489a:	6a3a      	ldr	r2, [r7, #32]
 800489c:	4013      	ands	r3, r2
 800489e:	623b      	str	r3, [r7, #32]
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048a6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80048aa:	61fb      	str	r3, [r7, #28]
  RxFifo1ITs &= hfdcan->Instance->IE;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048b2:	69fa      	ldr	r2, [r7, #28]
 80048b4:	4013      	ands	r3, r2
 80048b6:	61fb      	str	r3, [r7, #28]
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048be:	f403 0371 	and.w	r3, r3, #15794176	; 0xf10000
 80048c2:	61bb      	str	r3, [r7, #24]
  Errors &= hfdcan->Instance->IE;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048ca:	69ba      	ldr	r2, [r7, #24]
 80048cc:	4013      	ands	r3, r2
 80048ce:	61bb      	str	r3, [r7, #24]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048d6:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80048da:	617b      	str	r3, [r7, #20]
  ErrorStatusITs &= hfdcan->Instance->IE;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048e2:	697a      	ldr	r2, [r7, #20]
 80048e4:	4013      	ands	r3, r2
 80048e6:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != 0U)
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d00d      	beq.n	8004912 <HAL_FDCAN_IRQHandler+0xaa>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != 0U)
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004900:	2b00      	cmp	r3, #0
 8004902:	d006      	beq.n	8004912 <HAL_FDCAN_IRQHandler+0xaa>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	2240      	movs	r2, #64	; 0x40
 800490a:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 800490c:	6878      	ldr	r0, [r7, #4]
 800490e:	f000 f939 	bl	8004b84 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE) != 0U)
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004918:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800491c:	2b00      	cmp	r3, #0
 800491e:	d01b      	beq.n	8004958 <HAL_FDCAN_IRQHandler+0xf0>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004926:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800492a:	2b00      	cmp	r3, #0
 800492c:	d014      	beq.n	8004958 <HAL_FDCAN_IRQHandler+0xf0>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8004936:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004940:	693a      	ldr	r2, [r7, #16]
 8004942:	4013      	ands	r3, r2
 8004944:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800494e:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8004950:	6939      	ldr	r1, [r7, #16]
 8004952:	6878      	ldr	r0, [r7, #4]
 8004954:	f000 f8f7 	bl	8004b46 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8004958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800495a:	2b00      	cmp	r3, #0
 800495c:	d007      	beq.n	800496e <HAL_FDCAN_IRQHandler+0x106>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004964:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8004966:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004968:	6878      	ldr	r0, [r7, #4]
 800496a:	f000 f8b6 	bl	8004ada <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 800496e:	6a3b      	ldr	r3, [r7, #32]
 8004970:	2b00      	cmp	r3, #0
 8004972:	d007      	beq.n	8004984 <HAL_FDCAN_IRQHandler+0x11c>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	6a3a      	ldr	r2, [r7, #32]
 800497a:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 800497c:	6a39      	ldr	r1, [r7, #32]
 800497e:	6878      	ldr	r0, [r7, #4]
 8004980:	f000 f8b6 	bl	8004af0 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8004984:	69fb      	ldr	r3, [r7, #28]
 8004986:	2b00      	cmp	r3, #0
 8004988:	d007      	beq.n	800499a <HAL_FDCAN_IRQHandler+0x132>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	69fa      	ldr	r2, [r7, #28]
 8004990:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8004992:	69f9      	ldr	r1, [r7, #28]
 8004994:	6878      	ldr	r0, [r7, #4]
 8004996:	f000 f8b6 	bl	8004b06 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY) != 0U)
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80049a0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d00e      	beq.n	80049c6 <HAL_FDCAN_IRQHandler+0x15e>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_FIFO_EMPTY) != 0U)
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049ae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d007      	beq.n	80049c6 <HAL_FDCAN_IRQHandler+0x15e>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f44f 7200 	mov.w	r2, #512	; 0x200
 80049be:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 80049c0:	6878      	ldr	r0, [r7, #4]
 80049c2:	f000 f8ab 	bl	8004b1c <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE) != 0U)
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80049cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d01a      	beq.n	8004a0a <HAL_FDCAN_IRQHandler+0x1a2>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_COMPLETE) != 0U)
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d013      	beq.n	8004a0a <HAL_FDCAN_IRQHandler+0x1a2>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80049ea:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80049f4:	68fa      	ldr	r2, [r7, #12]
 80049f6:	4013      	ands	r3, r2
 80049f8:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	2280      	movs	r2, #128	; 0x80
 8004a00:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8004a02:	68f9      	ldr	r1, [r7, #12]
 8004a04:	6878      	ldr	r0, [r7, #4]
 8004a06:	f000 f893 	bl	8004b30 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != 0U)
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a10:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d00e      	beq.n	8004a36 <HAL_FDCAN_IRQHandler+0x1ce>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMESTAMP_WRAPAROUND) != 0U)
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a1e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d007      	beq.n	8004a36 <HAL_FDCAN_IRQHandler+0x1ce>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004a2e:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8004a30:	6878      	ldr	r0, [r7, #4]
 8004a32:	f000 f893 	bl	8004b5c <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED) != 0U)
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a3c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d00e      	beq.n	8004a62 <HAL_FDCAN_IRQHandler+0x1fa>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMEOUT_OCCURRED) != 0U)
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a4a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d007      	beq.n	8004a62 <HAL_FDCAN_IRQHandler+0x1fa>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8004a5a:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8004a5c:	6878      	ldr	r0, [r7, #4]
 8004a5e:	f000 f887 	bl	8004b70 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE) != 0U)
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a68:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d011      	beq.n	8004a94 <HAL_FDCAN_IRQHandler+0x22c>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RAM_ACCESS_FAILURE) != 0U)
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a76:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d00a      	beq.n	8004a94 <HAL_FDCAN_IRQHandler+0x22c>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004a86:	651a      	str	r2, [r3, #80]	; 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a8c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	661a      	str	r2, [r3, #96]	; 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8004a94:	697b      	ldr	r3, [r7, #20]
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d007      	beq.n	8004aaa <HAL_FDCAN_IRQHandler+0x242>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	697a      	ldr	r2, [r7, #20]
 8004aa0:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8004aa2:	6979      	ldr	r1, [r7, #20]
 8004aa4:	6878      	ldr	r0, [r7, #4]
 8004aa6:	f000 f881 	bl	8004bac <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8004aaa:	69bb      	ldr	r3, [r7, #24]
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d009      	beq.n	8004ac4 <HAL_FDCAN_IRQHandler+0x25c>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	69ba      	ldr	r2, [r7, #24]
 8004ab6:	651a      	str	r2, [r3, #80]	; 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004abc:	69bb      	ldr	r3, [r7, #24]
 8004abe:	431a      	orrs	r2, r3
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d002      	beq.n	8004ad2 <HAL_FDCAN_IRQHandler+0x26a>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8004acc:	6878      	ldr	r0, [r7, #4]
 8004ace:	f000 f863 	bl	8004b98 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8004ad2:	bf00      	nop
 8004ad4:	3728      	adds	r7, #40	; 0x28
 8004ad6:	46bd      	mov	sp, r7
 8004ad8:	bd80      	pop	{r7, pc}

08004ada <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signalled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8004ada:	b480      	push	{r7}
 8004adc:	b083      	sub	sp, #12
 8004ade:	af00      	add	r7, sp, #0
 8004ae0:	6078      	str	r0, [r7, #4]
 8004ae2:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8004ae4:	bf00      	nop
 8004ae6:	370c      	adds	r7, #12
 8004ae8:	46bd      	mov	sp, r7
 8004aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aee:	4770      	bx	lr

08004af0 <HAL_FDCAN_RxFifo0Callback>:
  * @param  RxFifo0ITs indicates which Rx FIFO 0 interrupts are signalled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo0_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 8004af0:	b480      	push	{r7}
 8004af2:	b083      	sub	sp, #12
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	6078      	str	r0, [r7, #4]
 8004af8:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo0ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo0Callback could be implemented in the user file
   */
}
 8004afa:	bf00      	nop
 8004afc:	370c      	adds	r7, #12
 8004afe:	46bd      	mov	sp, r7
 8004b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b04:	4770      	bx	lr

08004b06 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signalled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8004b06:	b480      	push	{r7}
 8004b08:	b083      	sub	sp, #12
 8004b0a:	af00      	add	r7, sp, #0
 8004b0c:	6078      	str	r0, [r7, #4]
 8004b0e:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 8004b10:	bf00      	nop
 8004b12:	370c      	adds	r7, #12
 8004b14:	46bd      	mov	sp, r7
 8004b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1a:	4770      	bx	lr

08004b1c <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8004b1c:	b480      	push	{r7}
 8004b1e:	b083      	sub	sp, #12
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8004b24:	bf00      	nop
 8004b26:	370c      	adds	r7, #12
 8004b28:	46bd      	mov	sp, r7
 8004b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2e:	4770      	bx	lr

08004b30 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8004b30:	b480      	push	{r7}
 8004b32:	b083      	sub	sp, #12
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	6078      	str	r0, [r7, #4]
 8004b38:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8004b3a:	bf00      	nop
 8004b3c:	370c      	adds	r7, #12
 8004b3e:	46bd      	mov	sp, r7
 8004b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b44:	4770      	bx	lr

08004b46 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8004b46:	b480      	push	{r7}
 8004b48:	b083      	sub	sp, #12
 8004b4a:	af00      	add	r7, sp, #0
 8004b4c:	6078      	str	r0, [r7, #4]
 8004b4e:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8004b50:	bf00      	nop
 8004b52:	370c      	adds	r7, #12
 8004b54:	46bd      	mov	sp, r7
 8004b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5a:	4770      	bx	lr

08004b5c <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8004b5c:	b480      	push	{r7}
 8004b5e:	b083      	sub	sp, #12
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8004b64:	bf00      	nop
 8004b66:	370c      	adds	r7, #12
 8004b68:	46bd      	mov	sp, r7
 8004b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6e:	4770      	bx	lr

08004b70 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8004b70:	b480      	push	{r7}
 8004b72:	b083      	sub	sp, #12
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8004b78:	bf00      	nop
 8004b7a:	370c      	adds	r7, #12
 8004b7c:	46bd      	mov	sp, r7
 8004b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b82:	4770      	bx	lr

08004b84 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8004b84:	b480      	push	{r7}
 8004b86:	b083      	sub	sp, #12
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8004b8c:	bf00      	nop
 8004b8e:	370c      	adds	r7, #12
 8004b90:	46bd      	mov	sp, r7
 8004b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b96:	4770      	bx	lr

08004b98 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8004b98:	b480      	push	{r7}
 8004b9a:	b083      	sub	sp, #12
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8004ba0:	bf00      	nop
 8004ba2:	370c      	adds	r7, #12
 8004ba4:	46bd      	mov	sp, r7
 8004ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004baa:	4770      	bx	lr

08004bac <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8004bac:	b480      	push	{r7}
 8004bae:	b083      	sub	sp, #12
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	6078      	str	r0, [r7, #4]
 8004bb4:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8004bb6:	bf00      	nop
 8004bb8:	370c      	adds	r7, #12
 8004bba:	46bd      	mov	sp, r7
 8004bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc0:	4770      	bx	lr
	...

08004bc4 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8004bc4:	b480      	push	{r7}
 8004bc6:	b085      	sub	sp, #20
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8004bcc:	4b27      	ldr	r3, [pc, #156]	; (8004c6c <FDCAN_CalcultateRamBlockAddresses+0xa8>)
 8004bce:	60bb      	str	r3, [r7, #8]
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	68ba      	ldr	r2, [r7, #8]
 8004bd4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004bde:	f423 11f8 	bic.w	r1, r3, #2031616	; 0x1f0000
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004be6:	041a      	lsls	r2, r3, #16
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	430a      	orrs	r2, r1
 8004bee:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8004bf2:	68bb      	ldr	r3, [r7, #8]
 8004bf4:	f103 0270 	add.w	r2, r3, #112	; 0x70
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	645a      	str	r2, [r3, #68]	; 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004c04:	f023 6170 	bic.w	r1, r3, #251658240	; 0xf000000
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c0c:	061a      	lsls	r2, r3, #24
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	430a      	orrs	r2, r1
 8004c14:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8004c18:	68bb      	ldr	r3, [r7, #8]
 8004c1a:	f103 02b0 	add.w	r2, r3, #176	; 0xb0
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	649a      	str	r2, [r3, #72]	; 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8004c22:	68bb      	ldr	r3, [r7, #8]
 8004c24:	f503 72c4 	add.w	r2, r3, #392	; 0x188
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8004c2c:	68bb      	ldr	r3, [r7, #8]
 8004c2e:	f503 7218 	add.w	r2, r3, #608	; 0x260
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	651a      	str	r2, [r3, #80]	; 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8004c36:	68bb      	ldr	r3, [r7, #8]
 8004c38:	f503 721e 	add.w	r2, r3, #632	; 0x278
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8004c40:	68bb      	ldr	r3, [r7, #8]
 8004c42:	60fb      	str	r3, [r7, #12]
 8004c44:	e005      	b.n	8004c52 <FDCAN_CalcultateRamBlockAddresses+0x8e>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	2200      	movs	r2, #0
 8004c4a:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	3304      	adds	r3, #4
 8004c50:	60fb      	str	r3, [r7, #12]
 8004c52:	68bb      	ldr	r3, [r7, #8]
 8004c54:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8004c58:	68fa      	ldr	r2, [r7, #12]
 8004c5a:	429a      	cmp	r2, r3
 8004c5c:	d3f3      	bcc.n	8004c46 <FDCAN_CalcultateRamBlockAddresses+0x82>
  }
}
 8004c5e:	bf00      	nop
 8004c60:	bf00      	nop
 8004c62:	3714      	adds	r7, #20
 8004c64:	46bd      	mov	sp, r7
 8004c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6a:	4770      	bx	lr
 8004c6c:	4000a400 	.word	0x4000a400

08004c70 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004c70:	b480      	push	{r7}
 8004c72:	b087      	sub	sp, #28
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	6078      	str	r0, [r7, #4]
 8004c78:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004c7a:	2300      	movs	r3, #0
 8004c7c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004c7e:	e15a      	b.n	8004f36 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004c80:	683b      	ldr	r3, [r7, #0]
 8004c82:	681a      	ldr	r2, [r3, #0]
 8004c84:	2101      	movs	r1, #1
 8004c86:	697b      	ldr	r3, [r7, #20]
 8004c88:	fa01 f303 	lsl.w	r3, r1, r3
 8004c8c:	4013      	ands	r3, r2
 8004c8e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	f000 814c 	beq.w	8004f30 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004c98:	683b      	ldr	r3, [r7, #0]
 8004c9a:	685b      	ldr	r3, [r3, #4]
 8004c9c:	f003 0303 	and.w	r3, r3, #3
 8004ca0:	2b01      	cmp	r3, #1
 8004ca2:	d005      	beq.n	8004cb0 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004ca4:	683b      	ldr	r3, [r7, #0]
 8004ca6:	685b      	ldr	r3, [r3, #4]
 8004ca8:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004cac:	2b02      	cmp	r3, #2
 8004cae:	d130      	bne.n	8004d12 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	689b      	ldr	r3, [r3, #8]
 8004cb4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004cb6:	697b      	ldr	r3, [r7, #20]
 8004cb8:	005b      	lsls	r3, r3, #1
 8004cba:	2203      	movs	r2, #3
 8004cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8004cc0:	43db      	mvns	r3, r3
 8004cc2:	693a      	ldr	r2, [r7, #16]
 8004cc4:	4013      	ands	r3, r2
 8004cc6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004cc8:	683b      	ldr	r3, [r7, #0]
 8004cca:	68da      	ldr	r2, [r3, #12]
 8004ccc:	697b      	ldr	r3, [r7, #20]
 8004cce:	005b      	lsls	r3, r3, #1
 8004cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8004cd4:	693a      	ldr	r2, [r7, #16]
 8004cd6:	4313      	orrs	r3, r2
 8004cd8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	693a      	ldr	r2, [r7, #16]
 8004cde:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	685b      	ldr	r3, [r3, #4]
 8004ce4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004ce6:	2201      	movs	r2, #1
 8004ce8:	697b      	ldr	r3, [r7, #20]
 8004cea:	fa02 f303 	lsl.w	r3, r2, r3
 8004cee:	43db      	mvns	r3, r3
 8004cf0:	693a      	ldr	r2, [r7, #16]
 8004cf2:	4013      	ands	r3, r2
 8004cf4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004cf6:	683b      	ldr	r3, [r7, #0]
 8004cf8:	685b      	ldr	r3, [r3, #4]
 8004cfa:	091b      	lsrs	r3, r3, #4
 8004cfc:	f003 0201 	and.w	r2, r3, #1
 8004d00:	697b      	ldr	r3, [r7, #20]
 8004d02:	fa02 f303 	lsl.w	r3, r2, r3
 8004d06:	693a      	ldr	r2, [r7, #16]
 8004d08:	4313      	orrs	r3, r2
 8004d0a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	693a      	ldr	r2, [r7, #16]
 8004d10:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004d12:	683b      	ldr	r3, [r7, #0]
 8004d14:	685b      	ldr	r3, [r3, #4]
 8004d16:	f003 0303 	and.w	r3, r3, #3
 8004d1a:	2b03      	cmp	r3, #3
 8004d1c:	d017      	beq.n	8004d4e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	68db      	ldr	r3, [r3, #12]
 8004d22:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004d24:	697b      	ldr	r3, [r7, #20]
 8004d26:	005b      	lsls	r3, r3, #1
 8004d28:	2203      	movs	r2, #3
 8004d2a:	fa02 f303 	lsl.w	r3, r2, r3
 8004d2e:	43db      	mvns	r3, r3
 8004d30:	693a      	ldr	r2, [r7, #16]
 8004d32:	4013      	ands	r3, r2
 8004d34:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004d36:	683b      	ldr	r3, [r7, #0]
 8004d38:	689a      	ldr	r2, [r3, #8]
 8004d3a:	697b      	ldr	r3, [r7, #20]
 8004d3c:	005b      	lsls	r3, r3, #1
 8004d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8004d42:	693a      	ldr	r2, [r7, #16]
 8004d44:	4313      	orrs	r3, r2
 8004d46:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	693a      	ldr	r2, [r7, #16]
 8004d4c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004d4e:	683b      	ldr	r3, [r7, #0]
 8004d50:	685b      	ldr	r3, [r3, #4]
 8004d52:	f003 0303 	and.w	r3, r3, #3
 8004d56:	2b02      	cmp	r3, #2
 8004d58:	d123      	bne.n	8004da2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004d5a:	697b      	ldr	r3, [r7, #20]
 8004d5c:	08da      	lsrs	r2, r3, #3
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	3208      	adds	r2, #8
 8004d62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004d66:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004d68:	697b      	ldr	r3, [r7, #20]
 8004d6a:	f003 0307 	and.w	r3, r3, #7
 8004d6e:	009b      	lsls	r3, r3, #2
 8004d70:	220f      	movs	r2, #15
 8004d72:	fa02 f303 	lsl.w	r3, r2, r3
 8004d76:	43db      	mvns	r3, r3
 8004d78:	693a      	ldr	r2, [r7, #16]
 8004d7a:	4013      	ands	r3, r2
 8004d7c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004d7e:	683b      	ldr	r3, [r7, #0]
 8004d80:	691a      	ldr	r2, [r3, #16]
 8004d82:	697b      	ldr	r3, [r7, #20]
 8004d84:	f003 0307 	and.w	r3, r3, #7
 8004d88:	009b      	lsls	r3, r3, #2
 8004d8a:	fa02 f303 	lsl.w	r3, r2, r3
 8004d8e:	693a      	ldr	r2, [r7, #16]
 8004d90:	4313      	orrs	r3, r2
 8004d92:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8004d94:	697b      	ldr	r3, [r7, #20]
 8004d96:	08da      	lsrs	r2, r3, #3
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	3208      	adds	r2, #8
 8004d9c:	6939      	ldr	r1, [r7, #16]
 8004d9e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004da8:	697b      	ldr	r3, [r7, #20]
 8004daa:	005b      	lsls	r3, r3, #1
 8004dac:	2203      	movs	r2, #3
 8004dae:	fa02 f303 	lsl.w	r3, r2, r3
 8004db2:	43db      	mvns	r3, r3
 8004db4:	693a      	ldr	r2, [r7, #16]
 8004db6:	4013      	ands	r3, r2
 8004db8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004dba:	683b      	ldr	r3, [r7, #0]
 8004dbc:	685b      	ldr	r3, [r3, #4]
 8004dbe:	f003 0203 	and.w	r2, r3, #3
 8004dc2:	697b      	ldr	r3, [r7, #20]
 8004dc4:	005b      	lsls	r3, r3, #1
 8004dc6:	fa02 f303 	lsl.w	r3, r2, r3
 8004dca:	693a      	ldr	r2, [r7, #16]
 8004dcc:	4313      	orrs	r3, r2
 8004dce:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	693a      	ldr	r2, [r7, #16]
 8004dd4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004dd6:	683b      	ldr	r3, [r7, #0]
 8004dd8:	685b      	ldr	r3, [r3, #4]
 8004dda:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	f000 80a6 	beq.w	8004f30 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004de4:	4b5b      	ldr	r3, [pc, #364]	; (8004f54 <HAL_GPIO_Init+0x2e4>)
 8004de6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004de8:	4a5a      	ldr	r2, [pc, #360]	; (8004f54 <HAL_GPIO_Init+0x2e4>)
 8004dea:	f043 0301 	orr.w	r3, r3, #1
 8004dee:	6613      	str	r3, [r2, #96]	; 0x60
 8004df0:	4b58      	ldr	r3, [pc, #352]	; (8004f54 <HAL_GPIO_Init+0x2e4>)
 8004df2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004df4:	f003 0301 	and.w	r3, r3, #1
 8004df8:	60bb      	str	r3, [r7, #8]
 8004dfa:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004dfc:	4a56      	ldr	r2, [pc, #344]	; (8004f58 <HAL_GPIO_Init+0x2e8>)
 8004dfe:	697b      	ldr	r3, [r7, #20]
 8004e00:	089b      	lsrs	r3, r3, #2
 8004e02:	3302      	adds	r3, #2
 8004e04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e08:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004e0a:	697b      	ldr	r3, [r7, #20]
 8004e0c:	f003 0303 	and.w	r3, r3, #3
 8004e10:	009b      	lsls	r3, r3, #2
 8004e12:	220f      	movs	r2, #15
 8004e14:	fa02 f303 	lsl.w	r3, r2, r3
 8004e18:	43db      	mvns	r3, r3
 8004e1a:	693a      	ldr	r2, [r7, #16]
 8004e1c:	4013      	ands	r3, r2
 8004e1e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004e26:	d01f      	beq.n	8004e68 <HAL_GPIO_Init+0x1f8>
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	4a4c      	ldr	r2, [pc, #304]	; (8004f5c <HAL_GPIO_Init+0x2ec>)
 8004e2c:	4293      	cmp	r3, r2
 8004e2e:	d019      	beq.n	8004e64 <HAL_GPIO_Init+0x1f4>
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	4a4b      	ldr	r2, [pc, #300]	; (8004f60 <HAL_GPIO_Init+0x2f0>)
 8004e34:	4293      	cmp	r3, r2
 8004e36:	d013      	beq.n	8004e60 <HAL_GPIO_Init+0x1f0>
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	4a4a      	ldr	r2, [pc, #296]	; (8004f64 <HAL_GPIO_Init+0x2f4>)
 8004e3c:	4293      	cmp	r3, r2
 8004e3e:	d00d      	beq.n	8004e5c <HAL_GPIO_Init+0x1ec>
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	4a49      	ldr	r2, [pc, #292]	; (8004f68 <HAL_GPIO_Init+0x2f8>)
 8004e44:	4293      	cmp	r3, r2
 8004e46:	d007      	beq.n	8004e58 <HAL_GPIO_Init+0x1e8>
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	4a48      	ldr	r2, [pc, #288]	; (8004f6c <HAL_GPIO_Init+0x2fc>)
 8004e4c:	4293      	cmp	r3, r2
 8004e4e:	d101      	bne.n	8004e54 <HAL_GPIO_Init+0x1e4>
 8004e50:	2305      	movs	r3, #5
 8004e52:	e00a      	b.n	8004e6a <HAL_GPIO_Init+0x1fa>
 8004e54:	2306      	movs	r3, #6
 8004e56:	e008      	b.n	8004e6a <HAL_GPIO_Init+0x1fa>
 8004e58:	2304      	movs	r3, #4
 8004e5a:	e006      	b.n	8004e6a <HAL_GPIO_Init+0x1fa>
 8004e5c:	2303      	movs	r3, #3
 8004e5e:	e004      	b.n	8004e6a <HAL_GPIO_Init+0x1fa>
 8004e60:	2302      	movs	r3, #2
 8004e62:	e002      	b.n	8004e6a <HAL_GPIO_Init+0x1fa>
 8004e64:	2301      	movs	r3, #1
 8004e66:	e000      	b.n	8004e6a <HAL_GPIO_Init+0x1fa>
 8004e68:	2300      	movs	r3, #0
 8004e6a:	697a      	ldr	r2, [r7, #20]
 8004e6c:	f002 0203 	and.w	r2, r2, #3
 8004e70:	0092      	lsls	r2, r2, #2
 8004e72:	4093      	lsls	r3, r2
 8004e74:	693a      	ldr	r2, [r7, #16]
 8004e76:	4313      	orrs	r3, r2
 8004e78:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004e7a:	4937      	ldr	r1, [pc, #220]	; (8004f58 <HAL_GPIO_Init+0x2e8>)
 8004e7c:	697b      	ldr	r3, [r7, #20]
 8004e7e:	089b      	lsrs	r3, r3, #2
 8004e80:	3302      	adds	r3, #2
 8004e82:	693a      	ldr	r2, [r7, #16]
 8004e84:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004e88:	4b39      	ldr	r3, [pc, #228]	; (8004f70 <HAL_GPIO_Init+0x300>)
 8004e8a:	689b      	ldr	r3, [r3, #8]
 8004e8c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	43db      	mvns	r3, r3
 8004e92:	693a      	ldr	r2, [r7, #16]
 8004e94:	4013      	ands	r3, r2
 8004e96:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004e98:	683b      	ldr	r3, [r7, #0]
 8004e9a:	685b      	ldr	r3, [r3, #4]
 8004e9c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d003      	beq.n	8004eac <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8004ea4:	693a      	ldr	r2, [r7, #16]
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	4313      	orrs	r3, r2
 8004eaa:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004eac:	4a30      	ldr	r2, [pc, #192]	; (8004f70 <HAL_GPIO_Init+0x300>)
 8004eae:	693b      	ldr	r3, [r7, #16]
 8004eb0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004eb2:	4b2f      	ldr	r3, [pc, #188]	; (8004f70 <HAL_GPIO_Init+0x300>)
 8004eb4:	68db      	ldr	r3, [r3, #12]
 8004eb6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	43db      	mvns	r3, r3
 8004ebc:	693a      	ldr	r2, [r7, #16]
 8004ebe:	4013      	ands	r3, r2
 8004ec0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004ec2:	683b      	ldr	r3, [r7, #0]
 8004ec4:	685b      	ldr	r3, [r3, #4]
 8004ec6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d003      	beq.n	8004ed6 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8004ece:	693a      	ldr	r2, [r7, #16]
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	4313      	orrs	r3, r2
 8004ed4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004ed6:	4a26      	ldr	r2, [pc, #152]	; (8004f70 <HAL_GPIO_Init+0x300>)
 8004ed8:	693b      	ldr	r3, [r7, #16]
 8004eda:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8004edc:	4b24      	ldr	r3, [pc, #144]	; (8004f70 <HAL_GPIO_Init+0x300>)
 8004ede:	685b      	ldr	r3, [r3, #4]
 8004ee0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	43db      	mvns	r3, r3
 8004ee6:	693a      	ldr	r2, [r7, #16]
 8004ee8:	4013      	ands	r3, r2
 8004eea:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004eec:	683b      	ldr	r3, [r7, #0]
 8004eee:	685b      	ldr	r3, [r3, #4]
 8004ef0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d003      	beq.n	8004f00 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8004ef8:	693a      	ldr	r2, [r7, #16]
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	4313      	orrs	r3, r2
 8004efe:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004f00:	4a1b      	ldr	r2, [pc, #108]	; (8004f70 <HAL_GPIO_Init+0x300>)
 8004f02:	693b      	ldr	r3, [r7, #16]
 8004f04:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004f06:	4b1a      	ldr	r3, [pc, #104]	; (8004f70 <HAL_GPIO_Init+0x300>)
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	43db      	mvns	r3, r3
 8004f10:	693a      	ldr	r2, [r7, #16]
 8004f12:	4013      	ands	r3, r2
 8004f14:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004f16:	683b      	ldr	r3, [r7, #0]
 8004f18:	685b      	ldr	r3, [r3, #4]
 8004f1a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d003      	beq.n	8004f2a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8004f22:	693a      	ldr	r2, [r7, #16]
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	4313      	orrs	r3, r2
 8004f28:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004f2a:	4a11      	ldr	r2, [pc, #68]	; (8004f70 <HAL_GPIO_Init+0x300>)
 8004f2c:	693b      	ldr	r3, [r7, #16]
 8004f2e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004f30:	697b      	ldr	r3, [r7, #20]
 8004f32:	3301      	adds	r3, #1
 8004f34:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004f36:	683b      	ldr	r3, [r7, #0]
 8004f38:	681a      	ldr	r2, [r3, #0]
 8004f3a:	697b      	ldr	r3, [r7, #20]
 8004f3c:	fa22 f303 	lsr.w	r3, r2, r3
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	f47f ae9d 	bne.w	8004c80 <HAL_GPIO_Init+0x10>
  }
}
 8004f46:	bf00      	nop
 8004f48:	bf00      	nop
 8004f4a:	371c      	adds	r7, #28
 8004f4c:	46bd      	mov	sp, r7
 8004f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f52:	4770      	bx	lr
 8004f54:	40021000 	.word	0x40021000
 8004f58:	40010000 	.word	0x40010000
 8004f5c:	48000400 	.word	0x48000400
 8004f60:	48000800 	.word	0x48000800
 8004f64:	48000c00 	.word	0x48000c00
 8004f68:	48001000 	.word	0x48001000
 8004f6c:	48001400 	.word	0x48001400
 8004f70:	40010400 	.word	0x40010400

08004f74 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004f74:	b480      	push	{r7}
 8004f76:	b083      	sub	sp, #12
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	6078      	str	r0, [r7, #4]
 8004f7c:	460b      	mov	r3, r1
 8004f7e:	807b      	strh	r3, [r7, #2]
 8004f80:	4613      	mov	r3, r2
 8004f82:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004f84:	787b      	ldrb	r3, [r7, #1]
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d003      	beq.n	8004f92 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004f8a:	887a      	ldrh	r2, [r7, #2]
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004f90:	e002      	b.n	8004f98 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004f92:	887a      	ldrh	r2, [r7, #2]
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004f98:	bf00      	nop
 8004f9a:	370c      	adds	r7, #12
 8004f9c:	46bd      	mov	sp, r7
 8004f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa2:	4770      	bx	lr

08004fa4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004fa4:	b580      	push	{r7, lr}
 8004fa6:	b082      	sub	sp, #8
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d101      	bne.n	8004fb6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004fb2:	2301      	movs	r3, #1
 8004fb4:	e081      	b.n	80050ba <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004fbc:	b2db      	uxtb	r3, r3
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d106      	bne.n	8004fd0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	2200      	movs	r2, #0
 8004fc6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004fca:	6878      	ldr	r0, [r7, #4]
 8004fcc:	f7fc fe08 	bl	8001be0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2224      	movs	r2, #36	; 0x24
 8004fd4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	681a      	ldr	r2, [r3, #0]
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	f022 0201 	bic.w	r2, r2, #1
 8004fe6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	685a      	ldr	r2, [r3, #4]
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004ff4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	689a      	ldr	r2, [r3, #8]
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005004:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	68db      	ldr	r3, [r3, #12]
 800500a:	2b01      	cmp	r3, #1
 800500c:	d107      	bne.n	800501e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	689a      	ldr	r2, [r3, #8]
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800501a:	609a      	str	r2, [r3, #8]
 800501c:	e006      	b.n	800502c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	689a      	ldr	r2, [r3, #8]
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800502a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	68db      	ldr	r3, [r3, #12]
 8005030:	2b02      	cmp	r3, #2
 8005032:	d104      	bne.n	800503e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800503c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	685b      	ldr	r3, [r3, #4]
 8005044:	687a      	ldr	r2, [r7, #4]
 8005046:	6812      	ldr	r2, [r2, #0]
 8005048:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800504c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005050:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	68da      	ldr	r2, [r3, #12]
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005060:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	691a      	ldr	r2, [r3, #16]
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	695b      	ldr	r3, [r3, #20]
 800506a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	699b      	ldr	r3, [r3, #24]
 8005072:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	430a      	orrs	r2, r1
 800507a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	69d9      	ldr	r1, [r3, #28]
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	6a1a      	ldr	r2, [r3, #32]
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	430a      	orrs	r2, r1
 800508a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	681a      	ldr	r2, [r3, #0]
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	f042 0201 	orr.w	r2, r2, #1
 800509a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	2200      	movs	r2, #0
 80050a0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	2220      	movs	r2, #32
 80050a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	2200      	movs	r2, #0
 80050ae:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	2200      	movs	r2, #0
 80050b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80050b8:	2300      	movs	r3, #0
}
 80050ba:	4618      	mov	r0, r3
 80050bc:	3708      	adds	r7, #8
 80050be:	46bd      	mov	sp, r7
 80050c0:	bd80      	pop	{r7, pc}

080050c2 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80050c2:	b480      	push	{r7}
 80050c4:	b083      	sub	sp, #12
 80050c6:	af00      	add	r7, sp, #0
 80050c8:	6078      	str	r0, [r7, #4]
 80050ca:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80050d2:	b2db      	uxtb	r3, r3
 80050d4:	2b20      	cmp	r3, #32
 80050d6:	d138      	bne.n	800514a <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80050de:	2b01      	cmp	r3, #1
 80050e0:	d101      	bne.n	80050e6 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80050e2:	2302      	movs	r3, #2
 80050e4:	e032      	b.n	800514c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	2201      	movs	r2, #1
 80050ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	2224      	movs	r2, #36	; 0x24
 80050f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	681a      	ldr	r2, [r3, #0]
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f022 0201 	bic.w	r2, r2, #1
 8005104:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	681a      	ldr	r2, [r3, #0]
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005114:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	6819      	ldr	r1, [r3, #0]
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	683a      	ldr	r2, [r7, #0]
 8005122:	430a      	orrs	r2, r1
 8005124:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	681a      	ldr	r2, [r3, #0]
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f042 0201 	orr.w	r2, r2, #1
 8005134:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	2220      	movs	r2, #32
 800513a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	2200      	movs	r2, #0
 8005142:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005146:	2300      	movs	r3, #0
 8005148:	e000      	b.n	800514c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800514a:	2302      	movs	r3, #2
  }
}
 800514c:	4618      	mov	r0, r3
 800514e:	370c      	adds	r7, #12
 8005150:	46bd      	mov	sp, r7
 8005152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005156:	4770      	bx	lr

08005158 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005158:	b480      	push	{r7}
 800515a:	b085      	sub	sp, #20
 800515c:	af00      	add	r7, sp, #0
 800515e:	6078      	str	r0, [r7, #4]
 8005160:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005168:	b2db      	uxtb	r3, r3
 800516a:	2b20      	cmp	r3, #32
 800516c:	d139      	bne.n	80051e2 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005174:	2b01      	cmp	r3, #1
 8005176:	d101      	bne.n	800517c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005178:	2302      	movs	r3, #2
 800517a:	e033      	b.n	80051e4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2201      	movs	r2, #1
 8005180:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	2224      	movs	r2, #36	; 0x24
 8005188:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	681a      	ldr	r2, [r3, #0]
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	f022 0201 	bic.w	r2, r2, #1
 800519a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80051aa:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80051ac:	683b      	ldr	r3, [r7, #0]
 80051ae:	021b      	lsls	r3, r3, #8
 80051b0:	68fa      	ldr	r2, [r7, #12]
 80051b2:	4313      	orrs	r3, r2
 80051b4:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	68fa      	ldr	r2, [r7, #12]
 80051bc:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	681a      	ldr	r2, [r3, #0]
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	f042 0201 	orr.w	r2, r2, #1
 80051cc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	2220      	movs	r2, #32
 80051d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	2200      	movs	r2, #0
 80051da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80051de:	2300      	movs	r3, #0
 80051e0:	e000      	b.n	80051e4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80051e2:	2302      	movs	r3, #2
  }
}
 80051e4:	4618      	mov	r0, r3
 80051e6:	3714      	adds	r7, #20
 80051e8:	46bd      	mov	sp, r7
 80051ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ee:	4770      	bx	lr

080051f0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80051f0:	b480      	push	{r7}
 80051f2:	b085      	sub	sp, #20
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d141      	bne.n	8005282 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80051fe:	4b4b      	ldr	r3, [pc, #300]	; (800532c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005206:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800520a:	d131      	bne.n	8005270 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800520c:	4b47      	ldr	r3, [pc, #284]	; (800532c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800520e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005212:	4a46      	ldr	r2, [pc, #280]	; (800532c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005214:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005218:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800521c:	4b43      	ldr	r3, [pc, #268]	; (800532c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005224:	4a41      	ldr	r2, [pc, #260]	; (800532c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005226:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800522a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800522c:	4b40      	ldr	r3, [pc, #256]	; (8005330 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	2232      	movs	r2, #50	; 0x32
 8005232:	fb02 f303 	mul.w	r3, r2, r3
 8005236:	4a3f      	ldr	r2, [pc, #252]	; (8005334 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005238:	fba2 2303 	umull	r2, r3, r2, r3
 800523c:	0c9b      	lsrs	r3, r3, #18
 800523e:	3301      	adds	r3, #1
 8005240:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005242:	e002      	b.n	800524a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	3b01      	subs	r3, #1
 8005248:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800524a:	4b38      	ldr	r3, [pc, #224]	; (800532c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800524c:	695b      	ldr	r3, [r3, #20]
 800524e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005252:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005256:	d102      	bne.n	800525e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	2b00      	cmp	r3, #0
 800525c:	d1f2      	bne.n	8005244 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800525e:	4b33      	ldr	r3, [pc, #204]	; (800532c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005260:	695b      	ldr	r3, [r3, #20]
 8005262:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005266:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800526a:	d158      	bne.n	800531e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800526c:	2303      	movs	r3, #3
 800526e:	e057      	b.n	8005320 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005270:	4b2e      	ldr	r3, [pc, #184]	; (800532c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005272:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005276:	4a2d      	ldr	r2, [pc, #180]	; (800532c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005278:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800527c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8005280:	e04d      	b.n	800531e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005288:	d141      	bne.n	800530e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800528a:	4b28      	ldr	r3, [pc, #160]	; (800532c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005292:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005296:	d131      	bne.n	80052fc <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005298:	4b24      	ldr	r3, [pc, #144]	; (800532c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800529a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800529e:	4a23      	ldr	r2, [pc, #140]	; (800532c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80052a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80052a4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80052a8:	4b20      	ldr	r3, [pc, #128]	; (800532c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80052b0:	4a1e      	ldr	r2, [pc, #120]	; (800532c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80052b2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80052b6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80052b8:	4b1d      	ldr	r3, [pc, #116]	; (8005330 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	2232      	movs	r2, #50	; 0x32
 80052be:	fb02 f303 	mul.w	r3, r2, r3
 80052c2:	4a1c      	ldr	r2, [pc, #112]	; (8005334 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80052c4:	fba2 2303 	umull	r2, r3, r2, r3
 80052c8:	0c9b      	lsrs	r3, r3, #18
 80052ca:	3301      	adds	r3, #1
 80052cc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80052ce:	e002      	b.n	80052d6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	3b01      	subs	r3, #1
 80052d4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80052d6:	4b15      	ldr	r3, [pc, #84]	; (800532c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80052d8:	695b      	ldr	r3, [r3, #20]
 80052da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80052de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80052e2:	d102      	bne.n	80052ea <HAL_PWREx_ControlVoltageScaling+0xfa>
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d1f2      	bne.n	80052d0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80052ea:	4b10      	ldr	r3, [pc, #64]	; (800532c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80052ec:	695b      	ldr	r3, [r3, #20]
 80052ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80052f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80052f6:	d112      	bne.n	800531e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80052f8:	2303      	movs	r3, #3
 80052fa:	e011      	b.n	8005320 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80052fc:	4b0b      	ldr	r3, [pc, #44]	; (800532c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80052fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005302:	4a0a      	ldr	r2, [pc, #40]	; (800532c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005304:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005308:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800530c:	e007      	b.n	800531e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800530e:	4b07      	ldr	r3, [pc, #28]	; (800532c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005316:	4a05      	ldr	r2, [pc, #20]	; (800532c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005318:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800531c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800531e:	2300      	movs	r3, #0
}
 8005320:	4618      	mov	r0, r3
 8005322:	3714      	adds	r7, #20
 8005324:	46bd      	mov	sp, r7
 8005326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532a:	4770      	bx	lr
 800532c:	40007000 	.word	0x40007000
 8005330:	20000000 	.word	0x20000000
 8005334:	431bde83 	.word	0x431bde83

08005338 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8005338:	b480      	push	{r7}
 800533a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800533c:	4b05      	ldr	r3, [pc, #20]	; (8005354 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800533e:	689b      	ldr	r3, [r3, #8]
 8005340:	4a04      	ldr	r2, [pc, #16]	; (8005354 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8005342:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005346:	6093      	str	r3, [r2, #8]
}
 8005348:	bf00      	nop
 800534a:	46bd      	mov	sp, r7
 800534c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005350:	4770      	bx	lr
 8005352:	bf00      	nop
 8005354:	40007000 	.word	0x40007000

08005358 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005358:	b580      	push	{r7, lr}
 800535a:	b088      	sub	sp, #32
 800535c:	af00      	add	r7, sp, #0
 800535e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	2b00      	cmp	r3, #0
 8005364:	d101      	bne.n	800536a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005366:	2301      	movs	r3, #1
 8005368:	e306      	b.n	8005978 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	f003 0301 	and.w	r3, r3, #1
 8005372:	2b00      	cmp	r3, #0
 8005374:	d075      	beq.n	8005462 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005376:	4b97      	ldr	r3, [pc, #604]	; (80055d4 <HAL_RCC_OscConfig+0x27c>)
 8005378:	689b      	ldr	r3, [r3, #8]
 800537a:	f003 030c 	and.w	r3, r3, #12
 800537e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005380:	4b94      	ldr	r3, [pc, #592]	; (80055d4 <HAL_RCC_OscConfig+0x27c>)
 8005382:	68db      	ldr	r3, [r3, #12]
 8005384:	f003 0303 	and.w	r3, r3, #3
 8005388:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800538a:	69bb      	ldr	r3, [r7, #24]
 800538c:	2b0c      	cmp	r3, #12
 800538e:	d102      	bne.n	8005396 <HAL_RCC_OscConfig+0x3e>
 8005390:	697b      	ldr	r3, [r7, #20]
 8005392:	2b03      	cmp	r3, #3
 8005394:	d002      	beq.n	800539c <HAL_RCC_OscConfig+0x44>
 8005396:	69bb      	ldr	r3, [r7, #24]
 8005398:	2b08      	cmp	r3, #8
 800539a:	d10b      	bne.n	80053b4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800539c:	4b8d      	ldr	r3, [pc, #564]	; (80055d4 <HAL_RCC_OscConfig+0x27c>)
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d05b      	beq.n	8005460 <HAL_RCC_OscConfig+0x108>
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	685b      	ldr	r3, [r3, #4]
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d157      	bne.n	8005460 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80053b0:	2301      	movs	r3, #1
 80053b2:	e2e1      	b.n	8005978 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	685b      	ldr	r3, [r3, #4]
 80053b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80053bc:	d106      	bne.n	80053cc <HAL_RCC_OscConfig+0x74>
 80053be:	4b85      	ldr	r3, [pc, #532]	; (80055d4 <HAL_RCC_OscConfig+0x27c>)
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	4a84      	ldr	r2, [pc, #528]	; (80055d4 <HAL_RCC_OscConfig+0x27c>)
 80053c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80053c8:	6013      	str	r3, [r2, #0]
 80053ca:	e01d      	b.n	8005408 <HAL_RCC_OscConfig+0xb0>
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	685b      	ldr	r3, [r3, #4]
 80053d0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80053d4:	d10c      	bne.n	80053f0 <HAL_RCC_OscConfig+0x98>
 80053d6:	4b7f      	ldr	r3, [pc, #508]	; (80055d4 <HAL_RCC_OscConfig+0x27c>)
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	4a7e      	ldr	r2, [pc, #504]	; (80055d4 <HAL_RCC_OscConfig+0x27c>)
 80053dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80053e0:	6013      	str	r3, [r2, #0]
 80053e2:	4b7c      	ldr	r3, [pc, #496]	; (80055d4 <HAL_RCC_OscConfig+0x27c>)
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	4a7b      	ldr	r2, [pc, #492]	; (80055d4 <HAL_RCC_OscConfig+0x27c>)
 80053e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80053ec:	6013      	str	r3, [r2, #0]
 80053ee:	e00b      	b.n	8005408 <HAL_RCC_OscConfig+0xb0>
 80053f0:	4b78      	ldr	r3, [pc, #480]	; (80055d4 <HAL_RCC_OscConfig+0x27c>)
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	4a77      	ldr	r2, [pc, #476]	; (80055d4 <HAL_RCC_OscConfig+0x27c>)
 80053f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80053fa:	6013      	str	r3, [r2, #0]
 80053fc:	4b75      	ldr	r3, [pc, #468]	; (80055d4 <HAL_RCC_OscConfig+0x27c>)
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	4a74      	ldr	r2, [pc, #464]	; (80055d4 <HAL_RCC_OscConfig+0x27c>)
 8005402:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005406:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	685b      	ldr	r3, [r3, #4]
 800540c:	2b00      	cmp	r3, #0
 800540e:	d013      	beq.n	8005438 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005410:	f7fd fc26 	bl	8002c60 <HAL_GetTick>
 8005414:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005416:	e008      	b.n	800542a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005418:	f7fd fc22 	bl	8002c60 <HAL_GetTick>
 800541c:	4602      	mov	r2, r0
 800541e:	693b      	ldr	r3, [r7, #16]
 8005420:	1ad3      	subs	r3, r2, r3
 8005422:	2b64      	cmp	r3, #100	; 0x64
 8005424:	d901      	bls.n	800542a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005426:	2303      	movs	r3, #3
 8005428:	e2a6      	b.n	8005978 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800542a:	4b6a      	ldr	r3, [pc, #424]	; (80055d4 <HAL_RCC_OscConfig+0x27c>)
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005432:	2b00      	cmp	r3, #0
 8005434:	d0f0      	beq.n	8005418 <HAL_RCC_OscConfig+0xc0>
 8005436:	e014      	b.n	8005462 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005438:	f7fd fc12 	bl	8002c60 <HAL_GetTick>
 800543c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800543e:	e008      	b.n	8005452 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005440:	f7fd fc0e 	bl	8002c60 <HAL_GetTick>
 8005444:	4602      	mov	r2, r0
 8005446:	693b      	ldr	r3, [r7, #16]
 8005448:	1ad3      	subs	r3, r2, r3
 800544a:	2b64      	cmp	r3, #100	; 0x64
 800544c:	d901      	bls.n	8005452 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800544e:	2303      	movs	r3, #3
 8005450:	e292      	b.n	8005978 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005452:	4b60      	ldr	r3, [pc, #384]	; (80055d4 <HAL_RCC_OscConfig+0x27c>)
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800545a:	2b00      	cmp	r3, #0
 800545c:	d1f0      	bne.n	8005440 <HAL_RCC_OscConfig+0xe8>
 800545e:	e000      	b.n	8005462 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005460:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	f003 0302 	and.w	r3, r3, #2
 800546a:	2b00      	cmp	r3, #0
 800546c:	d075      	beq.n	800555a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800546e:	4b59      	ldr	r3, [pc, #356]	; (80055d4 <HAL_RCC_OscConfig+0x27c>)
 8005470:	689b      	ldr	r3, [r3, #8]
 8005472:	f003 030c 	and.w	r3, r3, #12
 8005476:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005478:	4b56      	ldr	r3, [pc, #344]	; (80055d4 <HAL_RCC_OscConfig+0x27c>)
 800547a:	68db      	ldr	r3, [r3, #12]
 800547c:	f003 0303 	and.w	r3, r3, #3
 8005480:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8005482:	69bb      	ldr	r3, [r7, #24]
 8005484:	2b0c      	cmp	r3, #12
 8005486:	d102      	bne.n	800548e <HAL_RCC_OscConfig+0x136>
 8005488:	697b      	ldr	r3, [r7, #20]
 800548a:	2b02      	cmp	r3, #2
 800548c:	d002      	beq.n	8005494 <HAL_RCC_OscConfig+0x13c>
 800548e:	69bb      	ldr	r3, [r7, #24]
 8005490:	2b04      	cmp	r3, #4
 8005492:	d11f      	bne.n	80054d4 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005494:	4b4f      	ldr	r3, [pc, #316]	; (80055d4 <HAL_RCC_OscConfig+0x27c>)
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800549c:	2b00      	cmp	r3, #0
 800549e:	d005      	beq.n	80054ac <HAL_RCC_OscConfig+0x154>
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	68db      	ldr	r3, [r3, #12]
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d101      	bne.n	80054ac <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80054a8:	2301      	movs	r3, #1
 80054aa:	e265      	b.n	8005978 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80054ac:	4b49      	ldr	r3, [pc, #292]	; (80055d4 <HAL_RCC_OscConfig+0x27c>)
 80054ae:	685b      	ldr	r3, [r3, #4]
 80054b0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	691b      	ldr	r3, [r3, #16]
 80054b8:	061b      	lsls	r3, r3, #24
 80054ba:	4946      	ldr	r1, [pc, #280]	; (80055d4 <HAL_RCC_OscConfig+0x27c>)
 80054bc:	4313      	orrs	r3, r2
 80054be:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80054c0:	4b45      	ldr	r3, [pc, #276]	; (80055d8 <HAL_RCC_OscConfig+0x280>)
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	4618      	mov	r0, r3
 80054c6:	f7fd fb7f 	bl	8002bc8 <HAL_InitTick>
 80054ca:	4603      	mov	r3, r0
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d043      	beq.n	8005558 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80054d0:	2301      	movs	r3, #1
 80054d2:	e251      	b.n	8005978 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	68db      	ldr	r3, [r3, #12]
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d023      	beq.n	8005524 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80054dc:	4b3d      	ldr	r3, [pc, #244]	; (80055d4 <HAL_RCC_OscConfig+0x27c>)
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	4a3c      	ldr	r2, [pc, #240]	; (80055d4 <HAL_RCC_OscConfig+0x27c>)
 80054e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80054e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054e8:	f7fd fbba 	bl	8002c60 <HAL_GetTick>
 80054ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80054ee:	e008      	b.n	8005502 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80054f0:	f7fd fbb6 	bl	8002c60 <HAL_GetTick>
 80054f4:	4602      	mov	r2, r0
 80054f6:	693b      	ldr	r3, [r7, #16]
 80054f8:	1ad3      	subs	r3, r2, r3
 80054fa:	2b02      	cmp	r3, #2
 80054fc:	d901      	bls.n	8005502 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80054fe:	2303      	movs	r3, #3
 8005500:	e23a      	b.n	8005978 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005502:	4b34      	ldr	r3, [pc, #208]	; (80055d4 <HAL_RCC_OscConfig+0x27c>)
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800550a:	2b00      	cmp	r3, #0
 800550c:	d0f0      	beq.n	80054f0 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800550e:	4b31      	ldr	r3, [pc, #196]	; (80055d4 <HAL_RCC_OscConfig+0x27c>)
 8005510:	685b      	ldr	r3, [r3, #4]
 8005512:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	691b      	ldr	r3, [r3, #16]
 800551a:	061b      	lsls	r3, r3, #24
 800551c:	492d      	ldr	r1, [pc, #180]	; (80055d4 <HAL_RCC_OscConfig+0x27c>)
 800551e:	4313      	orrs	r3, r2
 8005520:	604b      	str	r3, [r1, #4]
 8005522:	e01a      	b.n	800555a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005524:	4b2b      	ldr	r3, [pc, #172]	; (80055d4 <HAL_RCC_OscConfig+0x27c>)
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	4a2a      	ldr	r2, [pc, #168]	; (80055d4 <HAL_RCC_OscConfig+0x27c>)
 800552a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800552e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005530:	f7fd fb96 	bl	8002c60 <HAL_GetTick>
 8005534:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005536:	e008      	b.n	800554a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005538:	f7fd fb92 	bl	8002c60 <HAL_GetTick>
 800553c:	4602      	mov	r2, r0
 800553e:	693b      	ldr	r3, [r7, #16]
 8005540:	1ad3      	subs	r3, r2, r3
 8005542:	2b02      	cmp	r3, #2
 8005544:	d901      	bls.n	800554a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8005546:	2303      	movs	r3, #3
 8005548:	e216      	b.n	8005978 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800554a:	4b22      	ldr	r3, [pc, #136]	; (80055d4 <HAL_RCC_OscConfig+0x27c>)
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005552:	2b00      	cmp	r3, #0
 8005554:	d1f0      	bne.n	8005538 <HAL_RCC_OscConfig+0x1e0>
 8005556:	e000      	b.n	800555a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005558:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	f003 0308 	and.w	r3, r3, #8
 8005562:	2b00      	cmp	r3, #0
 8005564:	d041      	beq.n	80055ea <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	695b      	ldr	r3, [r3, #20]
 800556a:	2b00      	cmp	r3, #0
 800556c:	d01c      	beq.n	80055a8 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800556e:	4b19      	ldr	r3, [pc, #100]	; (80055d4 <HAL_RCC_OscConfig+0x27c>)
 8005570:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005574:	4a17      	ldr	r2, [pc, #92]	; (80055d4 <HAL_RCC_OscConfig+0x27c>)
 8005576:	f043 0301 	orr.w	r3, r3, #1
 800557a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800557e:	f7fd fb6f 	bl	8002c60 <HAL_GetTick>
 8005582:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005584:	e008      	b.n	8005598 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005586:	f7fd fb6b 	bl	8002c60 <HAL_GetTick>
 800558a:	4602      	mov	r2, r0
 800558c:	693b      	ldr	r3, [r7, #16]
 800558e:	1ad3      	subs	r3, r2, r3
 8005590:	2b02      	cmp	r3, #2
 8005592:	d901      	bls.n	8005598 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005594:	2303      	movs	r3, #3
 8005596:	e1ef      	b.n	8005978 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005598:	4b0e      	ldr	r3, [pc, #56]	; (80055d4 <HAL_RCC_OscConfig+0x27c>)
 800559a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800559e:	f003 0302 	and.w	r3, r3, #2
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d0ef      	beq.n	8005586 <HAL_RCC_OscConfig+0x22e>
 80055a6:	e020      	b.n	80055ea <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80055a8:	4b0a      	ldr	r3, [pc, #40]	; (80055d4 <HAL_RCC_OscConfig+0x27c>)
 80055aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80055ae:	4a09      	ldr	r2, [pc, #36]	; (80055d4 <HAL_RCC_OscConfig+0x27c>)
 80055b0:	f023 0301 	bic.w	r3, r3, #1
 80055b4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055b8:	f7fd fb52 	bl	8002c60 <HAL_GetTick>
 80055bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80055be:	e00d      	b.n	80055dc <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80055c0:	f7fd fb4e 	bl	8002c60 <HAL_GetTick>
 80055c4:	4602      	mov	r2, r0
 80055c6:	693b      	ldr	r3, [r7, #16]
 80055c8:	1ad3      	subs	r3, r2, r3
 80055ca:	2b02      	cmp	r3, #2
 80055cc:	d906      	bls.n	80055dc <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80055ce:	2303      	movs	r3, #3
 80055d0:	e1d2      	b.n	8005978 <HAL_RCC_OscConfig+0x620>
 80055d2:	bf00      	nop
 80055d4:	40021000 	.word	0x40021000
 80055d8:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80055dc:	4b8c      	ldr	r3, [pc, #560]	; (8005810 <HAL_RCC_OscConfig+0x4b8>)
 80055de:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80055e2:	f003 0302 	and.w	r3, r3, #2
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d1ea      	bne.n	80055c0 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	f003 0304 	and.w	r3, r3, #4
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	f000 80a6 	beq.w	8005744 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80055f8:	2300      	movs	r3, #0
 80055fa:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80055fc:	4b84      	ldr	r3, [pc, #528]	; (8005810 <HAL_RCC_OscConfig+0x4b8>)
 80055fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005600:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005604:	2b00      	cmp	r3, #0
 8005606:	d101      	bne.n	800560c <HAL_RCC_OscConfig+0x2b4>
 8005608:	2301      	movs	r3, #1
 800560a:	e000      	b.n	800560e <HAL_RCC_OscConfig+0x2b6>
 800560c:	2300      	movs	r3, #0
 800560e:	2b00      	cmp	r3, #0
 8005610:	d00d      	beq.n	800562e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005612:	4b7f      	ldr	r3, [pc, #508]	; (8005810 <HAL_RCC_OscConfig+0x4b8>)
 8005614:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005616:	4a7e      	ldr	r2, [pc, #504]	; (8005810 <HAL_RCC_OscConfig+0x4b8>)
 8005618:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800561c:	6593      	str	r3, [r2, #88]	; 0x58
 800561e:	4b7c      	ldr	r3, [pc, #496]	; (8005810 <HAL_RCC_OscConfig+0x4b8>)
 8005620:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005622:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005626:	60fb      	str	r3, [r7, #12]
 8005628:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800562a:	2301      	movs	r3, #1
 800562c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800562e:	4b79      	ldr	r3, [pc, #484]	; (8005814 <HAL_RCC_OscConfig+0x4bc>)
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005636:	2b00      	cmp	r3, #0
 8005638:	d118      	bne.n	800566c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800563a:	4b76      	ldr	r3, [pc, #472]	; (8005814 <HAL_RCC_OscConfig+0x4bc>)
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	4a75      	ldr	r2, [pc, #468]	; (8005814 <HAL_RCC_OscConfig+0x4bc>)
 8005640:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005644:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005646:	f7fd fb0b 	bl	8002c60 <HAL_GetTick>
 800564a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800564c:	e008      	b.n	8005660 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800564e:	f7fd fb07 	bl	8002c60 <HAL_GetTick>
 8005652:	4602      	mov	r2, r0
 8005654:	693b      	ldr	r3, [r7, #16]
 8005656:	1ad3      	subs	r3, r2, r3
 8005658:	2b02      	cmp	r3, #2
 800565a:	d901      	bls.n	8005660 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800565c:	2303      	movs	r3, #3
 800565e:	e18b      	b.n	8005978 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005660:	4b6c      	ldr	r3, [pc, #432]	; (8005814 <HAL_RCC_OscConfig+0x4bc>)
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005668:	2b00      	cmp	r3, #0
 800566a:	d0f0      	beq.n	800564e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	689b      	ldr	r3, [r3, #8]
 8005670:	2b01      	cmp	r3, #1
 8005672:	d108      	bne.n	8005686 <HAL_RCC_OscConfig+0x32e>
 8005674:	4b66      	ldr	r3, [pc, #408]	; (8005810 <HAL_RCC_OscConfig+0x4b8>)
 8005676:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800567a:	4a65      	ldr	r2, [pc, #404]	; (8005810 <HAL_RCC_OscConfig+0x4b8>)
 800567c:	f043 0301 	orr.w	r3, r3, #1
 8005680:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005684:	e024      	b.n	80056d0 <HAL_RCC_OscConfig+0x378>
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	689b      	ldr	r3, [r3, #8]
 800568a:	2b05      	cmp	r3, #5
 800568c:	d110      	bne.n	80056b0 <HAL_RCC_OscConfig+0x358>
 800568e:	4b60      	ldr	r3, [pc, #384]	; (8005810 <HAL_RCC_OscConfig+0x4b8>)
 8005690:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005694:	4a5e      	ldr	r2, [pc, #376]	; (8005810 <HAL_RCC_OscConfig+0x4b8>)
 8005696:	f043 0304 	orr.w	r3, r3, #4
 800569a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800569e:	4b5c      	ldr	r3, [pc, #368]	; (8005810 <HAL_RCC_OscConfig+0x4b8>)
 80056a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056a4:	4a5a      	ldr	r2, [pc, #360]	; (8005810 <HAL_RCC_OscConfig+0x4b8>)
 80056a6:	f043 0301 	orr.w	r3, r3, #1
 80056aa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80056ae:	e00f      	b.n	80056d0 <HAL_RCC_OscConfig+0x378>
 80056b0:	4b57      	ldr	r3, [pc, #348]	; (8005810 <HAL_RCC_OscConfig+0x4b8>)
 80056b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056b6:	4a56      	ldr	r2, [pc, #344]	; (8005810 <HAL_RCC_OscConfig+0x4b8>)
 80056b8:	f023 0301 	bic.w	r3, r3, #1
 80056bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80056c0:	4b53      	ldr	r3, [pc, #332]	; (8005810 <HAL_RCC_OscConfig+0x4b8>)
 80056c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056c6:	4a52      	ldr	r2, [pc, #328]	; (8005810 <HAL_RCC_OscConfig+0x4b8>)
 80056c8:	f023 0304 	bic.w	r3, r3, #4
 80056cc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	689b      	ldr	r3, [r3, #8]
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d016      	beq.n	8005706 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80056d8:	f7fd fac2 	bl	8002c60 <HAL_GetTick>
 80056dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80056de:	e00a      	b.n	80056f6 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80056e0:	f7fd fabe 	bl	8002c60 <HAL_GetTick>
 80056e4:	4602      	mov	r2, r0
 80056e6:	693b      	ldr	r3, [r7, #16]
 80056e8:	1ad3      	subs	r3, r2, r3
 80056ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80056ee:	4293      	cmp	r3, r2
 80056f0:	d901      	bls.n	80056f6 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80056f2:	2303      	movs	r3, #3
 80056f4:	e140      	b.n	8005978 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80056f6:	4b46      	ldr	r3, [pc, #280]	; (8005810 <HAL_RCC_OscConfig+0x4b8>)
 80056f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056fc:	f003 0302 	and.w	r3, r3, #2
 8005700:	2b00      	cmp	r3, #0
 8005702:	d0ed      	beq.n	80056e0 <HAL_RCC_OscConfig+0x388>
 8005704:	e015      	b.n	8005732 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005706:	f7fd faab 	bl	8002c60 <HAL_GetTick>
 800570a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800570c:	e00a      	b.n	8005724 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800570e:	f7fd faa7 	bl	8002c60 <HAL_GetTick>
 8005712:	4602      	mov	r2, r0
 8005714:	693b      	ldr	r3, [r7, #16]
 8005716:	1ad3      	subs	r3, r2, r3
 8005718:	f241 3288 	movw	r2, #5000	; 0x1388
 800571c:	4293      	cmp	r3, r2
 800571e:	d901      	bls.n	8005724 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8005720:	2303      	movs	r3, #3
 8005722:	e129      	b.n	8005978 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005724:	4b3a      	ldr	r3, [pc, #232]	; (8005810 <HAL_RCC_OscConfig+0x4b8>)
 8005726:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800572a:	f003 0302 	and.w	r3, r3, #2
 800572e:	2b00      	cmp	r3, #0
 8005730:	d1ed      	bne.n	800570e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005732:	7ffb      	ldrb	r3, [r7, #31]
 8005734:	2b01      	cmp	r3, #1
 8005736:	d105      	bne.n	8005744 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005738:	4b35      	ldr	r3, [pc, #212]	; (8005810 <HAL_RCC_OscConfig+0x4b8>)
 800573a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800573c:	4a34      	ldr	r2, [pc, #208]	; (8005810 <HAL_RCC_OscConfig+0x4b8>)
 800573e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005742:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	f003 0320 	and.w	r3, r3, #32
 800574c:	2b00      	cmp	r3, #0
 800574e:	d03c      	beq.n	80057ca <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	699b      	ldr	r3, [r3, #24]
 8005754:	2b00      	cmp	r3, #0
 8005756:	d01c      	beq.n	8005792 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005758:	4b2d      	ldr	r3, [pc, #180]	; (8005810 <HAL_RCC_OscConfig+0x4b8>)
 800575a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800575e:	4a2c      	ldr	r2, [pc, #176]	; (8005810 <HAL_RCC_OscConfig+0x4b8>)
 8005760:	f043 0301 	orr.w	r3, r3, #1
 8005764:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005768:	f7fd fa7a 	bl	8002c60 <HAL_GetTick>
 800576c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800576e:	e008      	b.n	8005782 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005770:	f7fd fa76 	bl	8002c60 <HAL_GetTick>
 8005774:	4602      	mov	r2, r0
 8005776:	693b      	ldr	r3, [r7, #16]
 8005778:	1ad3      	subs	r3, r2, r3
 800577a:	2b02      	cmp	r3, #2
 800577c:	d901      	bls.n	8005782 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800577e:	2303      	movs	r3, #3
 8005780:	e0fa      	b.n	8005978 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005782:	4b23      	ldr	r3, [pc, #140]	; (8005810 <HAL_RCC_OscConfig+0x4b8>)
 8005784:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005788:	f003 0302 	and.w	r3, r3, #2
 800578c:	2b00      	cmp	r3, #0
 800578e:	d0ef      	beq.n	8005770 <HAL_RCC_OscConfig+0x418>
 8005790:	e01b      	b.n	80057ca <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005792:	4b1f      	ldr	r3, [pc, #124]	; (8005810 <HAL_RCC_OscConfig+0x4b8>)
 8005794:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005798:	4a1d      	ldr	r2, [pc, #116]	; (8005810 <HAL_RCC_OscConfig+0x4b8>)
 800579a:	f023 0301 	bic.w	r3, r3, #1
 800579e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057a2:	f7fd fa5d 	bl	8002c60 <HAL_GetTick>
 80057a6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80057a8:	e008      	b.n	80057bc <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80057aa:	f7fd fa59 	bl	8002c60 <HAL_GetTick>
 80057ae:	4602      	mov	r2, r0
 80057b0:	693b      	ldr	r3, [r7, #16]
 80057b2:	1ad3      	subs	r3, r2, r3
 80057b4:	2b02      	cmp	r3, #2
 80057b6:	d901      	bls.n	80057bc <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80057b8:	2303      	movs	r3, #3
 80057ba:	e0dd      	b.n	8005978 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80057bc:	4b14      	ldr	r3, [pc, #80]	; (8005810 <HAL_RCC_OscConfig+0x4b8>)
 80057be:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80057c2:	f003 0302 	and.w	r3, r3, #2
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d1ef      	bne.n	80057aa <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	69db      	ldr	r3, [r3, #28]
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	f000 80d1 	beq.w	8005976 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80057d4:	4b0e      	ldr	r3, [pc, #56]	; (8005810 <HAL_RCC_OscConfig+0x4b8>)
 80057d6:	689b      	ldr	r3, [r3, #8]
 80057d8:	f003 030c 	and.w	r3, r3, #12
 80057dc:	2b0c      	cmp	r3, #12
 80057de:	f000 808b 	beq.w	80058f8 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	69db      	ldr	r3, [r3, #28]
 80057e6:	2b02      	cmp	r3, #2
 80057e8:	d15e      	bne.n	80058a8 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80057ea:	4b09      	ldr	r3, [pc, #36]	; (8005810 <HAL_RCC_OscConfig+0x4b8>)
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	4a08      	ldr	r2, [pc, #32]	; (8005810 <HAL_RCC_OscConfig+0x4b8>)
 80057f0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80057f4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057f6:	f7fd fa33 	bl	8002c60 <HAL_GetTick>
 80057fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80057fc:	e00c      	b.n	8005818 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80057fe:	f7fd fa2f 	bl	8002c60 <HAL_GetTick>
 8005802:	4602      	mov	r2, r0
 8005804:	693b      	ldr	r3, [r7, #16]
 8005806:	1ad3      	subs	r3, r2, r3
 8005808:	2b02      	cmp	r3, #2
 800580a:	d905      	bls.n	8005818 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800580c:	2303      	movs	r3, #3
 800580e:	e0b3      	b.n	8005978 <HAL_RCC_OscConfig+0x620>
 8005810:	40021000 	.word	0x40021000
 8005814:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005818:	4b59      	ldr	r3, [pc, #356]	; (8005980 <HAL_RCC_OscConfig+0x628>)
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005820:	2b00      	cmp	r3, #0
 8005822:	d1ec      	bne.n	80057fe <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005824:	4b56      	ldr	r3, [pc, #344]	; (8005980 <HAL_RCC_OscConfig+0x628>)
 8005826:	68da      	ldr	r2, [r3, #12]
 8005828:	4b56      	ldr	r3, [pc, #344]	; (8005984 <HAL_RCC_OscConfig+0x62c>)
 800582a:	4013      	ands	r3, r2
 800582c:	687a      	ldr	r2, [r7, #4]
 800582e:	6a11      	ldr	r1, [r2, #32]
 8005830:	687a      	ldr	r2, [r7, #4]
 8005832:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005834:	3a01      	subs	r2, #1
 8005836:	0112      	lsls	r2, r2, #4
 8005838:	4311      	orrs	r1, r2
 800583a:	687a      	ldr	r2, [r7, #4]
 800583c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800583e:	0212      	lsls	r2, r2, #8
 8005840:	4311      	orrs	r1, r2
 8005842:	687a      	ldr	r2, [r7, #4]
 8005844:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005846:	0852      	lsrs	r2, r2, #1
 8005848:	3a01      	subs	r2, #1
 800584a:	0552      	lsls	r2, r2, #21
 800584c:	4311      	orrs	r1, r2
 800584e:	687a      	ldr	r2, [r7, #4]
 8005850:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005852:	0852      	lsrs	r2, r2, #1
 8005854:	3a01      	subs	r2, #1
 8005856:	0652      	lsls	r2, r2, #25
 8005858:	4311      	orrs	r1, r2
 800585a:	687a      	ldr	r2, [r7, #4]
 800585c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800585e:	06d2      	lsls	r2, r2, #27
 8005860:	430a      	orrs	r2, r1
 8005862:	4947      	ldr	r1, [pc, #284]	; (8005980 <HAL_RCC_OscConfig+0x628>)
 8005864:	4313      	orrs	r3, r2
 8005866:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005868:	4b45      	ldr	r3, [pc, #276]	; (8005980 <HAL_RCC_OscConfig+0x628>)
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	4a44      	ldr	r2, [pc, #272]	; (8005980 <HAL_RCC_OscConfig+0x628>)
 800586e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005872:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005874:	4b42      	ldr	r3, [pc, #264]	; (8005980 <HAL_RCC_OscConfig+0x628>)
 8005876:	68db      	ldr	r3, [r3, #12]
 8005878:	4a41      	ldr	r2, [pc, #260]	; (8005980 <HAL_RCC_OscConfig+0x628>)
 800587a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800587e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005880:	f7fd f9ee 	bl	8002c60 <HAL_GetTick>
 8005884:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005886:	e008      	b.n	800589a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005888:	f7fd f9ea 	bl	8002c60 <HAL_GetTick>
 800588c:	4602      	mov	r2, r0
 800588e:	693b      	ldr	r3, [r7, #16]
 8005890:	1ad3      	subs	r3, r2, r3
 8005892:	2b02      	cmp	r3, #2
 8005894:	d901      	bls.n	800589a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8005896:	2303      	movs	r3, #3
 8005898:	e06e      	b.n	8005978 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800589a:	4b39      	ldr	r3, [pc, #228]	; (8005980 <HAL_RCC_OscConfig+0x628>)
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d0f0      	beq.n	8005888 <HAL_RCC_OscConfig+0x530>
 80058a6:	e066      	b.n	8005976 <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80058a8:	4b35      	ldr	r3, [pc, #212]	; (8005980 <HAL_RCC_OscConfig+0x628>)
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	4a34      	ldr	r2, [pc, #208]	; (8005980 <HAL_RCC_OscConfig+0x628>)
 80058ae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80058b2:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80058b4:	4b32      	ldr	r3, [pc, #200]	; (8005980 <HAL_RCC_OscConfig+0x628>)
 80058b6:	68db      	ldr	r3, [r3, #12]
 80058b8:	4a31      	ldr	r2, [pc, #196]	; (8005980 <HAL_RCC_OscConfig+0x628>)
 80058ba:	f023 0303 	bic.w	r3, r3, #3
 80058be:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80058c0:	4b2f      	ldr	r3, [pc, #188]	; (8005980 <HAL_RCC_OscConfig+0x628>)
 80058c2:	68db      	ldr	r3, [r3, #12]
 80058c4:	4a2e      	ldr	r2, [pc, #184]	; (8005980 <HAL_RCC_OscConfig+0x628>)
 80058c6:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80058ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80058ce:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058d0:	f7fd f9c6 	bl	8002c60 <HAL_GetTick>
 80058d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80058d6:	e008      	b.n	80058ea <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80058d8:	f7fd f9c2 	bl	8002c60 <HAL_GetTick>
 80058dc:	4602      	mov	r2, r0
 80058de:	693b      	ldr	r3, [r7, #16]
 80058e0:	1ad3      	subs	r3, r2, r3
 80058e2:	2b02      	cmp	r3, #2
 80058e4:	d901      	bls.n	80058ea <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 80058e6:	2303      	movs	r3, #3
 80058e8:	e046      	b.n	8005978 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80058ea:	4b25      	ldr	r3, [pc, #148]	; (8005980 <HAL_RCC_OscConfig+0x628>)
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d1f0      	bne.n	80058d8 <HAL_RCC_OscConfig+0x580>
 80058f6:	e03e      	b.n	8005976 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	69db      	ldr	r3, [r3, #28]
 80058fc:	2b01      	cmp	r3, #1
 80058fe:	d101      	bne.n	8005904 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8005900:	2301      	movs	r3, #1
 8005902:	e039      	b.n	8005978 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8005904:	4b1e      	ldr	r3, [pc, #120]	; (8005980 <HAL_RCC_OscConfig+0x628>)
 8005906:	68db      	ldr	r3, [r3, #12]
 8005908:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800590a:	697b      	ldr	r3, [r7, #20]
 800590c:	f003 0203 	and.w	r2, r3, #3
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	6a1b      	ldr	r3, [r3, #32]
 8005914:	429a      	cmp	r2, r3
 8005916:	d12c      	bne.n	8005972 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005918:	697b      	ldr	r3, [r7, #20]
 800591a:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005922:	3b01      	subs	r3, #1
 8005924:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005926:	429a      	cmp	r2, r3
 8005928:	d123      	bne.n	8005972 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800592a:	697b      	ldr	r3, [r7, #20]
 800592c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005934:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005936:	429a      	cmp	r2, r3
 8005938:	d11b      	bne.n	8005972 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800593a:	697b      	ldr	r3, [r7, #20]
 800593c:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005944:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005946:	429a      	cmp	r2, r3
 8005948:	d113      	bne.n	8005972 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800594a:	697b      	ldr	r3, [r7, #20]
 800594c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005954:	085b      	lsrs	r3, r3, #1
 8005956:	3b01      	subs	r3, #1
 8005958:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800595a:	429a      	cmp	r2, r3
 800595c:	d109      	bne.n	8005972 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800595e:	697b      	ldr	r3, [r7, #20]
 8005960:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005968:	085b      	lsrs	r3, r3, #1
 800596a:	3b01      	subs	r3, #1
 800596c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800596e:	429a      	cmp	r2, r3
 8005970:	d001      	beq.n	8005976 <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8005972:	2301      	movs	r3, #1
 8005974:	e000      	b.n	8005978 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8005976:	2300      	movs	r3, #0
}
 8005978:	4618      	mov	r0, r3
 800597a:	3720      	adds	r7, #32
 800597c:	46bd      	mov	sp, r7
 800597e:	bd80      	pop	{r7, pc}
 8005980:	40021000 	.word	0x40021000
 8005984:	019f800c 	.word	0x019f800c

08005988 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005988:	b580      	push	{r7, lr}
 800598a:	b086      	sub	sp, #24
 800598c:	af00      	add	r7, sp, #0
 800598e:	6078      	str	r0, [r7, #4]
 8005990:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8005992:	2300      	movs	r3, #0
 8005994:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	2b00      	cmp	r3, #0
 800599a:	d101      	bne.n	80059a0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800599c:	2301      	movs	r3, #1
 800599e:	e11e      	b.n	8005bde <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80059a0:	4b91      	ldr	r3, [pc, #580]	; (8005be8 <HAL_RCC_ClockConfig+0x260>)
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	f003 030f 	and.w	r3, r3, #15
 80059a8:	683a      	ldr	r2, [r7, #0]
 80059aa:	429a      	cmp	r2, r3
 80059ac:	d910      	bls.n	80059d0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80059ae:	4b8e      	ldr	r3, [pc, #568]	; (8005be8 <HAL_RCC_ClockConfig+0x260>)
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	f023 020f 	bic.w	r2, r3, #15
 80059b6:	498c      	ldr	r1, [pc, #560]	; (8005be8 <HAL_RCC_ClockConfig+0x260>)
 80059b8:	683b      	ldr	r3, [r7, #0]
 80059ba:	4313      	orrs	r3, r2
 80059bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80059be:	4b8a      	ldr	r3, [pc, #552]	; (8005be8 <HAL_RCC_ClockConfig+0x260>)
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	f003 030f 	and.w	r3, r3, #15
 80059c6:	683a      	ldr	r2, [r7, #0]
 80059c8:	429a      	cmp	r2, r3
 80059ca:	d001      	beq.n	80059d0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80059cc:	2301      	movs	r3, #1
 80059ce:	e106      	b.n	8005bde <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	f003 0301 	and.w	r3, r3, #1
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d073      	beq.n	8005ac4 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	685b      	ldr	r3, [r3, #4]
 80059e0:	2b03      	cmp	r3, #3
 80059e2:	d129      	bne.n	8005a38 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80059e4:	4b81      	ldr	r3, [pc, #516]	; (8005bec <HAL_RCC_ClockConfig+0x264>)
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d101      	bne.n	80059f4 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80059f0:	2301      	movs	r3, #1
 80059f2:	e0f4      	b.n	8005bde <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80059f4:	f000 f99c 	bl	8005d30 <RCC_GetSysClockFreqFromPLLSource>
 80059f8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80059fa:	693b      	ldr	r3, [r7, #16]
 80059fc:	4a7c      	ldr	r2, [pc, #496]	; (8005bf0 <HAL_RCC_ClockConfig+0x268>)
 80059fe:	4293      	cmp	r3, r2
 8005a00:	d93f      	bls.n	8005a82 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005a02:	4b7a      	ldr	r3, [pc, #488]	; (8005bec <HAL_RCC_ClockConfig+0x264>)
 8005a04:	689b      	ldr	r3, [r3, #8]
 8005a06:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d009      	beq.n	8005a22 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d033      	beq.n	8005a82 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d12f      	bne.n	8005a82 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005a22:	4b72      	ldr	r3, [pc, #456]	; (8005bec <HAL_RCC_ClockConfig+0x264>)
 8005a24:	689b      	ldr	r3, [r3, #8]
 8005a26:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005a2a:	4a70      	ldr	r2, [pc, #448]	; (8005bec <HAL_RCC_ClockConfig+0x264>)
 8005a2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a30:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005a32:	2380      	movs	r3, #128	; 0x80
 8005a34:	617b      	str	r3, [r7, #20]
 8005a36:	e024      	b.n	8005a82 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	685b      	ldr	r3, [r3, #4]
 8005a3c:	2b02      	cmp	r3, #2
 8005a3e:	d107      	bne.n	8005a50 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005a40:	4b6a      	ldr	r3, [pc, #424]	; (8005bec <HAL_RCC_ClockConfig+0x264>)
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d109      	bne.n	8005a60 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005a4c:	2301      	movs	r3, #1
 8005a4e:	e0c6      	b.n	8005bde <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005a50:	4b66      	ldr	r3, [pc, #408]	; (8005bec <HAL_RCC_ClockConfig+0x264>)
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d101      	bne.n	8005a60 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005a5c:	2301      	movs	r3, #1
 8005a5e:	e0be      	b.n	8005bde <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8005a60:	f000 f8ce 	bl	8005c00 <HAL_RCC_GetSysClockFreq>
 8005a64:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8005a66:	693b      	ldr	r3, [r7, #16]
 8005a68:	4a61      	ldr	r2, [pc, #388]	; (8005bf0 <HAL_RCC_ClockConfig+0x268>)
 8005a6a:	4293      	cmp	r3, r2
 8005a6c:	d909      	bls.n	8005a82 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005a6e:	4b5f      	ldr	r3, [pc, #380]	; (8005bec <HAL_RCC_ClockConfig+0x264>)
 8005a70:	689b      	ldr	r3, [r3, #8]
 8005a72:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005a76:	4a5d      	ldr	r2, [pc, #372]	; (8005bec <HAL_RCC_ClockConfig+0x264>)
 8005a78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a7c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8005a7e:	2380      	movs	r3, #128	; 0x80
 8005a80:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005a82:	4b5a      	ldr	r3, [pc, #360]	; (8005bec <HAL_RCC_ClockConfig+0x264>)
 8005a84:	689b      	ldr	r3, [r3, #8]
 8005a86:	f023 0203 	bic.w	r2, r3, #3
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	685b      	ldr	r3, [r3, #4]
 8005a8e:	4957      	ldr	r1, [pc, #348]	; (8005bec <HAL_RCC_ClockConfig+0x264>)
 8005a90:	4313      	orrs	r3, r2
 8005a92:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005a94:	f7fd f8e4 	bl	8002c60 <HAL_GetTick>
 8005a98:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005a9a:	e00a      	b.n	8005ab2 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005a9c:	f7fd f8e0 	bl	8002c60 <HAL_GetTick>
 8005aa0:	4602      	mov	r2, r0
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	1ad3      	subs	r3, r2, r3
 8005aa6:	f241 3288 	movw	r2, #5000	; 0x1388
 8005aaa:	4293      	cmp	r3, r2
 8005aac:	d901      	bls.n	8005ab2 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8005aae:	2303      	movs	r3, #3
 8005ab0:	e095      	b.n	8005bde <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005ab2:	4b4e      	ldr	r3, [pc, #312]	; (8005bec <HAL_RCC_ClockConfig+0x264>)
 8005ab4:	689b      	ldr	r3, [r3, #8]
 8005ab6:	f003 020c 	and.w	r2, r3, #12
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	685b      	ldr	r3, [r3, #4]
 8005abe:	009b      	lsls	r3, r3, #2
 8005ac0:	429a      	cmp	r2, r3
 8005ac2:	d1eb      	bne.n	8005a9c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	f003 0302 	and.w	r3, r3, #2
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d023      	beq.n	8005b18 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	f003 0304 	and.w	r3, r3, #4
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d005      	beq.n	8005ae8 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005adc:	4b43      	ldr	r3, [pc, #268]	; (8005bec <HAL_RCC_ClockConfig+0x264>)
 8005ade:	689b      	ldr	r3, [r3, #8]
 8005ae0:	4a42      	ldr	r2, [pc, #264]	; (8005bec <HAL_RCC_ClockConfig+0x264>)
 8005ae2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005ae6:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	f003 0308 	and.w	r3, r3, #8
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d007      	beq.n	8005b04 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8005af4:	4b3d      	ldr	r3, [pc, #244]	; (8005bec <HAL_RCC_ClockConfig+0x264>)
 8005af6:	689b      	ldr	r3, [r3, #8]
 8005af8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8005afc:	4a3b      	ldr	r2, [pc, #236]	; (8005bec <HAL_RCC_ClockConfig+0x264>)
 8005afe:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005b02:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005b04:	4b39      	ldr	r3, [pc, #228]	; (8005bec <HAL_RCC_ClockConfig+0x264>)
 8005b06:	689b      	ldr	r3, [r3, #8]
 8005b08:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	689b      	ldr	r3, [r3, #8]
 8005b10:	4936      	ldr	r1, [pc, #216]	; (8005bec <HAL_RCC_ClockConfig+0x264>)
 8005b12:	4313      	orrs	r3, r2
 8005b14:	608b      	str	r3, [r1, #8]
 8005b16:	e008      	b.n	8005b2a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8005b18:	697b      	ldr	r3, [r7, #20]
 8005b1a:	2b80      	cmp	r3, #128	; 0x80
 8005b1c:	d105      	bne.n	8005b2a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8005b1e:	4b33      	ldr	r3, [pc, #204]	; (8005bec <HAL_RCC_ClockConfig+0x264>)
 8005b20:	689b      	ldr	r3, [r3, #8]
 8005b22:	4a32      	ldr	r2, [pc, #200]	; (8005bec <HAL_RCC_ClockConfig+0x264>)
 8005b24:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005b28:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005b2a:	4b2f      	ldr	r3, [pc, #188]	; (8005be8 <HAL_RCC_ClockConfig+0x260>)
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	f003 030f 	and.w	r3, r3, #15
 8005b32:	683a      	ldr	r2, [r7, #0]
 8005b34:	429a      	cmp	r2, r3
 8005b36:	d21d      	bcs.n	8005b74 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b38:	4b2b      	ldr	r3, [pc, #172]	; (8005be8 <HAL_RCC_ClockConfig+0x260>)
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	f023 020f 	bic.w	r2, r3, #15
 8005b40:	4929      	ldr	r1, [pc, #164]	; (8005be8 <HAL_RCC_ClockConfig+0x260>)
 8005b42:	683b      	ldr	r3, [r7, #0]
 8005b44:	4313      	orrs	r3, r2
 8005b46:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005b48:	f7fd f88a 	bl	8002c60 <HAL_GetTick>
 8005b4c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b4e:	e00a      	b.n	8005b66 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005b50:	f7fd f886 	bl	8002c60 <HAL_GetTick>
 8005b54:	4602      	mov	r2, r0
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	1ad3      	subs	r3, r2, r3
 8005b5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b5e:	4293      	cmp	r3, r2
 8005b60:	d901      	bls.n	8005b66 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8005b62:	2303      	movs	r3, #3
 8005b64:	e03b      	b.n	8005bde <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b66:	4b20      	ldr	r3, [pc, #128]	; (8005be8 <HAL_RCC_ClockConfig+0x260>)
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	f003 030f 	and.w	r3, r3, #15
 8005b6e:	683a      	ldr	r2, [r7, #0]
 8005b70:	429a      	cmp	r2, r3
 8005b72:	d1ed      	bne.n	8005b50 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	f003 0304 	and.w	r3, r3, #4
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d008      	beq.n	8005b92 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005b80:	4b1a      	ldr	r3, [pc, #104]	; (8005bec <HAL_RCC_ClockConfig+0x264>)
 8005b82:	689b      	ldr	r3, [r3, #8]
 8005b84:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	68db      	ldr	r3, [r3, #12]
 8005b8c:	4917      	ldr	r1, [pc, #92]	; (8005bec <HAL_RCC_ClockConfig+0x264>)
 8005b8e:	4313      	orrs	r3, r2
 8005b90:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	f003 0308 	and.w	r3, r3, #8
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d009      	beq.n	8005bb2 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005b9e:	4b13      	ldr	r3, [pc, #76]	; (8005bec <HAL_RCC_ClockConfig+0x264>)
 8005ba0:	689b      	ldr	r3, [r3, #8]
 8005ba2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	691b      	ldr	r3, [r3, #16]
 8005baa:	00db      	lsls	r3, r3, #3
 8005bac:	490f      	ldr	r1, [pc, #60]	; (8005bec <HAL_RCC_ClockConfig+0x264>)
 8005bae:	4313      	orrs	r3, r2
 8005bb0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005bb2:	f000 f825 	bl	8005c00 <HAL_RCC_GetSysClockFreq>
 8005bb6:	4602      	mov	r2, r0
 8005bb8:	4b0c      	ldr	r3, [pc, #48]	; (8005bec <HAL_RCC_ClockConfig+0x264>)
 8005bba:	689b      	ldr	r3, [r3, #8]
 8005bbc:	091b      	lsrs	r3, r3, #4
 8005bbe:	f003 030f 	and.w	r3, r3, #15
 8005bc2:	490c      	ldr	r1, [pc, #48]	; (8005bf4 <HAL_RCC_ClockConfig+0x26c>)
 8005bc4:	5ccb      	ldrb	r3, [r1, r3]
 8005bc6:	f003 031f 	and.w	r3, r3, #31
 8005bca:	fa22 f303 	lsr.w	r3, r2, r3
 8005bce:	4a0a      	ldr	r2, [pc, #40]	; (8005bf8 <HAL_RCC_ClockConfig+0x270>)
 8005bd0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8005bd2:	4b0a      	ldr	r3, [pc, #40]	; (8005bfc <HAL_RCC_ClockConfig+0x274>)
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	4618      	mov	r0, r3
 8005bd8:	f7fc fff6 	bl	8002bc8 <HAL_InitTick>
 8005bdc:	4603      	mov	r3, r0
}
 8005bde:	4618      	mov	r0, r3
 8005be0:	3718      	adds	r7, #24
 8005be2:	46bd      	mov	sp, r7
 8005be4:	bd80      	pop	{r7, pc}
 8005be6:	bf00      	nop
 8005be8:	40022000 	.word	0x40022000
 8005bec:	40021000 	.word	0x40021000
 8005bf0:	04c4b400 	.word	0x04c4b400
 8005bf4:	08009260 	.word	0x08009260
 8005bf8:	20000000 	.word	0x20000000
 8005bfc:	20000004 	.word	0x20000004

08005c00 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005c00:	b480      	push	{r7}
 8005c02:	b087      	sub	sp, #28
 8005c04:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8005c06:	4b2c      	ldr	r3, [pc, #176]	; (8005cb8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005c08:	689b      	ldr	r3, [r3, #8]
 8005c0a:	f003 030c 	and.w	r3, r3, #12
 8005c0e:	2b04      	cmp	r3, #4
 8005c10:	d102      	bne.n	8005c18 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005c12:	4b2a      	ldr	r3, [pc, #168]	; (8005cbc <HAL_RCC_GetSysClockFreq+0xbc>)
 8005c14:	613b      	str	r3, [r7, #16]
 8005c16:	e047      	b.n	8005ca8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8005c18:	4b27      	ldr	r3, [pc, #156]	; (8005cb8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005c1a:	689b      	ldr	r3, [r3, #8]
 8005c1c:	f003 030c 	and.w	r3, r3, #12
 8005c20:	2b08      	cmp	r3, #8
 8005c22:	d102      	bne.n	8005c2a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005c24:	4b25      	ldr	r3, [pc, #148]	; (8005cbc <HAL_RCC_GetSysClockFreq+0xbc>)
 8005c26:	613b      	str	r3, [r7, #16]
 8005c28:	e03e      	b.n	8005ca8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8005c2a:	4b23      	ldr	r3, [pc, #140]	; (8005cb8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005c2c:	689b      	ldr	r3, [r3, #8]
 8005c2e:	f003 030c 	and.w	r3, r3, #12
 8005c32:	2b0c      	cmp	r3, #12
 8005c34:	d136      	bne.n	8005ca4 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005c36:	4b20      	ldr	r3, [pc, #128]	; (8005cb8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005c38:	68db      	ldr	r3, [r3, #12]
 8005c3a:	f003 0303 	and.w	r3, r3, #3
 8005c3e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005c40:	4b1d      	ldr	r3, [pc, #116]	; (8005cb8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005c42:	68db      	ldr	r3, [r3, #12]
 8005c44:	091b      	lsrs	r3, r3, #4
 8005c46:	f003 030f 	and.w	r3, r3, #15
 8005c4a:	3301      	adds	r3, #1
 8005c4c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	2b03      	cmp	r3, #3
 8005c52:	d10c      	bne.n	8005c6e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005c54:	4a19      	ldr	r2, [pc, #100]	; (8005cbc <HAL_RCC_GetSysClockFreq+0xbc>)
 8005c56:	68bb      	ldr	r3, [r7, #8]
 8005c58:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c5c:	4a16      	ldr	r2, [pc, #88]	; (8005cb8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005c5e:	68d2      	ldr	r2, [r2, #12]
 8005c60:	0a12      	lsrs	r2, r2, #8
 8005c62:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005c66:	fb02 f303 	mul.w	r3, r2, r3
 8005c6a:	617b      	str	r3, [r7, #20]
      break;
 8005c6c:	e00c      	b.n	8005c88 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005c6e:	4a13      	ldr	r2, [pc, #76]	; (8005cbc <HAL_RCC_GetSysClockFreq+0xbc>)
 8005c70:	68bb      	ldr	r3, [r7, #8]
 8005c72:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c76:	4a10      	ldr	r2, [pc, #64]	; (8005cb8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005c78:	68d2      	ldr	r2, [r2, #12]
 8005c7a:	0a12      	lsrs	r2, r2, #8
 8005c7c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005c80:	fb02 f303 	mul.w	r3, r2, r3
 8005c84:	617b      	str	r3, [r7, #20]
      break;
 8005c86:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005c88:	4b0b      	ldr	r3, [pc, #44]	; (8005cb8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005c8a:	68db      	ldr	r3, [r3, #12]
 8005c8c:	0e5b      	lsrs	r3, r3, #25
 8005c8e:	f003 0303 	and.w	r3, r3, #3
 8005c92:	3301      	adds	r3, #1
 8005c94:	005b      	lsls	r3, r3, #1
 8005c96:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8005c98:	697a      	ldr	r2, [r7, #20]
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ca0:	613b      	str	r3, [r7, #16]
 8005ca2:	e001      	b.n	8005ca8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8005ca4:	2300      	movs	r3, #0
 8005ca6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8005ca8:	693b      	ldr	r3, [r7, #16]
}
 8005caa:	4618      	mov	r0, r3
 8005cac:	371c      	adds	r7, #28
 8005cae:	46bd      	mov	sp, r7
 8005cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb4:	4770      	bx	lr
 8005cb6:	bf00      	nop
 8005cb8:	40021000 	.word	0x40021000
 8005cbc:	00f42400 	.word	0x00f42400

08005cc0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005cc0:	b480      	push	{r7}
 8005cc2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005cc4:	4b03      	ldr	r3, [pc, #12]	; (8005cd4 <HAL_RCC_GetHCLKFreq+0x14>)
 8005cc6:	681b      	ldr	r3, [r3, #0]
}
 8005cc8:	4618      	mov	r0, r3
 8005cca:	46bd      	mov	sp, r7
 8005ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd0:	4770      	bx	lr
 8005cd2:	bf00      	nop
 8005cd4:	20000000 	.word	0x20000000

08005cd8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005cd8:	b580      	push	{r7, lr}
 8005cda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005cdc:	f7ff fff0 	bl	8005cc0 <HAL_RCC_GetHCLKFreq>
 8005ce0:	4602      	mov	r2, r0
 8005ce2:	4b06      	ldr	r3, [pc, #24]	; (8005cfc <HAL_RCC_GetPCLK1Freq+0x24>)
 8005ce4:	689b      	ldr	r3, [r3, #8]
 8005ce6:	0a1b      	lsrs	r3, r3, #8
 8005ce8:	f003 0307 	and.w	r3, r3, #7
 8005cec:	4904      	ldr	r1, [pc, #16]	; (8005d00 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005cee:	5ccb      	ldrb	r3, [r1, r3]
 8005cf0:	f003 031f 	and.w	r3, r3, #31
 8005cf4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005cf8:	4618      	mov	r0, r3
 8005cfa:	bd80      	pop	{r7, pc}
 8005cfc:	40021000 	.word	0x40021000
 8005d00:	08009270 	.word	0x08009270

08005d04 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005d04:	b580      	push	{r7, lr}
 8005d06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005d08:	f7ff ffda 	bl	8005cc0 <HAL_RCC_GetHCLKFreq>
 8005d0c:	4602      	mov	r2, r0
 8005d0e:	4b06      	ldr	r3, [pc, #24]	; (8005d28 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005d10:	689b      	ldr	r3, [r3, #8]
 8005d12:	0adb      	lsrs	r3, r3, #11
 8005d14:	f003 0307 	and.w	r3, r3, #7
 8005d18:	4904      	ldr	r1, [pc, #16]	; (8005d2c <HAL_RCC_GetPCLK2Freq+0x28>)
 8005d1a:	5ccb      	ldrb	r3, [r1, r3]
 8005d1c:	f003 031f 	and.w	r3, r3, #31
 8005d20:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005d24:	4618      	mov	r0, r3
 8005d26:	bd80      	pop	{r7, pc}
 8005d28:	40021000 	.word	0x40021000
 8005d2c:	08009270 	.word	0x08009270

08005d30 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8005d30:	b480      	push	{r7}
 8005d32:	b087      	sub	sp, #28
 8005d34:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005d36:	4b1e      	ldr	r3, [pc, #120]	; (8005db0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005d38:	68db      	ldr	r3, [r3, #12]
 8005d3a:	f003 0303 	and.w	r3, r3, #3
 8005d3e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005d40:	4b1b      	ldr	r3, [pc, #108]	; (8005db0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005d42:	68db      	ldr	r3, [r3, #12]
 8005d44:	091b      	lsrs	r3, r3, #4
 8005d46:	f003 030f 	and.w	r3, r3, #15
 8005d4a:	3301      	adds	r3, #1
 8005d4c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8005d4e:	693b      	ldr	r3, [r7, #16]
 8005d50:	2b03      	cmp	r3, #3
 8005d52:	d10c      	bne.n	8005d6e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005d54:	4a17      	ldr	r2, [pc, #92]	; (8005db4 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d5c:	4a14      	ldr	r2, [pc, #80]	; (8005db0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005d5e:	68d2      	ldr	r2, [r2, #12]
 8005d60:	0a12      	lsrs	r2, r2, #8
 8005d62:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005d66:	fb02 f303 	mul.w	r3, r2, r3
 8005d6a:	617b      	str	r3, [r7, #20]
    break;
 8005d6c:	e00c      	b.n	8005d88 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005d6e:	4a11      	ldr	r2, [pc, #68]	; (8005db4 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d76:	4a0e      	ldr	r2, [pc, #56]	; (8005db0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005d78:	68d2      	ldr	r2, [r2, #12]
 8005d7a:	0a12      	lsrs	r2, r2, #8
 8005d7c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005d80:	fb02 f303 	mul.w	r3, r2, r3
 8005d84:	617b      	str	r3, [r7, #20]
    break;
 8005d86:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005d88:	4b09      	ldr	r3, [pc, #36]	; (8005db0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005d8a:	68db      	ldr	r3, [r3, #12]
 8005d8c:	0e5b      	lsrs	r3, r3, #25
 8005d8e:	f003 0303 	and.w	r3, r3, #3
 8005d92:	3301      	adds	r3, #1
 8005d94:	005b      	lsls	r3, r3, #1
 8005d96:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8005d98:	697a      	ldr	r2, [r7, #20]
 8005d9a:	68bb      	ldr	r3, [r7, #8]
 8005d9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005da0:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8005da2:	687b      	ldr	r3, [r7, #4]
}
 8005da4:	4618      	mov	r0, r3
 8005da6:	371c      	adds	r7, #28
 8005da8:	46bd      	mov	sp, r7
 8005daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dae:	4770      	bx	lr
 8005db0:	40021000 	.word	0x40021000
 8005db4:	00f42400 	.word	0x00f42400

08005db8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005db8:	b580      	push	{r7, lr}
 8005dba:	b086      	sub	sp, #24
 8005dbc:	af00      	add	r7, sp, #0
 8005dbe:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005dc0:	2300      	movs	r3, #0
 8005dc2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005dc4:	2300      	movs	r3, #0
 8005dc6:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	f000 8098 	beq.w	8005f06 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005dd6:	2300      	movs	r3, #0
 8005dd8:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005dda:	4b43      	ldr	r3, [pc, #268]	; (8005ee8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005ddc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005dde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d10d      	bne.n	8005e02 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005de6:	4b40      	ldr	r3, [pc, #256]	; (8005ee8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005de8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005dea:	4a3f      	ldr	r2, [pc, #252]	; (8005ee8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005dec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005df0:	6593      	str	r3, [r2, #88]	; 0x58
 8005df2:	4b3d      	ldr	r3, [pc, #244]	; (8005ee8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005df4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005df6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005dfa:	60bb      	str	r3, [r7, #8]
 8005dfc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005dfe:	2301      	movs	r3, #1
 8005e00:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005e02:	4b3a      	ldr	r3, [pc, #232]	; (8005eec <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	4a39      	ldr	r2, [pc, #228]	; (8005eec <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005e08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005e0c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005e0e:	f7fc ff27 	bl	8002c60 <HAL_GetTick>
 8005e12:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005e14:	e009      	b.n	8005e2a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005e16:	f7fc ff23 	bl	8002c60 <HAL_GetTick>
 8005e1a:	4602      	mov	r2, r0
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	1ad3      	subs	r3, r2, r3
 8005e20:	2b02      	cmp	r3, #2
 8005e22:	d902      	bls.n	8005e2a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8005e24:	2303      	movs	r3, #3
 8005e26:	74fb      	strb	r3, [r7, #19]
        break;
 8005e28:	e005      	b.n	8005e36 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005e2a:	4b30      	ldr	r3, [pc, #192]	; (8005eec <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d0ef      	beq.n	8005e16 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8005e36:	7cfb      	ldrb	r3, [r7, #19]
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d159      	bne.n	8005ef0 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005e3c:	4b2a      	ldr	r3, [pc, #168]	; (8005ee8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005e3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e42:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005e46:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005e48:	697b      	ldr	r3, [r7, #20]
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d01e      	beq.n	8005e8c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e52:	697a      	ldr	r2, [r7, #20]
 8005e54:	429a      	cmp	r2, r3
 8005e56:	d019      	beq.n	8005e8c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005e58:	4b23      	ldr	r3, [pc, #140]	; (8005ee8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005e5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e5e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e62:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005e64:	4b20      	ldr	r3, [pc, #128]	; (8005ee8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005e66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e6a:	4a1f      	ldr	r2, [pc, #124]	; (8005ee8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005e6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005e70:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005e74:	4b1c      	ldr	r3, [pc, #112]	; (8005ee8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005e76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e7a:	4a1b      	ldr	r2, [pc, #108]	; (8005ee8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005e7c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005e80:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005e84:	4a18      	ldr	r2, [pc, #96]	; (8005ee8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005e86:	697b      	ldr	r3, [r7, #20]
 8005e88:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005e8c:	697b      	ldr	r3, [r7, #20]
 8005e8e:	f003 0301 	and.w	r3, r3, #1
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d016      	beq.n	8005ec4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e96:	f7fc fee3 	bl	8002c60 <HAL_GetTick>
 8005e9a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005e9c:	e00b      	b.n	8005eb6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005e9e:	f7fc fedf 	bl	8002c60 <HAL_GetTick>
 8005ea2:	4602      	mov	r2, r0
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	1ad3      	subs	r3, r2, r3
 8005ea8:	f241 3288 	movw	r2, #5000	; 0x1388
 8005eac:	4293      	cmp	r3, r2
 8005eae:	d902      	bls.n	8005eb6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8005eb0:	2303      	movs	r3, #3
 8005eb2:	74fb      	strb	r3, [r7, #19]
            break;
 8005eb4:	e006      	b.n	8005ec4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005eb6:	4b0c      	ldr	r3, [pc, #48]	; (8005ee8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005eb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ebc:	f003 0302 	and.w	r3, r3, #2
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d0ec      	beq.n	8005e9e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8005ec4:	7cfb      	ldrb	r3, [r7, #19]
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d10b      	bne.n	8005ee2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005eca:	4b07      	ldr	r3, [pc, #28]	; (8005ee8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005ecc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ed0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ed8:	4903      	ldr	r1, [pc, #12]	; (8005ee8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005eda:	4313      	orrs	r3, r2
 8005edc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005ee0:	e008      	b.n	8005ef4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005ee2:	7cfb      	ldrb	r3, [r7, #19]
 8005ee4:	74bb      	strb	r3, [r7, #18]
 8005ee6:	e005      	b.n	8005ef4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8005ee8:	40021000 	.word	0x40021000
 8005eec:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ef0:	7cfb      	ldrb	r3, [r7, #19]
 8005ef2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005ef4:	7c7b      	ldrb	r3, [r7, #17]
 8005ef6:	2b01      	cmp	r3, #1
 8005ef8:	d105      	bne.n	8005f06 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005efa:	4ba6      	ldr	r3, [pc, #664]	; (8006194 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005efc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005efe:	4aa5      	ldr	r2, [pc, #660]	; (8006194 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005f00:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005f04:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	f003 0301 	and.w	r3, r3, #1
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d00a      	beq.n	8005f28 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005f12:	4ba0      	ldr	r3, [pc, #640]	; (8006194 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005f14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f18:	f023 0203 	bic.w	r2, r3, #3
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	685b      	ldr	r3, [r3, #4]
 8005f20:	499c      	ldr	r1, [pc, #624]	; (8006194 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005f22:	4313      	orrs	r3, r2
 8005f24:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	f003 0302 	and.w	r3, r3, #2
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d00a      	beq.n	8005f4a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005f34:	4b97      	ldr	r3, [pc, #604]	; (8006194 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005f36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f3a:	f023 020c 	bic.w	r2, r3, #12
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	689b      	ldr	r3, [r3, #8]
 8005f42:	4994      	ldr	r1, [pc, #592]	; (8006194 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005f44:	4313      	orrs	r3, r2
 8005f46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	f003 0304 	and.w	r3, r3, #4
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d00a      	beq.n	8005f6c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005f56:	4b8f      	ldr	r3, [pc, #572]	; (8006194 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005f58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f5c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	68db      	ldr	r3, [r3, #12]
 8005f64:	498b      	ldr	r1, [pc, #556]	; (8006194 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005f66:	4313      	orrs	r3, r2
 8005f68:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	f003 0308 	and.w	r3, r3, #8
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d00a      	beq.n	8005f8e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005f78:	4b86      	ldr	r3, [pc, #536]	; (8006194 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005f7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f7e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	691b      	ldr	r3, [r3, #16]
 8005f86:	4983      	ldr	r1, [pc, #524]	; (8006194 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005f88:	4313      	orrs	r3, r2
 8005f8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	f003 0320 	and.w	r3, r3, #32
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d00a      	beq.n	8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005f9a:	4b7e      	ldr	r3, [pc, #504]	; (8006194 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005f9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005fa0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	695b      	ldr	r3, [r3, #20]
 8005fa8:	497a      	ldr	r1, [pc, #488]	; (8006194 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005faa:	4313      	orrs	r3, r2
 8005fac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d00a      	beq.n	8005fd2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005fbc:	4b75      	ldr	r3, [pc, #468]	; (8006194 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005fbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005fc2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	699b      	ldr	r3, [r3, #24]
 8005fca:	4972      	ldr	r1, [pc, #456]	; (8006194 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005fcc:	4313      	orrs	r3, r2
 8005fce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d00a      	beq.n	8005ff4 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005fde:	4b6d      	ldr	r3, [pc, #436]	; (8006194 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005fe0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005fe4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	69db      	ldr	r3, [r3, #28]
 8005fec:	4969      	ldr	r1, [pc, #420]	; (8006194 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005fee:	4313      	orrs	r3, r2
 8005ff0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d00a      	beq.n	8006016 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006000:	4b64      	ldr	r3, [pc, #400]	; (8006194 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006002:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006006:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	6a1b      	ldr	r3, [r3, #32]
 800600e:	4961      	ldr	r1, [pc, #388]	; (8006194 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006010:	4313      	orrs	r3, r2
 8006012:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800601e:	2b00      	cmp	r3, #0
 8006020:	d00a      	beq.n	8006038 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006022:	4b5c      	ldr	r3, [pc, #368]	; (8006194 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006024:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006028:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006030:	4958      	ldr	r1, [pc, #352]	; (8006194 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006032:	4313      	orrs	r3, r2
 8006034:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006040:	2b00      	cmp	r3, #0
 8006042:	d015      	beq.n	8006070 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006044:	4b53      	ldr	r3, [pc, #332]	; (8006194 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006046:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800604a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006052:	4950      	ldr	r1, [pc, #320]	; (8006194 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006054:	4313      	orrs	r3, r2
 8006056:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800605e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006062:	d105      	bne.n	8006070 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006064:	4b4b      	ldr	r3, [pc, #300]	; (8006194 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006066:	68db      	ldr	r3, [r3, #12]
 8006068:	4a4a      	ldr	r2, [pc, #296]	; (8006194 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800606a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800606e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006078:	2b00      	cmp	r3, #0
 800607a:	d015      	beq.n	80060a8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800607c:	4b45      	ldr	r3, [pc, #276]	; (8006194 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800607e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006082:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800608a:	4942      	ldr	r1, [pc, #264]	; (8006194 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800608c:	4313      	orrs	r3, r2
 800608e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006096:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800609a:	d105      	bne.n	80060a8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800609c:	4b3d      	ldr	r3, [pc, #244]	; (8006194 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800609e:	68db      	ldr	r3, [r3, #12]
 80060a0:	4a3c      	ldr	r2, [pc, #240]	; (8006194 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80060a2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80060a6:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d015      	beq.n	80060e0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80060b4:	4b37      	ldr	r3, [pc, #220]	; (8006194 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80060b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060ba:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060c2:	4934      	ldr	r1, [pc, #208]	; (8006194 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80060c4:	4313      	orrs	r3, r2
 80060c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060ce:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80060d2:	d105      	bne.n	80060e0 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80060d4:	4b2f      	ldr	r3, [pc, #188]	; (8006194 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80060d6:	68db      	ldr	r3, [r3, #12]
 80060d8:	4a2e      	ldr	r2, [pc, #184]	; (8006194 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80060da:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80060de:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d015      	beq.n	8006118 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80060ec:	4b29      	ldr	r3, [pc, #164]	; (8006194 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80060ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060f2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80060fa:	4926      	ldr	r1, [pc, #152]	; (8006194 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80060fc:	4313      	orrs	r3, r2
 80060fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006106:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800610a:	d105      	bne.n	8006118 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800610c:	4b21      	ldr	r3, [pc, #132]	; (8006194 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800610e:	68db      	ldr	r3, [r3, #12]
 8006110:	4a20      	ldr	r2, [pc, #128]	; (8006194 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006112:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006116:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006120:	2b00      	cmp	r3, #0
 8006122:	d015      	beq.n	8006150 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006124:	4b1b      	ldr	r3, [pc, #108]	; (8006194 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006126:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800612a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006132:	4918      	ldr	r1, [pc, #96]	; (8006194 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006134:	4313      	orrs	r3, r2
 8006136:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800613e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006142:	d105      	bne.n	8006150 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006144:	4b13      	ldr	r3, [pc, #76]	; (8006194 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006146:	68db      	ldr	r3, [r3, #12]
 8006148:	4a12      	ldr	r2, [pc, #72]	; (8006194 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800614a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800614e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006158:	2b00      	cmp	r3, #0
 800615a:	d015      	beq.n	8006188 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800615c:	4b0d      	ldr	r3, [pc, #52]	; (8006194 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800615e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006162:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800616a:	490a      	ldr	r1, [pc, #40]	; (8006194 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800616c:	4313      	orrs	r3, r2
 800616e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006176:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800617a:	d105      	bne.n	8006188 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800617c:	4b05      	ldr	r3, [pc, #20]	; (8006194 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800617e:	68db      	ldr	r3, [r3, #12]
 8006180:	4a04      	ldr	r2, [pc, #16]	; (8006194 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006182:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006186:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8006188:	7cbb      	ldrb	r3, [r7, #18]
}
 800618a:	4618      	mov	r0, r3
 800618c:	3718      	adds	r7, #24
 800618e:	46bd      	mov	sp, r7
 8006190:	bd80      	pop	{r7, pc}
 8006192:	bf00      	nop
 8006194:	40021000 	.word	0x40021000

08006198 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006198:	b580      	push	{r7, lr}
 800619a:	b084      	sub	sp, #16
 800619c:	af00      	add	r7, sp, #0
 800619e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d101      	bne.n	80061aa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80061a6:	2301      	movs	r3, #1
 80061a8:	e09d      	b.n	80062e6 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d108      	bne.n	80061c4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	685b      	ldr	r3, [r3, #4]
 80061b6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80061ba:	d009      	beq.n	80061d0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	2200      	movs	r2, #0
 80061c0:	61da      	str	r2, [r3, #28]
 80061c2:	e005      	b.n	80061d0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	2200      	movs	r2, #0
 80061c8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	2200      	movs	r2, #0
 80061ce:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	2200      	movs	r2, #0
 80061d4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80061dc:	b2db      	uxtb	r3, r3
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d106      	bne.n	80061f0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	2200      	movs	r2, #0
 80061e6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80061ea:	6878      	ldr	r0, [r7, #4]
 80061ec:	f7fb fd6e 	bl	8001ccc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	2202      	movs	r2, #2
 80061f4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	681a      	ldr	r2, [r3, #0]
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006206:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	68db      	ldr	r3, [r3, #12]
 800620c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006210:	d902      	bls.n	8006218 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8006212:	2300      	movs	r3, #0
 8006214:	60fb      	str	r3, [r7, #12]
 8006216:	e002      	b.n	800621e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006218:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800621c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	68db      	ldr	r3, [r3, #12]
 8006222:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8006226:	d007      	beq.n	8006238 <HAL_SPI_Init+0xa0>
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	68db      	ldr	r3, [r3, #12]
 800622c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006230:	d002      	beq.n	8006238 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	2200      	movs	r2, #0
 8006236:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	685b      	ldr	r3, [r3, #4]
 800623c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	689b      	ldr	r3, [r3, #8]
 8006244:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006248:	431a      	orrs	r2, r3
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	691b      	ldr	r3, [r3, #16]
 800624e:	f003 0302 	and.w	r3, r3, #2
 8006252:	431a      	orrs	r2, r3
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	695b      	ldr	r3, [r3, #20]
 8006258:	f003 0301 	and.w	r3, r3, #1
 800625c:	431a      	orrs	r2, r3
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	699b      	ldr	r3, [r3, #24]
 8006262:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006266:	431a      	orrs	r2, r3
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	69db      	ldr	r3, [r3, #28]
 800626c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006270:	431a      	orrs	r2, r3
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	6a1b      	ldr	r3, [r3, #32]
 8006276:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800627a:	ea42 0103 	orr.w	r1, r2, r3
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006282:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	430a      	orrs	r2, r1
 800628c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	699b      	ldr	r3, [r3, #24]
 8006292:	0c1b      	lsrs	r3, r3, #16
 8006294:	f003 0204 	and.w	r2, r3, #4
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800629c:	f003 0310 	and.w	r3, r3, #16
 80062a0:	431a      	orrs	r2, r3
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062a6:	f003 0308 	and.w	r3, r3, #8
 80062aa:	431a      	orrs	r2, r3
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	68db      	ldr	r3, [r3, #12]
 80062b0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80062b4:	ea42 0103 	orr.w	r1, r2, r3
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	430a      	orrs	r2, r1
 80062c4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	69da      	ldr	r2, [r3, #28]
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80062d4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	2200      	movs	r2, #0
 80062da:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	2201      	movs	r2, #1
 80062e0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80062e4:	2300      	movs	r3, #0
}
 80062e6:	4618      	mov	r0, r3
 80062e8:	3710      	adds	r7, #16
 80062ea:	46bd      	mov	sp, r7
 80062ec:	bd80      	pop	{r7, pc}

080062ee <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80062ee:	b580      	push	{r7, lr}
 80062f0:	b08a      	sub	sp, #40	; 0x28
 80062f2:	af00      	add	r7, sp, #0
 80062f4:	60f8      	str	r0, [r7, #12]
 80062f6:	60b9      	str	r1, [r7, #8]
 80062f8:	607a      	str	r2, [r7, #4]
 80062fa:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80062fc:	2301      	movs	r3, #1
 80062fe:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006300:	2300      	movs	r3, #0
 8006302:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800630c:	2b01      	cmp	r3, #1
 800630e:	d101      	bne.n	8006314 <HAL_SPI_TransmitReceive+0x26>
 8006310:	2302      	movs	r3, #2
 8006312:	e1fb      	b.n	800670c <HAL_SPI_TransmitReceive+0x41e>
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	2201      	movs	r2, #1
 8006318:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800631c:	f7fc fca0 	bl	8002c60 <HAL_GetTick>
 8006320:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006328:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	685b      	ldr	r3, [r3, #4]
 800632e:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8006330:	887b      	ldrh	r3, [r7, #2]
 8006332:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8006334:	887b      	ldrh	r3, [r7, #2]
 8006336:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006338:	7efb      	ldrb	r3, [r7, #27]
 800633a:	2b01      	cmp	r3, #1
 800633c:	d00e      	beq.n	800635c <HAL_SPI_TransmitReceive+0x6e>
 800633e:	697b      	ldr	r3, [r7, #20]
 8006340:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006344:	d106      	bne.n	8006354 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	689b      	ldr	r3, [r3, #8]
 800634a:	2b00      	cmp	r3, #0
 800634c:	d102      	bne.n	8006354 <HAL_SPI_TransmitReceive+0x66>
 800634e:	7efb      	ldrb	r3, [r7, #27]
 8006350:	2b04      	cmp	r3, #4
 8006352:	d003      	beq.n	800635c <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8006354:	2302      	movs	r3, #2
 8006356:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800635a:	e1cd      	b.n	80066f8 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800635c:	68bb      	ldr	r3, [r7, #8]
 800635e:	2b00      	cmp	r3, #0
 8006360:	d005      	beq.n	800636e <HAL_SPI_TransmitReceive+0x80>
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	2b00      	cmp	r3, #0
 8006366:	d002      	beq.n	800636e <HAL_SPI_TransmitReceive+0x80>
 8006368:	887b      	ldrh	r3, [r7, #2]
 800636a:	2b00      	cmp	r3, #0
 800636c:	d103      	bne.n	8006376 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800636e:	2301      	movs	r3, #1
 8006370:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8006374:	e1c0      	b.n	80066f8 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800637c:	b2db      	uxtb	r3, r3
 800637e:	2b04      	cmp	r3, #4
 8006380:	d003      	beq.n	800638a <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	2205      	movs	r2, #5
 8006386:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	2200      	movs	r2, #0
 800638e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	687a      	ldr	r2, [r7, #4]
 8006394:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	887a      	ldrh	r2, [r7, #2]
 800639a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	887a      	ldrh	r2, [r7, #2]
 80063a2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	68ba      	ldr	r2, [r7, #8]
 80063aa:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	887a      	ldrh	r2, [r7, #2]
 80063b0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	887a      	ldrh	r2, [r7, #2]
 80063b6:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	2200      	movs	r2, #0
 80063bc:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	2200      	movs	r2, #0
 80063c2:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	68db      	ldr	r3, [r3, #12]
 80063c8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80063cc:	d802      	bhi.n	80063d4 <HAL_SPI_TransmitReceive+0xe6>
 80063ce:	8a3b      	ldrh	r3, [r7, #16]
 80063d0:	2b01      	cmp	r3, #1
 80063d2:	d908      	bls.n	80063e6 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	685a      	ldr	r2, [r3, #4]
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80063e2:	605a      	str	r2, [r3, #4]
 80063e4:	e007      	b.n	80063f6 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	685a      	ldr	r2, [r3, #4]
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80063f4:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006400:	2b40      	cmp	r3, #64	; 0x40
 8006402:	d007      	beq.n	8006414 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	681a      	ldr	r2, [r3, #0]
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006412:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	68db      	ldr	r3, [r3, #12]
 8006418:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800641c:	d97c      	bls.n	8006518 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	685b      	ldr	r3, [r3, #4]
 8006422:	2b00      	cmp	r3, #0
 8006424:	d002      	beq.n	800642c <HAL_SPI_TransmitReceive+0x13e>
 8006426:	8a7b      	ldrh	r3, [r7, #18]
 8006428:	2b01      	cmp	r3, #1
 800642a:	d169      	bne.n	8006500 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006430:	881a      	ldrh	r2, [r3, #0]
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800643c:	1c9a      	adds	r2, r3, #2
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006446:	b29b      	uxth	r3, r3
 8006448:	3b01      	subs	r3, #1
 800644a:	b29a      	uxth	r2, r3
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006450:	e056      	b.n	8006500 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	689b      	ldr	r3, [r3, #8]
 8006458:	f003 0302 	and.w	r3, r3, #2
 800645c:	2b02      	cmp	r3, #2
 800645e:	d11b      	bne.n	8006498 <HAL_SPI_TransmitReceive+0x1aa>
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006464:	b29b      	uxth	r3, r3
 8006466:	2b00      	cmp	r3, #0
 8006468:	d016      	beq.n	8006498 <HAL_SPI_TransmitReceive+0x1aa>
 800646a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800646c:	2b01      	cmp	r3, #1
 800646e:	d113      	bne.n	8006498 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006474:	881a      	ldrh	r2, [r3, #0]
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006480:	1c9a      	adds	r2, r3, #2
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800648a:	b29b      	uxth	r3, r3
 800648c:	3b01      	subs	r3, #1
 800648e:	b29a      	uxth	r2, r3
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006494:	2300      	movs	r3, #0
 8006496:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	689b      	ldr	r3, [r3, #8]
 800649e:	f003 0301 	and.w	r3, r3, #1
 80064a2:	2b01      	cmp	r3, #1
 80064a4:	d11c      	bne.n	80064e0 <HAL_SPI_TransmitReceive+0x1f2>
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80064ac:	b29b      	uxth	r3, r3
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d016      	beq.n	80064e0 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	68da      	ldr	r2, [r3, #12]
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064bc:	b292      	uxth	r2, r2
 80064be:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064c4:	1c9a      	adds	r2, r3, #2
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80064d0:	b29b      	uxth	r3, r3
 80064d2:	3b01      	subs	r3, #1
 80064d4:	b29a      	uxth	r2, r3
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80064dc:	2301      	movs	r3, #1
 80064de:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80064e0:	f7fc fbbe 	bl	8002c60 <HAL_GetTick>
 80064e4:	4602      	mov	r2, r0
 80064e6:	69fb      	ldr	r3, [r7, #28]
 80064e8:	1ad3      	subs	r3, r2, r3
 80064ea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80064ec:	429a      	cmp	r2, r3
 80064ee:	d807      	bhi.n	8006500 <HAL_SPI_TransmitReceive+0x212>
 80064f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064f2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80064f6:	d003      	beq.n	8006500 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 80064f8:	2303      	movs	r3, #3
 80064fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80064fe:	e0fb      	b.n	80066f8 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006504:	b29b      	uxth	r3, r3
 8006506:	2b00      	cmp	r3, #0
 8006508:	d1a3      	bne.n	8006452 <HAL_SPI_TransmitReceive+0x164>
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006510:	b29b      	uxth	r3, r3
 8006512:	2b00      	cmp	r3, #0
 8006514:	d19d      	bne.n	8006452 <HAL_SPI_TransmitReceive+0x164>
 8006516:	e0df      	b.n	80066d8 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	685b      	ldr	r3, [r3, #4]
 800651c:	2b00      	cmp	r3, #0
 800651e:	d003      	beq.n	8006528 <HAL_SPI_TransmitReceive+0x23a>
 8006520:	8a7b      	ldrh	r3, [r7, #18]
 8006522:	2b01      	cmp	r3, #1
 8006524:	f040 80cb 	bne.w	80066be <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800652c:	b29b      	uxth	r3, r3
 800652e:	2b01      	cmp	r3, #1
 8006530:	d912      	bls.n	8006558 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006536:	881a      	ldrh	r2, [r3, #0]
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006542:	1c9a      	adds	r2, r3, #2
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800654c:	b29b      	uxth	r3, r3
 800654e:	3b02      	subs	r3, #2
 8006550:	b29a      	uxth	r2, r3
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006556:	e0b2      	b.n	80066be <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	330c      	adds	r3, #12
 8006562:	7812      	ldrb	r2, [r2, #0]
 8006564:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800656a:	1c5a      	adds	r2, r3, #1
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006574:	b29b      	uxth	r3, r3
 8006576:	3b01      	subs	r3, #1
 8006578:	b29a      	uxth	r2, r3
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800657e:	e09e      	b.n	80066be <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	689b      	ldr	r3, [r3, #8]
 8006586:	f003 0302 	and.w	r3, r3, #2
 800658a:	2b02      	cmp	r3, #2
 800658c:	d134      	bne.n	80065f8 <HAL_SPI_TransmitReceive+0x30a>
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006592:	b29b      	uxth	r3, r3
 8006594:	2b00      	cmp	r3, #0
 8006596:	d02f      	beq.n	80065f8 <HAL_SPI_TransmitReceive+0x30a>
 8006598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800659a:	2b01      	cmp	r3, #1
 800659c:	d12c      	bne.n	80065f8 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80065a2:	b29b      	uxth	r3, r3
 80065a4:	2b01      	cmp	r3, #1
 80065a6:	d912      	bls.n	80065ce <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065ac:	881a      	ldrh	r2, [r3, #0]
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065b8:	1c9a      	adds	r2, r3, #2
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80065c2:	b29b      	uxth	r3, r3
 80065c4:	3b02      	subs	r3, #2
 80065c6:	b29a      	uxth	r2, r3
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	87da      	strh	r2, [r3, #62]	; 0x3e
 80065cc:	e012      	b.n	80065f4 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	330c      	adds	r3, #12
 80065d8:	7812      	ldrb	r2, [r2, #0]
 80065da:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065e0:	1c5a      	adds	r2, r3, #1
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80065ea:	b29b      	uxth	r3, r3
 80065ec:	3b01      	subs	r3, #1
 80065ee:	b29a      	uxth	r2, r3
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80065f4:	2300      	movs	r3, #0
 80065f6:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	689b      	ldr	r3, [r3, #8]
 80065fe:	f003 0301 	and.w	r3, r3, #1
 8006602:	2b01      	cmp	r3, #1
 8006604:	d148      	bne.n	8006698 <HAL_SPI_TransmitReceive+0x3aa>
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800660c:	b29b      	uxth	r3, r3
 800660e:	2b00      	cmp	r3, #0
 8006610:	d042      	beq.n	8006698 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006618:	b29b      	uxth	r3, r3
 800661a:	2b01      	cmp	r3, #1
 800661c:	d923      	bls.n	8006666 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	68da      	ldr	r2, [r3, #12]
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006628:	b292      	uxth	r2, r2
 800662a:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006630:	1c9a      	adds	r2, r3, #2
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800663c:	b29b      	uxth	r3, r3
 800663e:	3b02      	subs	r3, #2
 8006640:	b29a      	uxth	r2, r3
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800664e:	b29b      	uxth	r3, r3
 8006650:	2b01      	cmp	r3, #1
 8006652:	d81f      	bhi.n	8006694 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	685a      	ldr	r2, [r3, #4]
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006662:	605a      	str	r2, [r3, #4]
 8006664:	e016      	b.n	8006694 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	f103 020c 	add.w	r2, r3, #12
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006672:	7812      	ldrb	r2, [r2, #0]
 8006674:	b2d2      	uxtb	r2, r2
 8006676:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800667c:	1c5a      	adds	r2, r3, #1
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006688:	b29b      	uxth	r3, r3
 800668a:	3b01      	subs	r3, #1
 800668c:	b29a      	uxth	r2, r3
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006694:	2301      	movs	r3, #1
 8006696:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006698:	f7fc fae2 	bl	8002c60 <HAL_GetTick>
 800669c:	4602      	mov	r2, r0
 800669e:	69fb      	ldr	r3, [r7, #28]
 80066a0:	1ad3      	subs	r3, r2, r3
 80066a2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80066a4:	429a      	cmp	r2, r3
 80066a6:	d803      	bhi.n	80066b0 <HAL_SPI_TransmitReceive+0x3c2>
 80066a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066aa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80066ae:	d102      	bne.n	80066b6 <HAL_SPI_TransmitReceive+0x3c8>
 80066b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d103      	bne.n	80066be <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 80066b6:	2303      	movs	r3, #3
 80066b8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80066bc:	e01c      	b.n	80066f8 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80066c2:	b29b      	uxth	r3, r3
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	f47f af5b 	bne.w	8006580 <HAL_SPI_TransmitReceive+0x292>
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80066d0:	b29b      	uxth	r3, r3
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	f47f af54 	bne.w	8006580 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80066d8:	69fa      	ldr	r2, [r7, #28]
 80066da:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80066dc:	68f8      	ldr	r0, [r7, #12]
 80066de:	f000 f937 	bl	8006950 <SPI_EndRxTxTransaction>
 80066e2:	4603      	mov	r3, r0
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d006      	beq.n	80066f6 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 80066e8:	2301      	movs	r3, #1
 80066ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	2220      	movs	r2, #32
 80066f2:	661a      	str	r2, [r3, #96]	; 0x60
 80066f4:	e000      	b.n	80066f8 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 80066f6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	2201      	movs	r2, #1
 80066fc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	2200      	movs	r2, #0
 8006704:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8006708:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 800670c:	4618      	mov	r0, r3
 800670e:	3728      	adds	r7, #40	; 0x28
 8006710:	46bd      	mov	sp, r7
 8006712:	bd80      	pop	{r7, pc}

08006714 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006714:	b580      	push	{r7, lr}
 8006716:	b088      	sub	sp, #32
 8006718:	af00      	add	r7, sp, #0
 800671a:	60f8      	str	r0, [r7, #12]
 800671c:	60b9      	str	r1, [r7, #8]
 800671e:	603b      	str	r3, [r7, #0]
 8006720:	4613      	mov	r3, r2
 8006722:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006724:	f7fc fa9c 	bl	8002c60 <HAL_GetTick>
 8006728:	4602      	mov	r2, r0
 800672a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800672c:	1a9b      	subs	r3, r3, r2
 800672e:	683a      	ldr	r2, [r7, #0]
 8006730:	4413      	add	r3, r2
 8006732:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006734:	f7fc fa94 	bl	8002c60 <HAL_GetTick>
 8006738:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800673a:	4b39      	ldr	r3, [pc, #228]	; (8006820 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	015b      	lsls	r3, r3, #5
 8006740:	0d1b      	lsrs	r3, r3, #20
 8006742:	69fa      	ldr	r2, [r7, #28]
 8006744:	fb02 f303 	mul.w	r3, r2, r3
 8006748:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800674a:	e054      	b.n	80067f6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800674c:	683b      	ldr	r3, [r7, #0]
 800674e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006752:	d050      	beq.n	80067f6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006754:	f7fc fa84 	bl	8002c60 <HAL_GetTick>
 8006758:	4602      	mov	r2, r0
 800675a:	69bb      	ldr	r3, [r7, #24]
 800675c:	1ad3      	subs	r3, r2, r3
 800675e:	69fa      	ldr	r2, [r7, #28]
 8006760:	429a      	cmp	r2, r3
 8006762:	d902      	bls.n	800676a <SPI_WaitFlagStateUntilTimeout+0x56>
 8006764:	69fb      	ldr	r3, [r7, #28]
 8006766:	2b00      	cmp	r3, #0
 8006768:	d13d      	bne.n	80067e6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	685a      	ldr	r2, [r3, #4]
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006778:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	685b      	ldr	r3, [r3, #4]
 800677e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006782:	d111      	bne.n	80067a8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	689b      	ldr	r3, [r3, #8]
 8006788:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800678c:	d004      	beq.n	8006798 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	689b      	ldr	r3, [r3, #8]
 8006792:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006796:	d107      	bne.n	80067a8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	681a      	ldr	r2, [r3, #0]
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80067a6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067ac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80067b0:	d10f      	bne.n	80067d2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	681a      	ldr	r2, [r3, #0]
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80067c0:	601a      	str	r2, [r3, #0]
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	681a      	ldr	r2, [r3, #0]
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80067d0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	2201      	movs	r2, #1
 80067d6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	2200      	movs	r2, #0
 80067de:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80067e2:	2303      	movs	r3, #3
 80067e4:	e017      	b.n	8006816 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80067e6:	697b      	ldr	r3, [r7, #20]
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d101      	bne.n	80067f0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80067ec:	2300      	movs	r3, #0
 80067ee:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80067f0:	697b      	ldr	r3, [r7, #20]
 80067f2:	3b01      	subs	r3, #1
 80067f4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	689a      	ldr	r2, [r3, #8]
 80067fc:	68bb      	ldr	r3, [r7, #8]
 80067fe:	4013      	ands	r3, r2
 8006800:	68ba      	ldr	r2, [r7, #8]
 8006802:	429a      	cmp	r2, r3
 8006804:	bf0c      	ite	eq
 8006806:	2301      	moveq	r3, #1
 8006808:	2300      	movne	r3, #0
 800680a:	b2db      	uxtb	r3, r3
 800680c:	461a      	mov	r2, r3
 800680e:	79fb      	ldrb	r3, [r7, #7]
 8006810:	429a      	cmp	r2, r3
 8006812:	d19b      	bne.n	800674c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006814:	2300      	movs	r3, #0
}
 8006816:	4618      	mov	r0, r3
 8006818:	3720      	adds	r7, #32
 800681a:	46bd      	mov	sp, r7
 800681c:	bd80      	pop	{r7, pc}
 800681e:	bf00      	nop
 8006820:	20000000 	.word	0x20000000

08006824 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006824:	b580      	push	{r7, lr}
 8006826:	b08a      	sub	sp, #40	; 0x28
 8006828:	af00      	add	r7, sp, #0
 800682a:	60f8      	str	r0, [r7, #12]
 800682c:	60b9      	str	r1, [r7, #8]
 800682e:	607a      	str	r2, [r7, #4]
 8006830:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8006832:	2300      	movs	r3, #0
 8006834:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8006836:	f7fc fa13 	bl	8002c60 <HAL_GetTick>
 800683a:	4602      	mov	r2, r0
 800683c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800683e:	1a9b      	subs	r3, r3, r2
 8006840:	683a      	ldr	r2, [r7, #0]
 8006842:	4413      	add	r3, r2
 8006844:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8006846:	f7fc fa0b 	bl	8002c60 <HAL_GetTick>
 800684a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	330c      	adds	r3, #12
 8006852:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8006854:	4b3d      	ldr	r3, [pc, #244]	; (800694c <SPI_WaitFifoStateUntilTimeout+0x128>)
 8006856:	681a      	ldr	r2, [r3, #0]
 8006858:	4613      	mov	r3, r2
 800685a:	009b      	lsls	r3, r3, #2
 800685c:	4413      	add	r3, r2
 800685e:	00da      	lsls	r2, r3, #3
 8006860:	1ad3      	subs	r3, r2, r3
 8006862:	0d1b      	lsrs	r3, r3, #20
 8006864:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006866:	fb02 f303 	mul.w	r3, r2, r3
 800686a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800686c:	e060      	b.n	8006930 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800686e:	68bb      	ldr	r3, [r7, #8]
 8006870:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8006874:	d107      	bne.n	8006886 <SPI_WaitFifoStateUntilTimeout+0x62>
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	2b00      	cmp	r3, #0
 800687a:	d104      	bne.n	8006886 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800687c:	69fb      	ldr	r3, [r7, #28]
 800687e:	781b      	ldrb	r3, [r3, #0]
 8006880:	b2db      	uxtb	r3, r3
 8006882:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8006884:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8006886:	683b      	ldr	r3, [r7, #0]
 8006888:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800688c:	d050      	beq.n	8006930 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800688e:	f7fc f9e7 	bl	8002c60 <HAL_GetTick>
 8006892:	4602      	mov	r2, r0
 8006894:	6a3b      	ldr	r3, [r7, #32]
 8006896:	1ad3      	subs	r3, r2, r3
 8006898:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800689a:	429a      	cmp	r2, r3
 800689c:	d902      	bls.n	80068a4 <SPI_WaitFifoStateUntilTimeout+0x80>
 800689e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d13d      	bne.n	8006920 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	685a      	ldr	r2, [r3, #4]
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80068b2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	685b      	ldr	r3, [r3, #4]
 80068b8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80068bc:	d111      	bne.n	80068e2 <SPI_WaitFifoStateUntilTimeout+0xbe>
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	689b      	ldr	r3, [r3, #8]
 80068c2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80068c6:	d004      	beq.n	80068d2 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	689b      	ldr	r3, [r3, #8]
 80068cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80068d0:	d107      	bne.n	80068e2 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	681a      	ldr	r2, [r3, #0]
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80068e0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80068ea:	d10f      	bne.n	800690c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	681a      	ldr	r2, [r3, #0]
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80068fa:	601a      	str	r2, [r3, #0]
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	681a      	ldr	r2, [r3, #0]
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800690a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	2201      	movs	r2, #1
 8006910:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	2200      	movs	r2, #0
 8006918:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800691c:	2303      	movs	r3, #3
 800691e:	e010      	b.n	8006942 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006920:	69bb      	ldr	r3, [r7, #24]
 8006922:	2b00      	cmp	r3, #0
 8006924:	d101      	bne.n	800692a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8006926:	2300      	movs	r3, #0
 8006928:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800692a:	69bb      	ldr	r3, [r7, #24]
 800692c:	3b01      	subs	r3, #1
 800692e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	689a      	ldr	r2, [r3, #8]
 8006936:	68bb      	ldr	r3, [r7, #8]
 8006938:	4013      	ands	r3, r2
 800693a:	687a      	ldr	r2, [r7, #4]
 800693c:	429a      	cmp	r2, r3
 800693e:	d196      	bne.n	800686e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8006940:	2300      	movs	r3, #0
}
 8006942:	4618      	mov	r0, r3
 8006944:	3728      	adds	r7, #40	; 0x28
 8006946:	46bd      	mov	sp, r7
 8006948:	bd80      	pop	{r7, pc}
 800694a:	bf00      	nop
 800694c:	20000000 	.word	0x20000000

08006950 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006950:	b580      	push	{r7, lr}
 8006952:	b086      	sub	sp, #24
 8006954:	af02      	add	r7, sp, #8
 8006956:	60f8      	str	r0, [r7, #12]
 8006958:	60b9      	str	r1, [r7, #8]
 800695a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	9300      	str	r3, [sp, #0]
 8006960:	68bb      	ldr	r3, [r7, #8]
 8006962:	2200      	movs	r2, #0
 8006964:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8006968:	68f8      	ldr	r0, [r7, #12]
 800696a:	f7ff ff5b 	bl	8006824 <SPI_WaitFifoStateUntilTimeout>
 800696e:	4603      	mov	r3, r0
 8006970:	2b00      	cmp	r3, #0
 8006972:	d007      	beq.n	8006984 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006978:	f043 0220 	orr.w	r2, r3, #32
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006980:	2303      	movs	r3, #3
 8006982:	e027      	b.n	80069d4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	9300      	str	r3, [sp, #0]
 8006988:	68bb      	ldr	r3, [r7, #8]
 800698a:	2200      	movs	r2, #0
 800698c:	2180      	movs	r1, #128	; 0x80
 800698e:	68f8      	ldr	r0, [r7, #12]
 8006990:	f7ff fec0 	bl	8006714 <SPI_WaitFlagStateUntilTimeout>
 8006994:	4603      	mov	r3, r0
 8006996:	2b00      	cmp	r3, #0
 8006998:	d007      	beq.n	80069aa <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800699e:	f043 0220 	orr.w	r2, r3, #32
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80069a6:	2303      	movs	r3, #3
 80069a8:	e014      	b.n	80069d4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	9300      	str	r3, [sp, #0]
 80069ae:	68bb      	ldr	r3, [r7, #8]
 80069b0:	2200      	movs	r2, #0
 80069b2:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80069b6:	68f8      	ldr	r0, [r7, #12]
 80069b8:	f7ff ff34 	bl	8006824 <SPI_WaitFifoStateUntilTimeout>
 80069bc:	4603      	mov	r3, r0
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d007      	beq.n	80069d2 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80069c6:	f043 0220 	orr.w	r2, r3, #32
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80069ce:	2303      	movs	r3, #3
 80069d0:	e000      	b.n	80069d4 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80069d2:	2300      	movs	r3, #0
}
 80069d4:	4618      	mov	r0, r3
 80069d6:	3710      	adds	r7, #16
 80069d8:	46bd      	mov	sp, r7
 80069da:	bd80      	pop	{r7, pc}

080069dc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80069dc:	b580      	push	{r7, lr}
 80069de:	b082      	sub	sp, #8
 80069e0:	af00      	add	r7, sp, #0
 80069e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d101      	bne.n	80069ee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80069ea:	2301      	movs	r3, #1
 80069ec:	e049      	b.n	8006a82 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80069f4:	b2db      	uxtb	r3, r3
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d106      	bne.n	8006a08 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	2200      	movs	r2, #0
 80069fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006a02:	6878      	ldr	r0, [r7, #4]
 8006a04:	f7fb f9a6 	bl	8001d54 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	2202      	movs	r2, #2
 8006a0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681a      	ldr	r2, [r3, #0]
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	3304      	adds	r3, #4
 8006a18:	4619      	mov	r1, r3
 8006a1a:	4610      	mov	r0, r2
 8006a1c:	f000 fe0e 	bl	800763c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	2201      	movs	r2, #1
 8006a24:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	2201      	movs	r2, #1
 8006a2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	2201      	movs	r2, #1
 8006a34:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	2201      	movs	r2, #1
 8006a3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	2201      	movs	r2, #1
 8006a44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	2201      	movs	r2, #1
 8006a4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	2201      	movs	r2, #1
 8006a54:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	2201      	movs	r2, #1
 8006a5c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	2201      	movs	r2, #1
 8006a64:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	2201      	movs	r2, #1
 8006a6c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	2201      	movs	r2, #1
 8006a74:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	2201      	movs	r2, #1
 8006a7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006a80:	2300      	movs	r3, #0
}
 8006a82:	4618      	mov	r0, r3
 8006a84:	3708      	adds	r7, #8
 8006a86:	46bd      	mov	sp, r7
 8006a88:	bd80      	pop	{r7, pc}
	...

08006a8c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006a8c:	b480      	push	{r7}
 8006a8e:	b085      	sub	sp, #20
 8006a90:	af00      	add	r7, sp, #0
 8006a92:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a9a:	b2db      	uxtb	r3, r3
 8006a9c:	2b01      	cmp	r3, #1
 8006a9e:	d001      	beq.n	8006aa4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006aa0:	2301      	movs	r3, #1
 8006aa2:	e04a      	b.n	8006b3a <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	2202      	movs	r2, #2
 8006aa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	68da      	ldr	r2, [r3, #12]
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	f042 0201 	orr.w	r2, r2, #1
 8006aba:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	4a21      	ldr	r2, [pc, #132]	; (8006b48 <HAL_TIM_Base_Start_IT+0xbc>)
 8006ac2:	4293      	cmp	r3, r2
 8006ac4:	d018      	beq.n	8006af8 <HAL_TIM_Base_Start_IT+0x6c>
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ace:	d013      	beq.n	8006af8 <HAL_TIM_Base_Start_IT+0x6c>
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	4a1d      	ldr	r2, [pc, #116]	; (8006b4c <HAL_TIM_Base_Start_IT+0xc0>)
 8006ad6:	4293      	cmp	r3, r2
 8006ad8:	d00e      	beq.n	8006af8 <HAL_TIM_Base_Start_IT+0x6c>
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	4a1c      	ldr	r2, [pc, #112]	; (8006b50 <HAL_TIM_Base_Start_IT+0xc4>)
 8006ae0:	4293      	cmp	r3, r2
 8006ae2:	d009      	beq.n	8006af8 <HAL_TIM_Base_Start_IT+0x6c>
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	4a1a      	ldr	r2, [pc, #104]	; (8006b54 <HAL_TIM_Base_Start_IT+0xc8>)
 8006aea:	4293      	cmp	r3, r2
 8006aec:	d004      	beq.n	8006af8 <HAL_TIM_Base_Start_IT+0x6c>
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	4a19      	ldr	r2, [pc, #100]	; (8006b58 <HAL_TIM_Base_Start_IT+0xcc>)
 8006af4:	4293      	cmp	r3, r2
 8006af6:	d115      	bne.n	8006b24 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	689a      	ldr	r2, [r3, #8]
 8006afe:	4b17      	ldr	r3, [pc, #92]	; (8006b5c <HAL_TIM_Base_Start_IT+0xd0>)
 8006b00:	4013      	ands	r3, r2
 8006b02:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	2b06      	cmp	r3, #6
 8006b08:	d015      	beq.n	8006b36 <HAL_TIM_Base_Start_IT+0xaa>
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006b10:	d011      	beq.n	8006b36 <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	681a      	ldr	r2, [r3, #0]
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	f042 0201 	orr.w	r2, r2, #1
 8006b20:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006b22:	e008      	b.n	8006b36 <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	681a      	ldr	r2, [r3, #0]
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	f042 0201 	orr.w	r2, r2, #1
 8006b32:	601a      	str	r2, [r3, #0]
 8006b34:	e000      	b.n	8006b38 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006b36:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006b38:	2300      	movs	r3, #0
}
 8006b3a:	4618      	mov	r0, r3
 8006b3c:	3714      	adds	r7, #20
 8006b3e:	46bd      	mov	sp, r7
 8006b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b44:	4770      	bx	lr
 8006b46:	bf00      	nop
 8006b48:	40012c00 	.word	0x40012c00
 8006b4c:	40000400 	.word	0x40000400
 8006b50:	40000800 	.word	0x40000800
 8006b54:	40013400 	.word	0x40013400
 8006b58:	40014000 	.word	0x40014000
 8006b5c:	00010007 	.word	0x00010007

08006b60 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006b60:	b580      	push	{r7, lr}
 8006b62:	b082      	sub	sp, #8
 8006b64:	af00      	add	r7, sp, #0
 8006b66:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d101      	bne.n	8006b72 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006b6e:	2301      	movs	r3, #1
 8006b70:	e049      	b.n	8006c06 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b78:	b2db      	uxtb	r3, r3
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d106      	bne.n	8006b8c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	2200      	movs	r2, #0
 8006b82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006b86:	6878      	ldr	r0, [r7, #4]
 8006b88:	f000 f841 	bl	8006c0e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	2202      	movs	r2, #2
 8006b90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681a      	ldr	r2, [r3, #0]
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	3304      	adds	r3, #4
 8006b9c:	4619      	mov	r1, r3
 8006b9e:	4610      	mov	r0, r2
 8006ba0:	f000 fd4c 	bl	800763c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	2201      	movs	r2, #1
 8006ba8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	2201      	movs	r2, #1
 8006bb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	2201      	movs	r2, #1
 8006bb8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	2201      	movs	r2, #1
 8006bc0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	2201      	movs	r2, #1
 8006bc8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	2201      	movs	r2, #1
 8006bd0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	2201      	movs	r2, #1
 8006bd8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	2201      	movs	r2, #1
 8006be0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	2201      	movs	r2, #1
 8006be8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	2201      	movs	r2, #1
 8006bf0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	2201      	movs	r2, #1
 8006bf8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	2201      	movs	r2, #1
 8006c00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006c04:	2300      	movs	r3, #0
}
 8006c06:	4618      	mov	r0, r3
 8006c08:	3708      	adds	r7, #8
 8006c0a:	46bd      	mov	sp, r7
 8006c0c:	bd80      	pop	{r7, pc}

08006c0e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006c0e:	b480      	push	{r7}
 8006c10:	b083      	sub	sp, #12
 8006c12:	af00      	add	r7, sp, #0
 8006c14:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006c16:	bf00      	nop
 8006c18:	370c      	adds	r7, #12
 8006c1a:	46bd      	mov	sp, r7
 8006c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c20:	4770      	bx	lr
	...

08006c24 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006c24:	b580      	push	{r7, lr}
 8006c26:	b084      	sub	sp, #16
 8006c28:	af00      	add	r7, sp, #0
 8006c2a:	6078      	str	r0, [r7, #4]
 8006c2c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006c2e:	2300      	movs	r3, #0
 8006c30:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006c32:	683b      	ldr	r3, [r7, #0]
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d109      	bne.n	8006c4c <HAL_TIM_PWM_Start_IT+0x28>
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006c3e:	b2db      	uxtb	r3, r3
 8006c40:	2b01      	cmp	r3, #1
 8006c42:	bf14      	ite	ne
 8006c44:	2301      	movne	r3, #1
 8006c46:	2300      	moveq	r3, #0
 8006c48:	b2db      	uxtb	r3, r3
 8006c4a:	e03c      	b.n	8006cc6 <HAL_TIM_PWM_Start_IT+0xa2>
 8006c4c:	683b      	ldr	r3, [r7, #0]
 8006c4e:	2b04      	cmp	r3, #4
 8006c50:	d109      	bne.n	8006c66 <HAL_TIM_PWM_Start_IT+0x42>
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006c58:	b2db      	uxtb	r3, r3
 8006c5a:	2b01      	cmp	r3, #1
 8006c5c:	bf14      	ite	ne
 8006c5e:	2301      	movne	r3, #1
 8006c60:	2300      	moveq	r3, #0
 8006c62:	b2db      	uxtb	r3, r3
 8006c64:	e02f      	b.n	8006cc6 <HAL_TIM_PWM_Start_IT+0xa2>
 8006c66:	683b      	ldr	r3, [r7, #0]
 8006c68:	2b08      	cmp	r3, #8
 8006c6a:	d109      	bne.n	8006c80 <HAL_TIM_PWM_Start_IT+0x5c>
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006c72:	b2db      	uxtb	r3, r3
 8006c74:	2b01      	cmp	r3, #1
 8006c76:	bf14      	ite	ne
 8006c78:	2301      	movne	r3, #1
 8006c7a:	2300      	moveq	r3, #0
 8006c7c:	b2db      	uxtb	r3, r3
 8006c7e:	e022      	b.n	8006cc6 <HAL_TIM_PWM_Start_IT+0xa2>
 8006c80:	683b      	ldr	r3, [r7, #0]
 8006c82:	2b0c      	cmp	r3, #12
 8006c84:	d109      	bne.n	8006c9a <HAL_TIM_PWM_Start_IT+0x76>
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006c8c:	b2db      	uxtb	r3, r3
 8006c8e:	2b01      	cmp	r3, #1
 8006c90:	bf14      	ite	ne
 8006c92:	2301      	movne	r3, #1
 8006c94:	2300      	moveq	r3, #0
 8006c96:	b2db      	uxtb	r3, r3
 8006c98:	e015      	b.n	8006cc6 <HAL_TIM_PWM_Start_IT+0xa2>
 8006c9a:	683b      	ldr	r3, [r7, #0]
 8006c9c:	2b10      	cmp	r3, #16
 8006c9e:	d109      	bne.n	8006cb4 <HAL_TIM_PWM_Start_IT+0x90>
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006ca6:	b2db      	uxtb	r3, r3
 8006ca8:	2b01      	cmp	r3, #1
 8006caa:	bf14      	ite	ne
 8006cac:	2301      	movne	r3, #1
 8006cae:	2300      	moveq	r3, #0
 8006cb0:	b2db      	uxtb	r3, r3
 8006cb2:	e008      	b.n	8006cc6 <HAL_TIM_PWM_Start_IT+0xa2>
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006cba:	b2db      	uxtb	r3, r3
 8006cbc:	2b01      	cmp	r3, #1
 8006cbe:	bf14      	ite	ne
 8006cc0:	2301      	movne	r3, #1
 8006cc2:	2300      	moveq	r3, #0
 8006cc4:	b2db      	uxtb	r3, r3
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d001      	beq.n	8006cce <HAL_TIM_PWM_Start_IT+0xaa>
  {
    return HAL_ERROR;
 8006cca:	2301      	movs	r3, #1
 8006ccc:	e0e2      	b.n	8006e94 <HAL_TIM_PWM_Start_IT+0x270>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006cce:	683b      	ldr	r3, [r7, #0]
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d104      	bne.n	8006cde <HAL_TIM_PWM_Start_IT+0xba>
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	2202      	movs	r2, #2
 8006cd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006cdc:	e023      	b.n	8006d26 <HAL_TIM_PWM_Start_IT+0x102>
 8006cde:	683b      	ldr	r3, [r7, #0]
 8006ce0:	2b04      	cmp	r3, #4
 8006ce2:	d104      	bne.n	8006cee <HAL_TIM_PWM_Start_IT+0xca>
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	2202      	movs	r2, #2
 8006ce8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006cec:	e01b      	b.n	8006d26 <HAL_TIM_PWM_Start_IT+0x102>
 8006cee:	683b      	ldr	r3, [r7, #0]
 8006cf0:	2b08      	cmp	r3, #8
 8006cf2:	d104      	bne.n	8006cfe <HAL_TIM_PWM_Start_IT+0xda>
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	2202      	movs	r2, #2
 8006cf8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006cfc:	e013      	b.n	8006d26 <HAL_TIM_PWM_Start_IT+0x102>
 8006cfe:	683b      	ldr	r3, [r7, #0]
 8006d00:	2b0c      	cmp	r3, #12
 8006d02:	d104      	bne.n	8006d0e <HAL_TIM_PWM_Start_IT+0xea>
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	2202      	movs	r2, #2
 8006d08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006d0c:	e00b      	b.n	8006d26 <HAL_TIM_PWM_Start_IT+0x102>
 8006d0e:	683b      	ldr	r3, [r7, #0]
 8006d10:	2b10      	cmp	r3, #16
 8006d12:	d104      	bne.n	8006d1e <HAL_TIM_PWM_Start_IT+0xfa>
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	2202      	movs	r2, #2
 8006d18:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006d1c:	e003      	b.n	8006d26 <HAL_TIM_PWM_Start_IT+0x102>
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	2202      	movs	r2, #2
 8006d22:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  switch (Channel)
 8006d26:	683b      	ldr	r3, [r7, #0]
 8006d28:	2b0c      	cmp	r3, #12
 8006d2a:	d841      	bhi.n	8006db0 <HAL_TIM_PWM_Start_IT+0x18c>
 8006d2c:	a201      	add	r2, pc, #4	; (adr r2, 8006d34 <HAL_TIM_PWM_Start_IT+0x110>)
 8006d2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d32:	bf00      	nop
 8006d34:	08006d69 	.word	0x08006d69
 8006d38:	08006db1 	.word	0x08006db1
 8006d3c:	08006db1 	.word	0x08006db1
 8006d40:	08006db1 	.word	0x08006db1
 8006d44:	08006d7b 	.word	0x08006d7b
 8006d48:	08006db1 	.word	0x08006db1
 8006d4c:	08006db1 	.word	0x08006db1
 8006d50:	08006db1 	.word	0x08006db1
 8006d54:	08006d8d 	.word	0x08006d8d
 8006d58:	08006db1 	.word	0x08006db1
 8006d5c:	08006db1 	.word	0x08006db1
 8006d60:	08006db1 	.word	0x08006db1
 8006d64:	08006d9f 	.word	0x08006d9f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	68da      	ldr	r2, [r3, #12]
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	f042 0202 	orr.w	r2, r2, #2
 8006d76:	60da      	str	r2, [r3, #12]
      break;
 8006d78:	e01d      	b.n	8006db6 <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	68da      	ldr	r2, [r3, #12]
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	f042 0204 	orr.w	r2, r2, #4
 8006d88:	60da      	str	r2, [r3, #12]
      break;
 8006d8a:	e014      	b.n	8006db6 <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	68da      	ldr	r2, [r3, #12]
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	f042 0208 	orr.w	r2, r2, #8
 8006d9a:	60da      	str	r2, [r3, #12]
      break;
 8006d9c:	e00b      	b.n	8006db6 <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	68da      	ldr	r2, [r3, #12]
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	f042 0210 	orr.w	r2, r2, #16
 8006dac:	60da      	str	r2, [r3, #12]
      break;
 8006dae:	e002      	b.n	8006db6 <HAL_TIM_PWM_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8006db0:	2301      	movs	r3, #1
 8006db2:	73fb      	strb	r3, [r7, #15]
      break;
 8006db4:	bf00      	nop
  }

  if (status == HAL_OK)
 8006db6:	7bfb      	ldrb	r3, [r7, #15]
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d16a      	bne.n	8006e92 <HAL_TIM_PWM_Start_IT+0x26e>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	2201      	movs	r2, #1
 8006dc2:	6839      	ldr	r1, [r7, #0]
 8006dc4:	4618      	mov	r0, r3
 8006dc6:	f001 f8c3 	bl	8007f50 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	4a33      	ldr	r2, [pc, #204]	; (8006e9c <HAL_TIM_PWM_Start_IT+0x278>)
 8006dd0:	4293      	cmp	r3, r2
 8006dd2:	d013      	beq.n	8006dfc <HAL_TIM_PWM_Start_IT+0x1d8>
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	4a31      	ldr	r2, [pc, #196]	; (8006ea0 <HAL_TIM_PWM_Start_IT+0x27c>)
 8006dda:	4293      	cmp	r3, r2
 8006ddc:	d00e      	beq.n	8006dfc <HAL_TIM_PWM_Start_IT+0x1d8>
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	4a30      	ldr	r2, [pc, #192]	; (8006ea4 <HAL_TIM_PWM_Start_IT+0x280>)
 8006de4:	4293      	cmp	r3, r2
 8006de6:	d009      	beq.n	8006dfc <HAL_TIM_PWM_Start_IT+0x1d8>
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	4a2e      	ldr	r2, [pc, #184]	; (8006ea8 <HAL_TIM_PWM_Start_IT+0x284>)
 8006dee:	4293      	cmp	r3, r2
 8006df0:	d004      	beq.n	8006dfc <HAL_TIM_PWM_Start_IT+0x1d8>
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	4a2d      	ldr	r2, [pc, #180]	; (8006eac <HAL_TIM_PWM_Start_IT+0x288>)
 8006df8:	4293      	cmp	r3, r2
 8006dfa:	d101      	bne.n	8006e00 <HAL_TIM_PWM_Start_IT+0x1dc>
 8006dfc:	2301      	movs	r3, #1
 8006dfe:	e000      	b.n	8006e02 <HAL_TIM_PWM_Start_IT+0x1de>
 8006e00:	2300      	movs	r3, #0
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d007      	beq.n	8006e16 <HAL_TIM_PWM_Start_IT+0x1f2>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006e14:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	4a20      	ldr	r2, [pc, #128]	; (8006e9c <HAL_TIM_PWM_Start_IT+0x278>)
 8006e1c:	4293      	cmp	r3, r2
 8006e1e:	d018      	beq.n	8006e52 <HAL_TIM_PWM_Start_IT+0x22e>
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e28:	d013      	beq.n	8006e52 <HAL_TIM_PWM_Start_IT+0x22e>
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	4a20      	ldr	r2, [pc, #128]	; (8006eb0 <HAL_TIM_PWM_Start_IT+0x28c>)
 8006e30:	4293      	cmp	r3, r2
 8006e32:	d00e      	beq.n	8006e52 <HAL_TIM_PWM_Start_IT+0x22e>
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	4a1e      	ldr	r2, [pc, #120]	; (8006eb4 <HAL_TIM_PWM_Start_IT+0x290>)
 8006e3a:	4293      	cmp	r3, r2
 8006e3c:	d009      	beq.n	8006e52 <HAL_TIM_PWM_Start_IT+0x22e>
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	4a17      	ldr	r2, [pc, #92]	; (8006ea0 <HAL_TIM_PWM_Start_IT+0x27c>)
 8006e44:	4293      	cmp	r3, r2
 8006e46:	d004      	beq.n	8006e52 <HAL_TIM_PWM_Start_IT+0x22e>
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	4a15      	ldr	r2, [pc, #84]	; (8006ea4 <HAL_TIM_PWM_Start_IT+0x280>)
 8006e4e:	4293      	cmp	r3, r2
 8006e50:	d115      	bne.n	8006e7e <HAL_TIM_PWM_Start_IT+0x25a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	689a      	ldr	r2, [r3, #8]
 8006e58:	4b17      	ldr	r3, [pc, #92]	; (8006eb8 <HAL_TIM_PWM_Start_IT+0x294>)
 8006e5a:	4013      	ands	r3, r2
 8006e5c:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006e5e:	68bb      	ldr	r3, [r7, #8]
 8006e60:	2b06      	cmp	r3, #6
 8006e62:	d015      	beq.n	8006e90 <HAL_TIM_PWM_Start_IT+0x26c>
 8006e64:	68bb      	ldr	r3, [r7, #8]
 8006e66:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006e6a:	d011      	beq.n	8006e90 <HAL_TIM_PWM_Start_IT+0x26c>
      {
        __HAL_TIM_ENABLE(htim);
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	681a      	ldr	r2, [r3, #0]
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	f042 0201 	orr.w	r2, r2, #1
 8006e7a:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006e7c:	e008      	b.n	8006e90 <HAL_TIM_PWM_Start_IT+0x26c>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	681a      	ldr	r2, [r3, #0]
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	f042 0201 	orr.w	r2, r2, #1
 8006e8c:	601a      	str	r2, [r3, #0]
 8006e8e:	e000      	b.n	8006e92 <HAL_TIM_PWM_Start_IT+0x26e>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006e90:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8006e92:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e94:	4618      	mov	r0, r3
 8006e96:	3710      	adds	r7, #16
 8006e98:	46bd      	mov	sp, r7
 8006e9a:	bd80      	pop	{r7, pc}
 8006e9c:	40012c00 	.word	0x40012c00
 8006ea0:	40013400 	.word	0x40013400
 8006ea4:	40014000 	.word	0x40014000
 8006ea8:	40014400 	.word	0x40014400
 8006eac:	40014800 	.word	0x40014800
 8006eb0:	40000400 	.word	0x40000400
 8006eb4:	40000800 	.word	0x40000800
 8006eb8:	00010007 	.word	0x00010007

08006ebc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006ebc:	b580      	push	{r7, lr}
 8006ebe:	b082      	sub	sp, #8
 8006ec0:	af00      	add	r7, sp, #0
 8006ec2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	691b      	ldr	r3, [r3, #16]
 8006eca:	f003 0302 	and.w	r3, r3, #2
 8006ece:	2b02      	cmp	r3, #2
 8006ed0:	d122      	bne.n	8006f18 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	68db      	ldr	r3, [r3, #12]
 8006ed8:	f003 0302 	and.w	r3, r3, #2
 8006edc:	2b02      	cmp	r3, #2
 8006ede:	d11b      	bne.n	8006f18 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	f06f 0202 	mvn.w	r2, #2
 8006ee8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	2201      	movs	r2, #1
 8006eee:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	699b      	ldr	r3, [r3, #24]
 8006ef6:	f003 0303 	and.w	r3, r3, #3
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d003      	beq.n	8006f06 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006efe:	6878      	ldr	r0, [r7, #4]
 8006f00:	f000 fb7e 	bl	8007600 <HAL_TIM_IC_CaptureCallback>
 8006f04:	e005      	b.n	8006f12 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006f06:	6878      	ldr	r0, [r7, #4]
 8006f08:	f000 fb70 	bl	80075ec <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006f0c:	6878      	ldr	r0, [r7, #4]
 8006f0e:	f000 fb81 	bl	8007614 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	2200      	movs	r2, #0
 8006f16:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	691b      	ldr	r3, [r3, #16]
 8006f1e:	f003 0304 	and.w	r3, r3, #4
 8006f22:	2b04      	cmp	r3, #4
 8006f24:	d122      	bne.n	8006f6c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	68db      	ldr	r3, [r3, #12]
 8006f2c:	f003 0304 	and.w	r3, r3, #4
 8006f30:	2b04      	cmp	r3, #4
 8006f32:	d11b      	bne.n	8006f6c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	f06f 0204 	mvn.w	r2, #4
 8006f3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	2202      	movs	r2, #2
 8006f42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	699b      	ldr	r3, [r3, #24]
 8006f4a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d003      	beq.n	8006f5a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006f52:	6878      	ldr	r0, [r7, #4]
 8006f54:	f000 fb54 	bl	8007600 <HAL_TIM_IC_CaptureCallback>
 8006f58:	e005      	b.n	8006f66 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006f5a:	6878      	ldr	r0, [r7, #4]
 8006f5c:	f000 fb46 	bl	80075ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006f60:	6878      	ldr	r0, [r7, #4]
 8006f62:	f000 fb57 	bl	8007614 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	2200      	movs	r2, #0
 8006f6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	691b      	ldr	r3, [r3, #16]
 8006f72:	f003 0308 	and.w	r3, r3, #8
 8006f76:	2b08      	cmp	r3, #8
 8006f78:	d122      	bne.n	8006fc0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	68db      	ldr	r3, [r3, #12]
 8006f80:	f003 0308 	and.w	r3, r3, #8
 8006f84:	2b08      	cmp	r3, #8
 8006f86:	d11b      	bne.n	8006fc0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	f06f 0208 	mvn.w	r2, #8
 8006f90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	2204      	movs	r2, #4
 8006f96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	69db      	ldr	r3, [r3, #28]
 8006f9e:	f003 0303 	and.w	r3, r3, #3
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d003      	beq.n	8006fae <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006fa6:	6878      	ldr	r0, [r7, #4]
 8006fa8:	f000 fb2a 	bl	8007600 <HAL_TIM_IC_CaptureCallback>
 8006fac:	e005      	b.n	8006fba <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006fae:	6878      	ldr	r0, [r7, #4]
 8006fb0:	f000 fb1c 	bl	80075ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006fb4:	6878      	ldr	r0, [r7, #4]
 8006fb6:	f000 fb2d 	bl	8007614 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	2200      	movs	r2, #0
 8006fbe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	691b      	ldr	r3, [r3, #16]
 8006fc6:	f003 0310 	and.w	r3, r3, #16
 8006fca:	2b10      	cmp	r3, #16
 8006fcc:	d122      	bne.n	8007014 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	68db      	ldr	r3, [r3, #12]
 8006fd4:	f003 0310 	and.w	r3, r3, #16
 8006fd8:	2b10      	cmp	r3, #16
 8006fda:	d11b      	bne.n	8007014 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	f06f 0210 	mvn.w	r2, #16
 8006fe4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	2208      	movs	r2, #8
 8006fea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	69db      	ldr	r3, [r3, #28]
 8006ff2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d003      	beq.n	8007002 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006ffa:	6878      	ldr	r0, [r7, #4]
 8006ffc:	f000 fb00 	bl	8007600 <HAL_TIM_IC_CaptureCallback>
 8007000:	e005      	b.n	800700e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007002:	6878      	ldr	r0, [r7, #4]
 8007004:	f000 faf2 	bl	80075ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007008:	6878      	ldr	r0, [r7, #4]
 800700a:	f000 fb03 	bl	8007614 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	2200      	movs	r2, #0
 8007012:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	691b      	ldr	r3, [r3, #16]
 800701a:	f003 0301 	and.w	r3, r3, #1
 800701e:	2b01      	cmp	r3, #1
 8007020:	d10e      	bne.n	8007040 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	68db      	ldr	r3, [r3, #12]
 8007028:	f003 0301 	and.w	r3, r3, #1
 800702c:	2b01      	cmp	r3, #1
 800702e:	d107      	bne.n	8007040 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	f06f 0201 	mvn.w	r2, #1
 8007038:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800703a:	6878      	ldr	r0, [r7, #4]
 800703c:	f000 facc 	bl	80075d8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	691b      	ldr	r3, [r3, #16]
 8007046:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800704a:	2b80      	cmp	r3, #128	; 0x80
 800704c:	d10e      	bne.n	800706c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	68db      	ldr	r3, [r3, #12]
 8007054:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007058:	2b80      	cmp	r3, #128	; 0x80
 800705a:	d107      	bne.n	800706c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007064:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007066:	6878      	ldr	r0, [r7, #4]
 8007068:	f001 fa8d 	bl	8008586 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	691b      	ldr	r3, [r3, #16]
 8007072:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007076:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800707a:	d10e      	bne.n	800709a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	68db      	ldr	r3, [r3, #12]
 8007082:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007086:	2b80      	cmp	r3, #128	; 0x80
 8007088:	d107      	bne.n	800709a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8007092:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007094:	6878      	ldr	r0, [r7, #4]
 8007096:	f001 fa80 	bl	800859a <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	691b      	ldr	r3, [r3, #16]
 80070a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070a4:	2b40      	cmp	r3, #64	; 0x40
 80070a6:	d10e      	bne.n	80070c6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	68db      	ldr	r3, [r3, #12]
 80070ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070b2:	2b40      	cmp	r3, #64	; 0x40
 80070b4:	d107      	bne.n	80070c6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80070be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80070c0:	6878      	ldr	r0, [r7, #4]
 80070c2:	f000 fab1 	bl	8007628 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	691b      	ldr	r3, [r3, #16]
 80070cc:	f003 0320 	and.w	r3, r3, #32
 80070d0:	2b20      	cmp	r3, #32
 80070d2:	d10e      	bne.n	80070f2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	68db      	ldr	r3, [r3, #12]
 80070da:	f003 0320 	and.w	r3, r3, #32
 80070de:	2b20      	cmp	r3, #32
 80070e0:	d107      	bne.n	80070f2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	f06f 0220 	mvn.w	r2, #32
 80070ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80070ec:	6878      	ldr	r0, [r7, #4]
 80070ee:	f001 fa40 	bl	8008572 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	691b      	ldr	r3, [r3, #16]
 80070f8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80070fc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007100:	d10f      	bne.n	8007122 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	68db      	ldr	r3, [r3, #12]
 8007108:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800710c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007110:	d107      	bne.n	8007122 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 800711a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800711c:	6878      	ldr	r0, [r7, #4]
 800711e:	f001 fa46 	bl	80085ae <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	691b      	ldr	r3, [r3, #16]
 8007128:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800712c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007130:	d10f      	bne.n	8007152 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	68db      	ldr	r3, [r3, #12]
 8007138:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800713c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007140:	d107      	bne.n	8007152 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 800714a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800714c:	6878      	ldr	r0, [r7, #4]
 800714e:	f001 fa38 	bl	80085c2 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	691b      	ldr	r3, [r3, #16]
 8007158:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800715c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007160:	d10f      	bne.n	8007182 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	68db      	ldr	r3, [r3, #12]
 8007168:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800716c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007170:	d107      	bne.n	8007182 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 800717a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800717c:	6878      	ldr	r0, [r7, #4]
 800717e:	f001 fa2a 	bl	80085d6 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	691b      	ldr	r3, [r3, #16]
 8007188:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800718c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007190:	d10f      	bne.n	80071b2 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	68db      	ldr	r3, [r3, #12]
 8007198:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800719c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80071a0:	d107      	bne.n	80071b2 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 80071aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 80071ac:	6878      	ldr	r0, [r7, #4]
 80071ae:	f001 fa1c 	bl	80085ea <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80071b2:	bf00      	nop
 80071b4:	3708      	adds	r7, #8
 80071b6:	46bd      	mov	sp, r7
 80071b8:	bd80      	pop	{r7, pc}
	...

080071bc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80071bc:	b580      	push	{r7, lr}
 80071be:	b086      	sub	sp, #24
 80071c0:	af00      	add	r7, sp, #0
 80071c2:	60f8      	str	r0, [r7, #12]
 80071c4:	60b9      	str	r1, [r7, #8]
 80071c6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80071c8:	2300      	movs	r3, #0
 80071ca:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80071d2:	2b01      	cmp	r3, #1
 80071d4:	d101      	bne.n	80071da <HAL_TIM_PWM_ConfigChannel+0x1e>
 80071d6:	2302      	movs	r3, #2
 80071d8:	e0ff      	b.n	80073da <HAL_TIM_PWM_ConfigChannel+0x21e>
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	2201      	movs	r2, #1
 80071de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	2b14      	cmp	r3, #20
 80071e6:	f200 80f0 	bhi.w	80073ca <HAL_TIM_PWM_ConfigChannel+0x20e>
 80071ea:	a201      	add	r2, pc, #4	; (adr r2, 80071f0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80071ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071f0:	08007245 	.word	0x08007245
 80071f4:	080073cb 	.word	0x080073cb
 80071f8:	080073cb 	.word	0x080073cb
 80071fc:	080073cb 	.word	0x080073cb
 8007200:	08007285 	.word	0x08007285
 8007204:	080073cb 	.word	0x080073cb
 8007208:	080073cb 	.word	0x080073cb
 800720c:	080073cb 	.word	0x080073cb
 8007210:	080072c7 	.word	0x080072c7
 8007214:	080073cb 	.word	0x080073cb
 8007218:	080073cb 	.word	0x080073cb
 800721c:	080073cb 	.word	0x080073cb
 8007220:	08007307 	.word	0x08007307
 8007224:	080073cb 	.word	0x080073cb
 8007228:	080073cb 	.word	0x080073cb
 800722c:	080073cb 	.word	0x080073cb
 8007230:	08007349 	.word	0x08007349
 8007234:	080073cb 	.word	0x080073cb
 8007238:	080073cb 	.word	0x080073cb
 800723c:	080073cb 	.word	0x080073cb
 8007240:	08007389 	.word	0x08007389
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	68b9      	ldr	r1, [r7, #8]
 800724a:	4618      	mov	r0, r3
 800724c:	f000 fa86 	bl	800775c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	699a      	ldr	r2, [r3, #24]
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	f042 0208 	orr.w	r2, r2, #8
 800725e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	699a      	ldr	r2, [r3, #24]
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	f022 0204 	bic.w	r2, r2, #4
 800726e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	6999      	ldr	r1, [r3, #24]
 8007276:	68bb      	ldr	r3, [r7, #8]
 8007278:	691a      	ldr	r2, [r3, #16]
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	430a      	orrs	r2, r1
 8007280:	619a      	str	r2, [r3, #24]
      break;
 8007282:	e0a5      	b.n	80073d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	68b9      	ldr	r1, [r7, #8]
 800728a:	4618      	mov	r0, r3
 800728c:	f000 faf6 	bl	800787c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	699a      	ldr	r2, [r3, #24]
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800729e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	699a      	ldr	r2, [r3, #24]
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80072ae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	6999      	ldr	r1, [r3, #24]
 80072b6:	68bb      	ldr	r3, [r7, #8]
 80072b8:	691b      	ldr	r3, [r3, #16]
 80072ba:	021a      	lsls	r2, r3, #8
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	430a      	orrs	r2, r1
 80072c2:	619a      	str	r2, [r3, #24]
      break;
 80072c4:	e084      	b.n	80073d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	68b9      	ldr	r1, [r7, #8]
 80072cc:	4618      	mov	r0, r3
 80072ce:	f000 fb5f 	bl	8007990 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	69da      	ldr	r2, [r3, #28]
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	f042 0208 	orr.w	r2, r2, #8
 80072e0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	69da      	ldr	r2, [r3, #28]
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	f022 0204 	bic.w	r2, r2, #4
 80072f0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	69d9      	ldr	r1, [r3, #28]
 80072f8:	68bb      	ldr	r3, [r7, #8]
 80072fa:	691a      	ldr	r2, [r3, #16]
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	430a      	orrs	r2, r1
 8007302:	61da      	str	r2, [r3, #28]
      break;
 8007304:	e064      	b.n	80073d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	68b9      	ldr	r1, [r7, #8]
 800730c:	4618      	mov	r0, r3
 800730e:	f000 fbc7 	bl	8007aa0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	69da      	ldr	r2, [r3, #28]
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007320:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	69da      	ldr	r2, [r3, #28]
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007330:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	69d9      	ldr	r1, [r3, #28]
 8007338:	68bb      	ldr	r3, [r7, #8]
 800733a:	691b      	ldr	r3, [r3, #16]
 800733c:	021a      	lsls	r2, r3, #8
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	430a      	orrs	r2, r1
 8007344:	61da      	str	r2, [r3, #28]
      break;
 8007346:	e043      	b.n	80073d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	68b9      	ldr	r1, [r7, #8]
 800734e:	4618      	mov	r0, r3
 8007350:	f000 fc30 	bl	8007bb4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	f042 0208 	orr.w	r2, r2, #8
 8007362:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	f022 0204 	bic.w	r2, r2, #4
 8007372:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800737a:	68bb      	ldr	r3, [r7, #8]
 800737c:	691a      	ldr	r2, [r3, #16]
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	430a      	orrs	r2, r1
 8007384:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8007386:	e023      	b.n	80073d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	68b9      	ldr	r1, [r7, #8]
 800738e:	4618      	mov	r0, r3
 8007390:	f000 fc74 	bl	8007c7c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80073a2:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80073b2:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80073ba:	68bb      	ldr	r3, [r7, #8]
 80073bc:	691b      	ldr	r3, [r3, #16]
 80073be:	021a      	lsls	r2, r3, #8
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	430a      	orrs	r2, r1
 80073c6:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 80073c8:	e002      	b.n	80073d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80073ca:	2301      	movs	r3, #1
 80073cc:	75fb      	strb	r3, [r7, #23]
      break;
 80073ce:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	2200      	movs	r2, #0
 80073d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80073d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80073da:	4618      	mov	r0, r3
 80073dc:	3718      	adds	r7, #24
 80073de:	46bd      	mov	sp, r7
 80073e0:	bd80      	pop	{r7, pc}
 80073e2:	bf00      	nop

080073e4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80073e4:	b580      	push	{r7, lr}
 80073e6:	b084      	sub	sp, #16
 80073e8:	af00      	add	r7, sp, #0
 80073ea:	6078      	str	r0, [r7, #4]
 80073ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80073ee:	2300      	movs	r3, #0
 80073f0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80073f8:	2b01      	cmp	r3, #1
 80073fa:	d101      	bne.n	8007400 <HAL_TIM_ConfigClockSource+0x1c>
 80073fc:	2302      	movs	r3, #2
 80073fe:	e0de      	b.n	80075be <HAL_TIM_ConfigClockSource+0x1da>
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	2201      	movs	r2, #1
 8007404:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	2202      	movs	r2, #2
 800740c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	689b      	ldr	r3, [r3, #8]
 8007416:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007418:	68bb      	ldr	r3, [r7, #8]
 800741a:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 800741e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007422:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007424:	68bb      	ldr	r3, [r7, #8]
 8007426:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800742a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	68ba      	ldr	r2, [r7, #8]
 8007432:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007434:	683b      	ldr	r3, [r7, #0]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	4a63      	ldr	r2, [pc, #396]	; (80075c8 <HAL_TIM_ConfigClockSource+0x1e4>)
 800743a:	4293      	cmp	r3, r2
 800743c:	f000 80a9 	beq.w	8007592 <HAL_TIM_ConfigClockSource+0x1ae>
 8007440:	4a61      	ldr	r2, [pc, #388]	; (80075c8 <HAL_TIM_ConfigClockSource+0x1e4>)
 8007442:	4293      	cmp	r3, r2
 8007444:	f200 80ae 	bhi.w	80075a4 <HAL_TIM_ConfigClockSource+0x1c0>
 8007448:	4a60      	ldr	r2, [pc, #384]	; (80075cc <HAL_TIM_ConfigClockSource+0x1e8>)
 800744a:	4293      	cmp	r3, r2
 800744c:	f000 80a1 	beq.w	8007592 <HAL_TIM_ConfigClockSource+0x1ae>
 8007450:	4a5e      	ldr	r2, [pc, #376]	; (80075cc <HAL_TIM_ConfigClockSource+0x1e8>)
 8007452:	4293      	cmp	r3, r2
 8007454:	f200 80a6 	bhi.w	80075a4 <HAL_TIM_ConfigClockSource+0x1c0>
 8007458:	4a5d      	ldr	r2, [pc, #372]	; (80075d0 <HAL_TIM_ConfigClockSource+0x1ec>)
 800745a:	4293      	cmp	r3, r2
 800745c:	f000 8099 	beq.w	8007592 <HAL_TIM_ConfigClockSource+0x1ae>
 8007460:	4a5b      	ldr	r2, [pc, #364]	; (80075d0 <HAL_TIM_ConfigClockSource+0x1ec>)
 8007462:	4293      	cmp	r3, r2
 8007464:	f200 809e 	bhi.w	80075a4 <HAL_TIM_ConfigClockSource+0x1c0>
 8007468:	4a5a      	ldr	r2, [pc, #360]	; (80075d4 <HAL_TIM_ConfigClockSource+0x1f0>)
 800746a:	4293      	cmp	r3, r2
 800746c:	f000 8091 	beq.w	8007592 <HAL_TIM_ConfigClockSource+0x1ae>
 8007470:	4a58      	ldr	r2, [pc, #352]	; (80075d4 <HAL_TIM_ConfigClockSource+0x1f0>)
 8007472:	4293      	cmp	r3, r2
 8007474:	f200 8096 	bhi.w	80075a4 <HAL_TIM_ConfigClockSource+0x1c0>
 8007478:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800747c:	f000 8089 	beq.w	8007592 <HAL_TIM_ConfigClockSource+0x1ae>
 8007480:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8007484:	f200 808e 	bhi.w	80075a4 <HAL_TIM_ConfigClockSource+0x1c0>
 8007488:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800748c:	d03e      	beq.n	800750c <HAL_TIM_ConfigClockSource+0x128>
 800748e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007492:	f200 8087 	bhi.w	80075a4 <HAL_TIM_ConfigClockSource+0x1c0>
 8007496:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800749a:	f000 8086 	beq.w	80075aa <HAL_TIM_ConfigClockSource+0x1c6>
 800749e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80074a2:	d87f      	bhi.n	80075a4 <HAL_TIM_ConfigClockSource+0x1c0>
 80074a4:	2b70      	cmp	r3, #112	; 0x70
 80074a6:	d01a      	beq.n	80074de <HAL_TIM_ConfigClockSource+0xfa>
 80074a8:	2b70      	cmp	r3, #112	; 0x70
 80074aa:	d87b      	bhi.n	80075a4 <HAL_TIM_ConfigClockSource+0x1c0>
 80074ac:	2b60      	cmp	r3, #96	; 0x60
 80074ae:	d050      	beq.n	8007552 <HAL_TIM_ConfigClockSource+0x16e>
 80074b0:	2b60      	cmp	r3, #96	; 0x60
 80074b2:	d877      	bhi.n	80075a4 <HAL_TIM_ConfigClockSource+0x1c0>
 80074b4:	2b50      	cmp	r3, #80	; 0x50
 80074b6:	d03c      	beq.n	8007532 <HAL_TIM_ConfigClockSource+0x14e>
 80074b8:	2b50      	cmp	r3, #80	; 0x50
 80074ba:	d873      	bhi.n	80075a4 <HAL_TIM_ConfigClockSource+0x1c0>
 80074bc:	2b40      	cmp	r3, #64	; 0x40
 80074be:	d058      	beq.n	8007572 <HAL_TIM_ConfigClockSource+0x18e>
 80074c0:	2b40      	cmp	r3, #64	; 0x40
 80074c2:	d86f      	bhi.n	80075a4 <HAL_TIM_ConfigClockSource+0x1c0>
 80074c4:	2b30      	cmp	r3, #48	; 0x30
 80074c6:	d064      	beq.n	8007592 <HAL_TIM_ConfigClockSource+0x1ae>
 80074c8:	2b30      	cmp	r3, #48	; 0x30
 80074ca:	d86b      	bhi.n	80075a4 <HAL_TIM_ConfigClockSource+0x1c0>
 80074cc:	2b20      	cmp	r3, #32
 80074ce:	d060      	beq.n	8007592 <HAL_TIM_ConfigClockSource+0x1ae>
 80074d0:	2b20      	cmp	r3, #32
 80074d2:	d867      	bhi.n	80075a4 <HAL_TIM_ConfigClockSource+0x1c0>
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d05c      	beq.n	8007592 <HAL_TIM_ConfigClockSource+0x1ae>
 80074d8:	2b10      	cmp	r3, #16
 80074da:	d05a      	beq.n	8007592 <HAL_TIM_ConfigClockSource+0x1ae>
 80074dc:	e062      	b.n	80075a4 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	6818      	ldr	r0, [r3, #0]
 80074e2:	683b      	ldr	r3, [r7, #0]
 80074e4:	6899      	ldr	r1, [r3, #8]
 80074e6:	683b      	ldr	r3, [r7, #0]
 80074e8:	685a      	ldr	r2, [r3, #4]
 80074ea:	683b      	ldr	r3, [r7, #0]
 80074ec:	68db      	ldr	r3, [r3, #12]
 80074ee:	f000 fd0f 	bl	8007f10 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	689b      	ldr	r3, [r3, #8]
 80074f8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80074fa:	68bb      	ldr	r3, [r7, #8]
 80074fc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007500:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	68ba      	ldr	r2, [r7, #8]
 8007508:	609a      	str	r2, [r3, #8]
      break;
 800750a:	e04f      	b.n	80075ac <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	6818      	ldr	r0, [r3, #0]
 8007510:	683b      	ldr	r3, [r7, #0]
 8007512:	6899      	ldr	r1, [r3, #8]
 8007514:	683b      	ldr	r3, [r7, #0]
 8007516:	685a      	ldr	r2, [r3, #4]
 8007518:	683b      	ldr	r3, [r7, #0]
 800751a:	68db      	ldr	r3, [r3, #12]
 800751c:	f000 fcf8 	bl	8007f10 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	689a      	ldr	r2, [r3, #8]
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800752e:	609a      	str	r2, [r3, #8]
      break;
 8007530:	e03c      	b.n	80075ac <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	6818      	ldr	r0, [r3, #0]
 8007536:	683b      	ldr	r3, [r7, #0]
 8007538:	6859      	ldr	r1, [r3, #4]
 800753a:	683b      	ldr	r3, [r7, #0]
 800753c:	68db      	ldr	r3, [r3, #12]
 800753e:	461a      	mov	r2, r3
 8007540:	f000 fc6a 	bl	8007e18 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	2150      	movs	r1, #80	; 0x50
 800754a:	4618      	mov	r0, r3
 800754c:	f000 fcc3 	bl	8007ed6 <TIM_ITRx_SetConfig>
      break;
 8007550:	e02c      	b.n	80075ac <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	6818      	ldr	r0, [r3, #0]
 8007556:	683b      	ldr	r3, [r7, #0]
 8007558:	6859      	ldr	r1, [r3, #4]
 800755a:	683b      	ldr	r3, [r7, #0]
 800755c:	68db      	ldr	r3, [r3, #12]
 800755e:	461a      	mov	r2, r3
 8007560:	f000 fc89 	bl	8007e76 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	2160      	movs	r1, #96	; 0x60
 800756a:	4618      	mov	r0, r3
 800756c:	f000 fcb3 	bl	8007ed6 <TIM_ITRx_SetConfig>
      break;
 8007570:	e01c      	b.n	80075ac <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	6818      	ldr	r0, [r3, #0]
 8007576:	683b      	ldr	r3, [r7, #0]
 8007578:	6859      	ldr	r1, [r3, #4]
 800757a:	683b      	ldr	r3, [r7, #0]
 800757c:	68db      	ldr	r3, [r3, #12]
 800757e:	461a      	mov	r2, r3
 8007580:	f000 fc4a 	bl	8007e18 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	2140      	movs	r1, #64	; 0x40
 800758a:	4618      	mov	r0, r3
 800758c:	f000 fca3 	bl	8007ed6 <TIM_ITRx_SetConfig>
      break;
 8007590:	e00c      	b.n	80075ac <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	681a      	ldr	r2, [r3, #0]
 8007596:	683b      	ldr	r3, [r7, #0]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	4619      	mov	r1, r3
 800759c:	4610      	mov	r0, r2
 800759e:	f000 fc9a 	bl	8007ed6 <TIM_ITRx_SetConfig>
      break;
 80075a2:	e003      	b.n	80075ac <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 80075a4:	2301      	movs	r3, #1
 80075a6:	73fb      	strb	r3, [r7, #15]
      break;
 80075a8:	e000      	b.n	80075ac <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 80075aa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	2201      	movs	r2, #1
 80075b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	2200      	movs	r2, #0
 80075b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80075bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80075be:	4618      	mov	r0, r3
 80075c0:	3710      	adds	r7, #16
 80075c2:	46bd      	mov	sp, r7
 80075c4:	bd80      	pop	{r7, pc}
 80075c6:	bf00      	nop
 80075c8:	00100070 	.word	0x00100070
 80075cc:	00100040 	.word	0x00100040
 80075d0:	00100030 	.word	0x00100030
 80075d4:	00100020 	.word	0x00100020

080075d8 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80075d8:	b480      	push	{r7}
 80075da:	b083      	sub	sp, #12
 80075dc:	af00      	add	r7, sp, #0
 80075de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80075e0:	bf00      	nop
 80075e2:	370c      	adds	r7, #12
 80075e4:	46bd      	mov	sp, r7
 80075e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ea:	4770      	bx	lr

080075ec <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80075ec:	b480      	push	{r7}
 80075ee:	b083      	sub	sp, #12
 80075f0:	af00      	add	r7, sp, #0
 80075f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80075f4:	bf00      	nop
 80075f6:	370c      	adds	r7, #12
 80075f8:	46bd      	mov	sp, r7
 80075fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075fe:	4770      	bx	lr

08007600 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007600:	b480      	push	{r7}
 8007602:	b083      	sub	sp, #12
 8007604:	af00      	add	r7, sp, #0
 8007606:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007608:	bf00      	nop
 800760a:	370c      	adds	r7, #12
 800760c:	46bd      	mov	sp, r7
 800760e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007612:	4770      	bx	lr

08007614 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007614:	b480      	push	{r7}
 8007616:	b083      	sub	sp, #12
 8007618:	af00      	add	r7, sp, #0
 800761a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800761c:	bf00      	nop
 800761e:	370c      	adds	r7, #12
 8007620:	46bd      	mov	sp, r7
 8007622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007626:	4770      	bx	lr

08007628 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007628:	b480      	push	{r7}
 800762a:	b083      	sub	sp, #12
 800762c:	af00      	add	r7, sp, #0
 800762e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007630:	bf00      	nop
 8007632:	370c      	adds	r7, #12
 8007634:	46bd      	mov	sp, r7
 8007636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800763a:	4770      	bx	lr

0800763c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800763c:	b480      	push	{r7}
 800763e:	b085      	sub	sp, #20
 8007640:	af00      	add	r7, sp, #0
 8007642:	6078      	str	r0, [r7, #4]
 8007644:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	4a3c      	ldr	r2, [pc, #240]	; (8007740 <TIM_Base_SetConfig+0x104>)
 8007650:	4293      	cmp	r3, r2
 8007652:	d00f      	beq.n	8007674 <TIM_Base_SetConfig+0x38>
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800765a:	d00b      	beq.n	8007674 <TIM_Base_SetConfig+0x38>
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	4a39      	ldr	r2, [pc, #228]	; (8007744 <TIM_Base_SetConfig+0x108>)
 8007660:	4293      	cmp	r3, r2
 8007662:	d007      	beq.n	8007674 <TIM_Base_SetConfig+0x38>
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	4a38      	ldr	r2, [pc, #224]	; (8007748 <TIM_Base_SetConfig+0x10c>)
 8007668:	4293      	cmp	r3, r2
 800766a:	d003      	beq.n	8007674 <TIM_Base_SetConfig+0x38>
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	4a37      	ldr	r2, [pc, #220]	; (800774c <TIM_Base_SetConfig+0x110>)
 8007670:	4293      	cmp	r3, r2
 8007672:	d108      	bne.n	8007686 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800767a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800767c:	683b      	ldr	r3, [r7, #0]
 800767e:	685b      	ldr	r3, [r3, #4]
 8007680:	68fa      	ldr	r2, [r7, #12]
 8007682:	4313      	orrs	r3, r2
 8007684:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	4a2d      	ldr	r2, [pc, #180]	; (8007740 <TIM_Base_SetConfig+0x104>)
 800768a:	4293      	cmp	r3, r2
 800768c:	d01b      	beq.n	80076c6 <TIM_Base_SetConfig+0x8a>
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007694:	d017      	beq.n	80076c6 <TIM_Base_SetConfig+0x8a>
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	4a2a      	ldr	r2, [pc, #168]	; (8007744 <TIM_Base_SetConfig+0x108>)
 800769a:	4293      	cmp	r3, r2
 800769c:	d013      	beq.n	80076c6 <TIM_Base_SetConfig+0x8a>
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	4a29      	ldr	r2, [pc, #164]	; (8007748 <TIM_Base_SetConfig+0x10c>)
 80076a2:	4293      	cmp	r3, r2
 80076a4:	d00f      	beq.n	80076c6 <TIM_Base_SetConfig+0x8a>
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	4a28      	ldr	r2, [pc, #160]	; (800774c <TIM_Base_SetConfig+0x110>)
 80076aa:	4293      	cmp	r3, r2
 80076ac:	d00b      	beq.n	80076c6 <TIM_Base_SetConfig+0x8a>
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	4a27      	ldr	r2, [pc, #156]	; (8007750 <TIM_Base_SetConfig+0x114>)
 80076b2:	4293      	cmp	r3, r2
 80076b4:	d007      	beq.n	80076c6 <TIM_Base_SetConfig+0x8a>
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	4a26      	ldr	r2, [pc, #152]	; (8007754 <TIM_Base_SetConfig+0x118>)
 80076ba:	4293      	cmp	r3, r2
 80076bc:	d003      	beq.n	80076c6 <TIM_Base_SetConfig+0x8a>
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	4a25      	ldr	r2, [pc, #148]	; (8007758 <TIM_Base_SetConfig+0x11c>)
 80076c2:	4293      	cmp	r3, r2
 80076c4:	d108      	bne.n	80076d8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80076cc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80076ce:	683b      	ldr	r3, [r7, #0]
 80076d0:	68db      	ldr	r3, [r3, #12]
 80076d2:	68fa      	ldr	r2, [r7, #12]
 80076d4:	4313      	orrs	r3, r2
 80076d6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80076de:	683b      	ldr	r3, [r7, #0]
 80076e0:	695b      	ldr	r3, [r3, #20]
 80076e2:	4313      	orrs	r3, r2
 80076e4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	68fa      	ldr	r2, [r7, #12]
 80076ea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80076ec:	683b      	ldr	r3, [r7, #0]
 80076ee:	689a      	ldr	r2, [r3, #8]
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80076f4:	683b      	ldr	r3, [r7, #0]
 80076f6:	681a      	ldr	r2, [r3, #0]
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	4a10      	ldr	r2, [pc, #64]	; (8007740 <TIM_Base_SetConfig+0x104>)
 8007700:	4293      	cmp	r3, r2
 8007702:	d00f      	beq.n	8007724 <TIM_Base_SetConfig+0xe8>
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	4a11      	ldr	r2, [pc, #68]	; (800774c <TIM_Base_SetConfig+0x110>)
 8007708:	4293      	cmp	r3, r2
 800770a:	d00b      	beq.n	8007724 <TIM_Base_SetConfig+0xe8>
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	4a10      	ldr	r2, [pc, #64]	; (8007750 <TIM_Base_SetConfig+0x114>)
 8007710:	4293      	cmp	r3, r2
 8007712:	d007      	beq.n	8007724 <TIM_Base_SetConfig+0xe8>
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	4a0f      	ldr	r2, [pc, #60]	; (8007754 <TIM_Base_SetConfig+0x118>)
 8007718:	4293      	cmp	r3, r2
 800771a:	d003      	beq.n	8007724 <TIM_Base_SetConfig+0xe8>
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	4a0e      	ldr	r2, [pc, #56]	; (8007758 <TIM_Base_SetConfig+0x11c>)
 8007720:	4293      	cmp	r3, r2
 8007722:	d103      	bne.n	800772c <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007724:	683b      	ldr	r3, [r7, #0]
 8007726:	691a      	ldr	r2, [r3, #16]
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	2201      	movs	r2, #1
 8007730:	615a      	str	r2, [r3, #20]
}
 8007732:	bf00      	nop
 8007734:	3714      	adds	r7, #20
 8007736:	46bd      	mov	sp, r7
 8007738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800773c:	4770      	bx	lr
 800773e:	bf00      	nop
 8007740:	40012c00 	.word	0x40012c00
 8007744:	40000400 	.word	0x40000400
 8007748:	40000800 	.word	0x40000800
 800774c:	40013400 	.word	0x40013400
 8007750:	40014000 	.word	0x40014000
 8007754:	40014400 	.word	0x40014400
 8007758:	40014800 	.word	0x40014800

0800775c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800775c:	b480      	push	{r7}
 800775e:	b087      	sub	sp, #28
 8007760:	af00      	add	r7, sp, #0
 8007762:	6078      	str	r0, [r7, #4]
 8007764:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	6a1b      	ldr	r3, [r3, #32]
 800776a:	f023 0201 	bic.w	r2, r3, #1
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	6a1b      	ldr	r3, [r3, #32]
 8007776:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	685b      	ldr	r3, [r3, #4]
 800777c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	699b      	ldr	r3, [r3, #24]
 8007782:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800778a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800778e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	f023 0303 	bic.w	r3, r3, #3
 8007796:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007798:	683b      	ldr	r3, [r7, #0]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	68fa      	ldr	r2, [r7, #12]
 800779e:	4313      	orrs	r3, r2
 80077a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80077a2:	697b      	ldr	r3, [r7, #20]
 80077a4:	f023 0302 	bic.w	r3, r3, #2
 80077a8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80077aa:	683b      	ldr	r3, [r7, #0]
 80077ac:	689b      	ldr	r3, [r3, #8]
 80077ae:	697a      	ldr	r2, [r7, #20]
 80077b0:	4313      	orrs	r3, r2
 80077b2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	4a2c      	ldr	r2, [pc, #176]	; (8007868 <TIM_OC1_SetConfig+0x10c>)
 80077b8:	4293      	cmp	r3, r2
 80077ba:	d00f      	beq.n	80077dc <TIM_OC1_SetConfig+0x80>
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	4a2b      	ldr	r2, [pc, #172]	; (800786c <TIM_OC1_SetConfig+0x110>)
 80077c0:	4293      	cmp	r3, r2
 80077c2:	d00b      	beq.n	80077dc <TIM_OC1_SetConfig+0x80>
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	4a2a      	ldr	r2, [pc, #168]	; (8007870 <TIM_OC1_SetConfig+0x114>)
 80077c8:	4293      	cmp	r3, r2
 80077ca:	d007      	beq.n	80077dc <TIM_OC1_SetConfig+0x80>
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	4a29      	ldr	r2, [pc, #164]	; (8007874 <TIM_OC1_SetConfig+0x118>)
 80077d0:	4293      	cmp	r3, r2
 80077d2:	d003      	beq.n	80077dc <TIM_OC1_SetConfig+0x80>
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	4a28      	ldr	r2, [pc, #160]	; (8007878 <TIM_OC1_SetConfig+0x11c>)
 80077d8:	4293      	cmp	r3, r2
 80077da:	d10c      	bne.n	80077f6 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80077dc:	697b      	ldr	r3, [r7, #20]
 80077de:	f023 0308 	bic.w	r3, r3, #8
 80077e2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80077e4:	683b      	ldr	r3, [r7, #0]
 80077e6:	68db      	ldr	r3, [r3, #12]
 80077e8:	697a      	ldr	r2, [r7, #20]
 80077ea:	4313      	orrs	r3, r2
 80077ec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80077ee:	697b      	ldr	r3, [r7, #20]
 80077f0:	f023 0304 	bic.w	r3, r3, #4
 80077f4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	4a1b      	ldr	r2, [pc, #108]	; (8007868 <TIM_OC1_SetConfig+0x10c>)
 80077fa:	4293      	cmp	r3, r2
 80077fc:	d00f      	beq.n	800781e <TIM_OC1_SetConfig+0xc2>
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	4a1a      	ldr	r2, [pc, #104]	; (800786c <TIM_OC1_SetConfig+0x110>)
 8007802:	4293      	cmp	r3, r2
 8007804:	d00b      	beq.n	800781e <TIM_OC1_SetConfig+0xc2>
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	4a19      	ldr	r2, [pc, #100]	; (8007870 <TIM_OC1_SetConfig+0x114>)
 800780a:	4293      	cmp	r3, r2
 800780c:	d007      	beq.n	800781e <TIM_OC1_SetConfig+0xc2>
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	4a18      	ldr	r2, [pc, #96]	; (8007874 <TIM_OC1_SetConfig+0x118>)
 8007812:	4293      	cmp	r3, r2
 8007814:	d003      	beq.n	800781e <TIM_OC1_SetConfig+0xc2>
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	4a17      	ldr	r2, [pc, #92]	; (8007878 <TIM_OC1_SetConfig+0x11c>)
 800781a:	4293      	cmp	r3, r2
 800781c:	d111      	bne.n	8007842 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800781e:	693b      	ldr	r3, [r7, #16]
 8007820:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007824:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007826:	693b      	ldr	r3, [r7, #16]
 8007828:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800782c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800782e:	683b      	ldr	r3, [r7, #0]
 8007830:	695b      	ldr	r3, [r3, #20]
 8007832:	693a      	ldr	r2, [r7, #16]
 8007834:	4313      	orrs	r3, r2
 8007836:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007838:	683b      	ldr	r3, [r7, #0]
 800783a:	699b      	ldr	r3, [r3, #24]
 800783c:	693a      	ldr	r2, [r7, #16]
 800783e:	4313      	orrs	r3, r2
 8007840:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	693a      	ldr	r2, [r7, #16]
 8007846:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	68fa      	ldr	r2, [r7, #12]
 800784c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800784e:	683b      	ldr	r3, [r7, #0]
 8007850:	685a      	ldr	r2, [r3, #4]
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	697a      	ldr	r2, [r7, #20]
 800785a:	621a      	str	r2, [r3, #32]
}
 800785c:	bf00      	nop
 800785e:	371c      	adds	r7, #28
 8007860:	46bd      	mov	sp, r7
 8007862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007866:	4770      	bx	lr
 8007868:	40012c00 	.word	0x40012c00
 800786c:	40013400 	.word	0x40013400
 8007870:	40014000 	.word	0x40014000
 8007874:	40014400 	.word	0x40014400
 8007878:	40014800 	.word	0x40014800

0800787c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800787c:	b480      	push	{r7}
 800787e:	b087      	sub	sp, #28
 8007880:	af00      	add	r7, sp, #0
 8007882:	6078      	str	r0, [r7, #4]
 8007884:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	6a1b      	ldr	r3, [r3, #32]
 800788a:	f023 0210 	bic.w	r2, r3, #16
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	6a1b      	ldr	r3, [r3, #32]
 8007896:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	685b      	ldr	r3, [r3, #4]
 800789c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	699b      	ldr	r3, [r3, #24]
 80078a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80078aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80078ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80078b6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80078b8:	683b      	ldr	r3, [r7, #0]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	021b      	lsls	r3, r3, #8
 80078be:	68fa      	ldr	r2, [r7, #12]
 80078c0:	4313      	orrs	r3, r2
 80078c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80078c4:	697b      	ldr	r3, [r7, #20]
 80078c6:	f023 0320 	bic.w	r3, r3, #32
 80078ca:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80078cc:	683b      	ldr	r3, [r7, #0]
 80078ce:	689b      	ldr	r3, [r3, #8]
 80078d0:	011b      	lsls	r3, r3, #4
 80078d2:	697a      	ldr	r2, [r7, #20]
 80078d4:	4313      	orrs	r3, r2
 80078d6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	4a28      	ldr	r2, [pc, #160]	; (800797c <TIM_OC2_SetConfig+0x100>)
 80078dc:	4293      	cmp	r3, r2
 80078de:	d003      	beq.n	80078e8 <TIM_OC2_SetConfig+0x6c>
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	4a27      	ldr	r2, [pc, #156]	; (8007980 <TIM_OC2_SetConfig+0x104>)
 80078e4:	4293      	cmp	r3, r2
 80078e6:	d10d      	bne.n	8007904 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80078e8:	697b      	ldr	r3, [r7, #20]
 80078ea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80078ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80078f0:	683b      	ldr	r3, [r7, #0]
 80078f2:	68db      	ldr	r3, [r3, #12]
 80078f4:	011b      	lsls	r3, r3, #4
 80078f6:	697a      	ldr	r2, [r7, #20]
 80078f8:	4313      	orrs	r3, r2
 80078fa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80078fc:	697b      	ldr	r3, [r7, #20]
 80078fe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007902:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	4a1d      	ldr	r2, [pc, #116]	; (800797c <TIM_OC2_SetConfig+0x100>)
 8007908:	4293      	cmp	r3, r2
 800790a:	d00f      	beq.n	800792c <TIM_OC2_SetConfig+0xb0>
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	4a1c      	ldr	r2, [pc, #112]	; (8007980 <TIM_OC2_SetConfig+0x104>)
 8007910:	4293      	cmp	r3, r2
 8007912:	d00b      	beq.n	800792c <TIM_OC2_SetConfig+0xb0>
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	4a1b      	ldr	r2, [pc, #108]	; (8007984 <TIM_OC2_SetConfig+0x108>)
 8007918:	4293      	cmp	r3, r2
 800791a:	d007      	beq.n	800792c <TIM_OC2_SetConfig+0xb0>
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	4a1a      	ldr	r2, [pc, #104]	; (8007988 <TIM_OC2_SetConfig+0x10c>)
 8007920:	4293      	cmp	r3, r2
 8007922:	d003      	beq.n	800792c <TIM_OC2_SetConfig+0xb0>
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	4a19      	ldr	r2, [pc, #100]	; (800798c <TIM_OC2_SetConfig+0x110>)
 8007928:	4293      	cmp	r3, r2
 800792a:	d113      	bne.n	8007954 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800792c:	693b      	ldr	r3, [r7, #16]
 800792e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007932:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007934:	693b      	ldr	r3, [r7, #16]
 8007936:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800793a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800793c:	683b      	ldr	r3, [r7, #0]
 800793e:	695b      	ldr	r3, [r3, #20]
 8007940:	009b      	lsls	r3, r3, #2
 8007942:	693a      	ldr	r2, [r7, #16]
 8007944:	4313      	orrs	r3, r2
 8007946:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007948:	683b      	ldr	r3, [r7, #0]
 800794a:	699b      	ldr	r3, [r3, #24]
 800794c:	009b      	lsls	r3, r3, #2
 800794e:	693a      	ldr	r2, [r7, #16]
 8007950:	4313      	orrs	r3, r2
 8007952:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	693a      	ldr	r2, [r7, #16]
 8007958:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	68fa      	ldr	r2, [r7, #12]
 800795e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007960:	683b      	ldr	r3, [r7, #0]
 8007962:	685a      	ldr	r2, [r3, #4]
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	697a      	ldr	r2, [r7, #20]
 800796c:	621a      	str	r2, [r3, #32]
}
 800796e:	bf00      	nop
 8007970:	371c      	adds	r7, #28
 8007972:	46bd      	mov	sp, r7
 8007974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007978:	4770      	bx	lr
 800797a:	bf00      	nop
 800797c:	40012c00 	.word	0x40012c00
 8007980:	40013400 	.word	0x40013400
 8007984:	40014000 	.word	0x40014000
 8007988:	40014400 	.word	0x40014400
 800798c:	40014800 	.word	0x40014800

08007990 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007990:	b480      	push	{r7}
 8007992:	b087      	sub	sp, #28
 8007994:	af00      	add	r7, sp, #0
 8007996:	6078      	str	r0, [r7, #4]
 8007998:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	6a1b      	ldr	r3, [r3, #32]
 800799e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	6a1b      	ldr	r3, [r3, #32]
 80079aa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	685b      	ldr	r3, [r3, #4]
 80079b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	69db      	ldr	r3, [r3, #28]
 80079b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80079be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80079c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	f023 0303 	bic.w	r3, r3, #3
 80079ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80079cc:	683b      	ldr	r3, [r7, #0]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	68fa      	ldr	r2, [r7, #12]
 80079d2:	4313      	orrs	r3, r2
 80079d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80079d6:	697b      	ldr	r3, [r7, #20]
 80079d8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80079dc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80079de:	683b      	ldr	r3, [r7, #0]
 80079e0:	689b      	ldr	r3, [r3, #8]
 80079e2:	021b      	lsls	r3, r3, #8
 80079e4:	697a      	ldr	r2, [r7, #20]
 80079e6:	4313      	orrs	r3, r2
 80079e8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	4a27      	ldr	r2, [pc, #156]	; (8007a8c <TIM_OC3_SetConfig+0xfc>)
 80079ee:	4293      	cmp	r3, r2
 80079f0:	d003      	beq.n	80079fa <TIM_OC3_SetConfig+0x6a>
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	4a26      	ldr	r2, [pc, #152]	; (8007a90 <TIM_OC3_SetConfig+0x100>)
 80079f6:	4293      	cmp	r3, r2
 80079f8:	d10d      	bne.n	8007a16 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80079fa:	697b      	ldr	r3, [r7, #20]
 80079fc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007a00:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007a02:	683b      	ldr	r3, [r7, #0]
 8007a04:	68db      	ldr	r3, [r3, #12]
 8007a06:	021b      	lsls	r3, r3, #8
 8007a08:	697a      	ldr	r2, [r7, #20]
 8007a0a:	4313      	orrs	r3, r2
 8007a0c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007a0e:	697b      	ldr	r3, [r7, #20]
 8007a10:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007a14:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	4a1c      	ldr	r2, [pc, #112]	; (8007a8c <TIM_OC3_SetConfig+0xfc>)
 8007a1a:	4293      	cmp	r3, r2
 8007a1c:	d00f      	beq.n	8007a3e <TIM_OC3_SetConfig+0xae>
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	4a1b      	ldr	r2, [pc, #108]	; (8007a90 <TIM_OC3_SetConfig+0x100>)
 8007a22:	4293      	cmp	r3, r2
 8007a24:	d00b      	beq.n	8007a3e <TIM_OC3_SetConfig+0xae>
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	4a1a      	ldr	r2, [pc, #104]	; (8007a94 <TIM_OC3_SetConfig+0x104>)
 8007a2a:	4293      	cmp	r3, r2
 8007a2c:	d007      	beq.n	8007a3e <TIM_OC3_SetConfig+0xae>
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	4a19      	ldr	r2, [pc, #100]	; (8007a98 <TIM_OC3_SetConfig+0x108>)
 8007a32:	4293      	cmp	r3, r2
 8007a34:	d003      	beq.n	8007a3e <TIM_OC3_SetConfig+0xae>
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	4a18      	ldr	r2, [pc, #96]	; (8007a9c <TIM_OC3_SetConfig+0x10c>)
 8007a3a:	4293      	cmp	r3, r2
 8007a3c:	d113      	bne.n	8007a66 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007a3e:	693b      	ldr	r3, [r7, #16]
 8007a40:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007a44:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007a46:	693b      	ldr	r3, [r7, #16]
 8007a48:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007a4c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007a4e:	683b      	ldr	r3, [r7, #0]
 8007a50:	695b      	ldr	r3, [r3, #20]
 8007a52:	011b      	lsls	r3, r3, #4
 8007a54:	693a      	ldr	r2, [r7, #16]
 8007a56:	4313      	orrs	r3, r2
 8007a58:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007a5a:	683b      	ldr	r3, [r7, #0]
 8007a5c:	699b      	ldr	r3, [r3, #24]
 8007a5e:	011b      	lsls	r3, r3, #4
 8007a60:	693a      	ldr	r2, [r7, #16]
 8007a62:	4313      	orrs	r3, r2
 8007a64:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	693a      	ldr	r2, [r7, #16]
 8007a6a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	68fa      	ldr	r2, [r7, #12]
 8007a70:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007a72:	683b      	ldr	r3, [r7, #0]
 8007a74:	685a      	ldr	r2, [r3, #4]
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	697a      	ldr	r2, [r7, #20]
 8007a7e:	621a      	str	r2, [r3, #32]
}
 8007a80:	bf00      	nop
 8007a82:	371c      	adds	r7, #28
 8007a84:	46bd      	mov	sp, r7
 8007a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a8a:	4770      	bx	lr
 8007a8c:	40012c00 	.word	0x40012c00
 8007a90:	40013400 	.word	0x40013400
 8007a94:	40014000 	.word	0x40014000
 8007a98:	40014400 	.word	0x40014400
 8007a9c:	40014800 	.word	0x40014800

08007aa0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007aa0:	b480      	push	{r7}
 8007aa2:	b087      	sub	sp, #28
 8007aa4:	af00      	add	r7, sp, #0
 8007aa6:	6078      	str	r0, [r7, #4]
 8007aa8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	6a1b      	ldr	r3, [r3, #32]
 8007aae:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	6a1b      	ldr	r3, [r3, #32]
 8007aba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	685b      	ldr	r3, [r3, #4]
 8007ac0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	69db      	ldr	r3, [r3, #28]
 8007ac6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007ace:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007ad2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007ada:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007adc:	683b      	ldr	r3, [r7, #0]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	021b      	lsls	r3, r3, #8
 8007ae2:	68fa      	ldr	r2, [r7, #12]
 8007ae4:	4313      	orrs	r3, r2
 8007ae6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007ae8:	697b      	ldr	r3, [r7, #20]
 8007aea:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007aee:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007af0:	683b      	ldr	r3, [r7, #0]
 8007af2:	689b      	ldr	r3, [r3, #8]
 8007af4:	031b      	lsls	r3, r3, #12
 8007af6:	697a      	ldr	r2, [r7, #20]
 8007af8:	4313      	orrs	r3, r2
 8007afa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	4a28      	ldr	r2, [pc, #160]	; (8007ba0 <TIM_OC4_SetConfig+0x100>)
 8007b00:	4293      	cmp	r3, r2
 8007b02:	d003      	beq.n	8007b0c <TIM_OC4_SetConfig+0x6c>
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	4a27      	ldr	r2, [pc, #156]	; (8007ba4 <TIM_OC4_SetConfig+0x104>)
 8007b08:	4293      	cmp	r3, r2
 8007b0a:	d10d      	bne.n	8007b28 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8007b0c:	697b      	ldr	r3, [r7, #20]
 8007b0e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007b12:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8007b14:	683b      	ldr	r3, [r7, #0]
 8007b16:	68db      	ldr	r3, [r3, #12]
 8007b18:	031b      	lsls	r3, r3, #12
 8007b1a:	697a      	ldr	r2, [r7, #20]
 8007b1c:	4313      	orrs	r3, r2
 8007b1e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8007b20:	697b      	ldr	r3, [r7, #20]
 8007b22:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007b26:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	4a1d      	ldr	r2, [pc, #116]	; (8007ba0 <TIM_OC4_SetConfig+0x100>)
 8007b2c:	4293      	cmp	r3, r2
 8007b2e:	d00f      	beq.n	8007b50 <TIM_OC4_SetConfig+0xb0>
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	4a1c      	ldr	r2, [pc, #112]	; (8007ba4 <TIM_OC4_SetConfig+0x104>)
 8007b34:	4293      	cmp	r3, r2
 8007b36:	d00b      	beq.n	8007b50 <TIM_OC4_SetConfig+0xb0>
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	4a1b      	ldr	r2, [pc, #108]	; (8007ba8 <TIM_OC4_SetConfig+0x108>)
 8007b3c:	4293      	cmp	r3, r2
 8007b3e:	d007      	beq.n	8007b50 <TIM_OC4_SetConfig+0xb0>
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	4a1a      	ldr	r2, [pc, #104]	; (8007bac <TIM_OC4_SetConfig+0x10c>)
 8007b44:	4293      	cmp	r3, r2
 8007b46:	d003      	beq.n	8007b50 <TIM_OC4_SetConfig+0xb0>
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	4a19      	ldr	r2, [pc, #100]	; (8007bb0 <TIM_OC4_SetConfig+0x110>)
 8007b4c:	4293      	cmp	r3, r2
 8007b4e:	d113      	bne.n	8007b78 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007b50:	693b      	ldr	r3, [r7, #16]
 8007b52:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007b56:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8007b58:	693b      	ldr	r3, [r7, #16]
 8007b5a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007b5e:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007b60:	683b      	ldr	r3, [r7, #0]
 8007b62:	695b      	ldr	r3, [r3, #20]
 8007b64:	019b      	lsls	r3, r3, #6
 8007b66:	693a      	ldr	r2, [r7, #16]
 8007b68:	4313      	orrs	r3, r2
 8007b6a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8007b6c:	683b      	ldr	r3, [r7, #0]
 8007b6e:	699b      	ldr	r3, [r3, #24]
 8007b70:	019b      	lsls	r3, r3, #6
 8007b72:	693a      	ldr	r2, [r7, #16]
 8007b74:	4313      	orrs	r3, r2
 8007b76:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	693a      	ldr	r2, [r7, #16]
 8007b7c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	68fa      	ldr	r2, [r7, #12]
 8007b82:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007b84:	683b      	ldr	r3, [r7, #0]
 8007b86:	685a      	ldr	r2, [r3, #4]
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	697a      	ldr	r2, [r7, #20]
 8007b90:	621a      	str	r2, [r3, #32]
}
 8007b92:	bf00      	nop
 8007b94:	371c      	adds	r7, #28
 8007b96:	46bd      	mov	sp, r7
 8007b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b9c:	4770      	bx	lr
 8007b9e:	bf00      	nop
 8007ba0:	40012c00 	.word	0x40012c00
 8007ba4:	40013400 	.word	0x40013400
 8007ba8:	40014000 	.word	0x40014000
 8007bac:	40014400 	.word	0x40014400
 8007bb0:	40014800 	.word	0x40014800

08007bb4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007bb4:	b480      	push	{r7}
 8007bb6:	b087      	sub	sp, #28
 8007bb8:	af00      	add	r7, sp, #0
 8007bba:	6078      	str	r0, [r7, #4]
 8007bbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	6a1b      	ldr	r3, [r3, #32]
 8007bc2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	6a1b      	ldr	r3, [r3, #32]
 8007bce:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	685b      	ldr	r3, [r3, #4]
 8007bd4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007bda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007be2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007be6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007be8:	683b      	ldr	r3, [r7, #0]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	68fa      	ldr	r2, [r7, #12]
 8007bee:	4313      	orrs	r3, r2
 8007bf0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007bf2:	693b      	ldr	r3, [r7, #16]
 8007bf4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007bf8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007bfa:	683b      	ldr	r3, [r7, #0]
 8007bfc:	689b      	ldr	r3, [r3, #8]
 8007bfe:	041b      	lsls	r3, r3, #16
 8007c00:	693a      	ldr	r2, [r7, #16]
 8007c02:	4313      	orrs	r3, r2
 8007c04:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	4a17      	ldr	r2, [pc, #92]	; (8007c68 <TIM_OC5_SetConfig+0xb4>)
 8007c0a:	4293      	cmp	r3, r2
 8007c0c:	d00f      	beq.n	8007c2e <TIM_OC5_SetConfig+0x7a>
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	4a16      	ldr	r2, [pc, #88]	; (8007c6c <TIM_OC5_SetConfig+0xb8>)
 8007c12:	4293      	cmp	r3, r2
 8007c14:	d00b      	beq.n	8007c2e <TIM_OC5_SetConfig+0x7a>
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	4a15      	ldr	r2, [pc, #84]	; (8007c70 <TIM_OC5_SetConfig+0xbc>)
 8007c1a:	4293      	cmp	r3, r2
 8007c1c:	d007      	beq.n	8007c2e <TIM_OC5_SetConfig+0x7a>
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	4a14      	ldr	r2, [pc, #80]	; (8007c74 <TIM_OC5_SetConfig+0xc0>)
 8007c22:	4293      	cmp	r3, r2
 8007c24:	d003      	beq.n	8007c2e <TIM_OC5_SetConfig+0x7a>
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	4a13      	ldr	r2, [pc, #76]	; (8007c78 <TIM_OC5_SetConfig+0xc4>)
 8007c2a:	4293      	cmp	r3, r2
 8007c2c:	d109      	bne.n	8007c42 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007c2e:	697b      	ldr	r3, [r7, #20]
 8007c30:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007c34:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007c36:	683b      	ldr	r3, [r7, #0]
 8007c38:	695b      	ldr	r3, [r3, #20]
 8007c3a:	021b      	lsls	r3, r3, #8
 8007c3c:	697a      	ldr	r2, [r7, #20]
 8007c3e:	4313      	orrs	r3, r2
 8007c40:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	697a      	ldr	r2, [r7, #20]
 8007c46:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	68fa      	ldr	r2, [r7, #12]
 8007c4c:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007c4e:	683b      	ldr	r3, [r7, #0]
 8007c50:	685a      	ldr	r2, [r3, #4]
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	693a      	ldr	r2, [r7, #16]
 8007c5a:	621a      	str	r2, [r3, #32]
}
 8007c5c:	bf00      	nop
 8007c5e:	371c      	adds	r7, #28
 8007c60:	46bd      	mov	sp, r7
 8007c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c66:	4770      	bx	lr
 8007c68:	40012c00 	.word	0x40012c00
 8007c6c:	40013400 	.word	0x40013400
 8007c70:	40014000 	.word	0x40014000
 8007c74:	40014400 	.word	0x40014400
 8007c78:	40014800 	.word	0x40014800

08007c7c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007c7c:	b480      	push	{r7}
 8007c7e:	b087      	sub	sp, #28
 8007c80:	af00      	add	r7, sp, #0
 8007c82:	6078      	str	r0, [r7, #4]
 8007c84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	6a1b      	ldr	r3, [r3, #32]
 8007c8a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	6a1b      	ldr	r3, [r3, #32]
 8007c96:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	685b      	ldr	r3, [r3, #4]
 8007c9c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007ca2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007caa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007cae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007cb0:	683b      	ldr	r3, [r7, #0]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	021b      	lsls	r3, r3, #8
 8007cb6:	68fa      	ldr	r2, [r7, #12]
 8007cb8:	4313      	orrs	r3, r2
 8007cba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007cbc:	693b      	ldr	r3, [r7, #16]
 8007cbe:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007cc2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007cc4:	683b      	ldr	r3, [r7, #0]
 8007cc6:	689b      	ldr	r3, [r3, #8]
 8007cc8:	051b      	lsls	r3, r3, #20
 8007cca:	693a      	ldr	r2, [r7, #16]
 8007ccc:	4313      	orrs	r3, r2
 8007cce:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	4a18      	ldr	r2, [pc, #96]	; (8007d34 <TIM_OC6_SetConfig+0xb8>)
 8007cd4:	4293      	cmp	r3, r2
 8007cd6:	d00f      	beq.n	8007cf8 <TIM_OC6_SetConfig+0x7c>
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	4a17      	ldr	r2, [pc, #92]	; (8007d38 <TIM_OC6_SetConfig+0xbc>)
 8007cdc:	4293      	cmp	r3, r2
 8007cde:	d00b      	beq.n	8007cf8 <TIM_OC6_SetConfig+0x7c>
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	4a16      	ldr	r2, [pc, #88]	; (8007d3c <TIM_OC6_SetConfig+0xc0>)
 8007ce4:	4293      	cmp	r3, r2
 8007ce6:	d007      	beq.n	8007cf8 <TIM_OC6_SetConfig+0x7c>
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	4a15      	ldr	r2, [pc, #84]	; (8007d40 <TIM_OC6_SetConfig+0xc4>)
 8007cec:	4293      	cmp	r3, r2
 8007cee:	d003      	beq.n	8007cf8 <TIM_OC6_SetConfig+0x7c>
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	4a14      	ldr	r2, [pc, #80]	; (8007d44 <TIM_OC6_SetConfig+0xc8>)
 8007cf4:	4293      	cmp	r3, r2
 8007cf6:	d109      	bne.n	8007d0c <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007cf8:	697b      	ldr	r3, [r7, #20]
 8007cfa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007cfe:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007d00:	683b      	ldr	r3, [r7, #0]
 8007d02:	695b      	ldr	r3, [r3, #20]
 8007d04:	029b      	lsls	r3, r3, #10
 8007d06:	697a      	ldr	r2, [r7, #20]
 8007d08:	4313      	orrs	r3, r2
 8007d0a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	697a      	ldr	r2, [r7, #20]
 8007d10:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	68fa      	ldr	r2, [r7, #12]
 8007d16:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007d18:	683b      	ldr	r3, [r7, #0]
 8007d1a:	685a      	ldr	r2, [r3, #4]
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	693a      	ldr	r2, [r7, #16]
 8007d24:	621a      	str	r2, [r3, #32]
}
 8007d26:	bf00      	nop
 8007d28:	371c      	adds	r7, #28
 8007d2a:	46bd      	mov	sp, r7
 8007d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d30:	4770      	bx	lr
 8007d32:	bf00      	nop
 8007d34:	40012c00 	.word	0x40012c00
 8007d38:	40013400 	.word	0x40013400
 8007d3c:	40014000 	.word	0x40014000
 8007d40:	40014400 	.word	0x40014400
 8007d44:	40014800 	.word	0x40014800

08007d48 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8007d48:	b480      	push	{r7}
 8007d4a:	b087      	sub	sp, #28
 8007d4c:	af00      	add	r7, sp, #0
 8007d4e:	60f8      	str	r0, [r7, #12]
 8007d50:	60b9      	str	r1, [r7, #8]
 8007d52:	607a      	str	r2, [r7, #4]
 8007d54:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	6a1b      	ldr	r3, [r3, #32]
 8007d5a:	f023 0201 	bic.w	r2, r3, #1
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	699b      	ldr	r3, [r3, #24]
 8007d66:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	6a1b      	ldr	r3, [r3, #32]
 8007d6c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	4a24      	ldr	r2, [pc, #144]	; (8007e04 <TIM_TI1_SetConfig+0xbc>)
 8007d72:	4293      	cmp	r3, r2
 8007d74:	d013      	beq.n	8007d9e <TIM_TI1_SetConfig+0x56>
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007d7c:	d00f      	beq.n	8007d9e <TIM_TI1_SetConfig+0x56>
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	4a21      	ldr	r2, [pc, #132]	; (8007e08 <TIM_TI1_SetConfig+0xc0>)
 8007d82:	4293      	cmp	r3, r2
 8007d84:	d00b      	beq.n	8007d9e <TIM_TI1_SetConfig+0x56>
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	4a20      	ldr	r2, [pc, #128]	; (8007e0c <TIM_TI1_SetConfig+0xc4>)
 8007d8a:	4293      	cmp	r3, r2
 8007d8c:	d007      	beq.n	8007d9e <TIM_TI1_SetConfig+0x56>
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	4a1f      	ldr	r2, [pc, #124]	; (8007e10 <TIM_TI1_SetConfig+0xc8>)
 8007d92:	4293      	cmp	r3, r2
 8007d94:	d003      	beq.n	8007d9e <TIM_TI1_SetConfig+0x56>
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	4a1e      	ldr	r2, [pc, #120]	; (8007e14 <TIM_TI1_SetConfig+0xcc>)
 8007d9a:	4293      	cmp	r3, r2
 8007d9c:	d101      	bne.n	8007da2 <TIM_TI1_SetConfig+0x5a>
 8007d9e:	2301      	movs	r3, #1
 8007da0:	e000      	b.n	8007da4 <TIM_TI1_SetConfig+0x5c>
 8007da2:	2300      	movs	r3, #0
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d008      	beq.n	8007dba <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8007da8:	697b      	ldr	r3, [r7, #20]
 8007daa:	f023 0303 	bic.w	r3, r3, #3
 8007dae:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8007db0:	697a      	ldr	r2, [r7, #20]
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	4313      	orrs	r3, r2
 8007db6:	617b      	str	r3, [r7, #20]
 8007db8:	e003      	b.n	8007dc2 <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8007dba:	697b      	ldr	r3, [r7, #20]
 8007dbc:	f043 0301 	orr.w	r3, r3, #1
 8007dc0:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007dc2:	697b      	ldr	r3, [r7, #20]
 8007dc4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007dc8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8007dca:	683b      	ldr	r3, [r7, #0]
 8007dcc:	011b      	lsls	r3, r3, #4
 8007dce:	b2db      	uxtb	r3, r3
 8007dd0:	697a      	ldr	r2, [r7, #20]
 8007dd2:	4313      	orrs	r3, r2
 8007dd4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007dd6:	693b      	ldr	r3, [r7, #16]
 8007dd8:	f023 030a 	bic.w	r3, r3, #10
 8007ddc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8007dde:	68bb      	ldr	r3, [r7, #8]
 8007de0:	f003 030a 	and.w	r3, r3, #10
 8007de4:	693a      	ldr	r2, [r7, #16]
 8007de6:	4313      	orrs	r3, r2
 8007de8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	697a      	ldr	r2, [r7, #20]
 8007dee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	693a      	ldr	r2, [r7, #16]
 8007df4:	621a      	str	r2, [r3, #32]
}
 8007df6:	bf00      	nop
 8007df8:	371c      	adds	r7, #28
 8007dfa:	46bd      	mov	sp, r7
 8007dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e00:	4770      	bx	lr
 8007e02:	bf00      	nop
 8007e04:	40012c00 	.word	0x40012c00
 8007e08:	40000400 	.word	0x40000400
 8007e0c:	40000800 	.word	0x40000800
 8007e10:	40013400 	.word	0x40013400
 8007e14:	40014000 	.word	0x40014000

08007e18 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007e18:	b480      	push	{r7}
 8007e1a:	b087      	sub	sp, #28
 8007e1c:	af00      	add	r7, sp, #0
 8007e1e:	60f8      	str	r0, [r7, #12]
 8007e20:	60b9      	str	r1, [r7, #8]
 8007e22:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	6a1b      	ldr	r3, [r3, #32]
 8007e28:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	6a1b      	ldr	r3, [r3, #32]
 8007e2e:	f023 0201 	bic.w	r2, r3, #1
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	699b      	ldr	r3, [r3, #24]
 8007e3a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007e3c:	693b      	ldr	r3, [r7, #16]
 8007e3e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007e42:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	011b      	lsls	r3, r3, #4
 8007e48:	693a      	ldr	r2, [r7, #16]
 8007e4a:	4313      	orrs	r3, r2
 8007e4c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007e4e:	697b      	ldr	r3, [r7, #20]
 8007e50:	f023 030a 	bic.w	r3, r3, #10
 8007e54:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007e56:	697a      	ldr	r2, [r7, #20]
 8007e58:	68bb      	ldr	r3, [r7, #8]
 8007e5a:	4313      	orrs	r3, r2
 8007e5c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	693a      	ldr	r2, [r7, #16]
 8007e62:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	697a      	ldr	r2, [r7, #20]
 8007e68:	621a      	str	r2, [r3, #32]
}
 8007e6a:	bf00      	nop
 8007e6c:	371c      	adds	r7, #28
 8007e6e:	46bd      	mov	sp, r7
 8007e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e74:	4770      	bx	lr

08007e76 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007e76:	b480      	push	{r7}
 8007e78:	b087      	sub	sp, #28
 8007e7a:	af00      	add	r7, sp, #0
 8007e7c:	60f8      	str	r0, [r7, #12]
 8007e7e:	60b9      	str	r1, [r7, #8]
 8007e80:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	6a1b      	ldr	r3, [r3, #32]
 8007e86:	f023 0210 	bic.w	r2, r3, #16
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	699b      	ldr	r3, [r3, #24]
 8007e92:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	6a1b      	ldr	r3, [r3, #32]
 8007e98:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007e9a:	697b      	ldr	r3, [r7, #20]
 8007e9c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007ea0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	031b      	lsls	r3, r3, #12
 8007ea6:	697a      	ldr	r2, [r7, #20]
 8007ea8:	4313      	orrs	r3, r2
 8007eaa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007eac:	693b      	ldr	r3, [r7, #16]
 8007eae:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007eb2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007eb4:	68bb      	ldr	r3, [r7, #8]
 8007eb6:	011b      	lsls	r3, r3, #4
 8007eb8:	693a      	ldr	r2, [r7, #16]
 8007eba:	4313      	orrs	r3, r2
 8007ebc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	697a      	ldr	r2, [r7, #20]
 8007ec2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	693a      	ldr	r2, [r7, #16]
 8007ec8:	621a      	str	r2, [r3, #32]
}
 8007eca:	bf00      	nop
 8007ecc:	371c      	adds	r7, #28
 8007ece:	46bd      	mov	sp, r7
 8007ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ed4:	4770      	bx	lr

08007ed6 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007ed6:	b480      	push	{r7}
 8007ed8:	b085      	sub	sp, #20
 8007eda:	af00      	add	r7, sp, #0
 8007edc:	6078      	str	r0, [r7, #4]
 8007ede:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	689b      	ldr	r3, [r3, #8]
 8007ee4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8007eec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ef0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007ef2:	683a      	ldr	r2, [r7, #0]
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	4313      	orrs	r3, r2
 8007ef8:	f043 0307 	orr.w	r3, r3, #7
 8007efc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	68fa      	ldr	r2, [r7, #12]
 8007f02:	609a      	str	r2, [r3, #8]
}
 8007f04:	bf00      	nop
 8007f06:	3714      	adds	r7, #20
 8007f08:	46bd      	mov	sp, r7
 8007f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f0e:	4770      	bx	lr

08007f10 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007f10:	b480      	push	{r7}
 8007f12:	b087      	sub	sp, #28
 8007f14:	af00      	add	r7, sp, #0
 8007f16:	60f8      	str	r0, [r7, #12]
 8007f18:	60b9      	str	r1, [r7, #8]
 8007f1a:	607a      	str	r2, [r7, #4]
 8007f1c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	689b      	ldr	r3, [r3, #8]
 8007f22:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007f24:	697b      	ldr	r3, [r7, #20]
 8007f26:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007f2a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007f2c:	683b      	ldr	r3, [r7, #0]
 8007f2e:	021a      	lsls	r2, r3, #8
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	431a      	orrs	r2, r3
 8007f34:	68bb      	ldr	r3, [r7, #8]
 8007f36:	4313      	orrs	r3, r2
 8007f38:	697a      	ldr	r2, [r7, #20]
 8007f3a:	4313      	orrs	r3, r2
 8007f3c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	697a      	ldr	r2, [r7, #20]
 8007f42:	609a      	str	r2, [r3, #8]
}
 8007f44:	bf00      	nop
 8007f46:	371c      	adds	r7, #28
 8007f48:	46bd      	mov	sp, r7
 8007f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f4e:	4770      	bx	lr

08007f50 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007f50:	b480      	push	{r7}
 8007f52:	b087      	sub	sp, #28
 8007f54:	af00      	add	r7, sp, #0
 8007f56:	60f8      	str	r0, [r7, #12]
 8007f58:	60b9      	str	r1, [r7, #8]
 8007f5a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007f5c:	68bb      	ldr	r3, [r7, #8]
 8007f5e:	f003 031f 	and.w	r3, r3, #31
 8007f62:	2201      	movs	r2, #1
 8007f64:	fa02 f303 	lsl.w	r3, r2, r3
 8007f68:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	6a1a      	ldr	r2, [r3, #32]
 8007f6e:	697b      	ldr	r3, [r7, #20]
 8007f70:	43db      	mvns	r3, r3
 8007f72:	401a      	ands	r2, r3
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	6a1a      	ldr	r2, [r3, #32]
 8007f7c:	68bb      	ldr	r3, [r7, #8]
 8007f7e:	f003 031f 	and.w	r3, r3, #31
 8007f82:	6879      	ldr	r1, [r7, #4]
 8007f84:	fa01 f303 	lsl.w	r3, r1, r3
 8007f88:	431a      	orrs	r2, r3
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	621a      	str	r2, [r3, #32]
}
 8007f8e:	bf00      	nop
 8007f90:	371c      	adds	r7, #28
 8007f92:	46bd      	mov	sp, r7
 8007f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f98:	4770      	bx	lr

08007f9a <HAL_TIMEx_HallSensor_Init>:
  * @param  htim TIM Hall Sensor Interface handle
  * @param  sConfig TIM Hall Sensor configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_HallSensor_Init(TIM_HandleTypeDef *htim, TIM_HallSensor_InitTypeDef *sConfig)
{
 8007f9a:	b580      	push	{r7, lr}
 8007f9c:	b08a      	sub	sp, #40	; 0x28
 8007f9e:	af00      	add	r7, sp, #0
 8007fa0:	6078      	str	r0, [r7, #4]
 8007fa2:	6039      	str	r1, [r7, #0]
  TIM_OC_InitTypeDef OC_Config;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d101      	bne.n	8007fae <HAL_TIMEx_HallSensor_Init+0x14>
  {
    return HAL_ERROR;
 8007faa:	2301      	movs	r3, #1
 8007fac:	e0a0      	b.n	80080f0 <HAL_TIMEx_HallSensor_Init+0x156>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
  assert_param(IS_TIM_IC_POLARITY(sConfig->IC1Polarity));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007fb4:	b2db      	uxtb	r3, r3
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d106      	bne.n	8007fc8 <HAL_TIMEx_HallSensor_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	2200      	movs	r2, #0
 8007fbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->HallSensor_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIMEx_HallSensor_MspInit(htim);
 8007fc2:	6878      	ldr	r0, [r7, #4]
 8007fc4:	f7f9 ff1c 	bl	8001e00 <HAL_TIMEx_HallSensor_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	2202      	movs	r2, #2
 8007fcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	681a      	ldr	r2, [r3, #0]
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	3304      	adds	r3, #4
 8007fd8:	4619      	mov	r1, r3
 8007fda:	4610      	mov	r0, r2
 8007fdc:	f7ff fb2e 	bl	800763c <TIM_Base_SetConfig>

  /* Configure the Channel 1 as Input Channel to interface with the three Outputs of the  Hall sensor */
  TIM_TI1_SetConfig(htim->Instance, sConfig->IC1Polarity, TIM_ICSELECTION_TRC, sConfig->IC1Filter);
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	6818      	ldr	r0, [r3, #0]
 8007fe4:	683b      	ldr	r3, [r7, #0]
 8007fe6:	6819      	ldr	r1, [r3, #0]
 8007fe8:	683b      	ldr	r3, [r7, #0]
 8007fea:	689b      	ldr	r3, [r3, #8]
 8007fec:	2203      	movs	r2, #3
 8007fee:	f7ff feab 	bl	8007d48 <TIM_TI1_SetConfig>

  /* Reset the IC1PSC Bits */
  htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	699a      	ldr	r2, [r3, #24]
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	f022 020c 	bic.w	r2, r2, #12
 8008000:	619a      	str	r2, [r3, #24]
  /* Set the IC1PSC value */
  htim->Instance->CCMR1 |= sConfig->IC1Prescaler;
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	6999      	ldr	r1, [r3, #24]
 8008008:	683b      	ldr	r3, [r7, #0]
 800800a:	685a      	ldr	r2, [r3, #4]
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	430a      	orrs	r2, r1
 8008012:	619a      	str	r2, [r3, #24]

  /* Enable the Hall sensor interface (XOR function of the three inputs) */
  htim->Instance->CR2 |= TIM_CR2_TI1S;
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	685a      	ldr	r2, [r3, #4]
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008022:	605a      	str	r2, [r3, #4]

  /* Select the TIM_TS_TI1F_ED signal as Input trigger for the TIM */
  htim->Instance->SMCR &= ~TIM_SMCR_TS;
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	689b      	ldr	r3, [r3, #8]
 800802a:	687a      	ldr	r2, [r7, #4]
 800802c:	6812      	ldr	r2, [r2, #0]
 800802e:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8008032:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008036:	6093      	str	r3, [r2, #8]
  htim->Instance->SMCR |= TIM_TS_TI1F_ED;
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	689a      	ldr	r2, [r3, #8]
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008046:	609a      	str	r2, [r3, #8]

  /* Use the TIM_TS_TI1F_ED signal to reset the TIM counter each edge detection */
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	689b      	ldr	r3, [r3, #8]
 800804e:	687a      	ldr	r2, [r7, #4]
 8008050:	6812      	ldr	r2, [r2, #0]
 8008052:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008056:	f023 0307 	bic.w	r3, r3, #7
 800805a:	6093      	str	r3, [r2, #8]
  htim->Instance->SMCR |= TIM_SLAVEMODE_RESET;
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	689a      	ldr	r2, [r3, #8]
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	f042 0204 	orr.w	r2, r2, #4
 800806a:	609a      	str	r2, [r3, #8]

  /* Program channel 2 in PWM 2 mode with the desired Commutation_Delay*/
  OC_Config.OCFastMode = TIM_OCFAST_DISABLE;
 800806c:	2300      	movs	r3, #0
 800806e:	61fb      	str	r3, [r7, #28]
  OC_Config.OCIdleState = TIM_OCIDLESTATE_RESET;
 8008070:	2300      	movs	r3, #0
 8008072:	623b      	str	r3, [r7, #32]
  OC_Config.OCMode = TIM_OCMODE_PWM2;
 8008074:	2370      	movs	r3, #112	; 0x70
 8008076:	60fb      	str	r3, [r7, #12]
  OC_Config.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8008078:	2300      	movs	r3, #0
 800807a:	627b      	str	r3, [r7, #36]	; 0x24
  OC_Config.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800807c:	2300      	movs	r3, #0
 800807e:	61bb      	str	r3, [r7, #24]
  OC_Config.OCPolarity = TIM_OCPOLARITY_HIGH;
 8008080:	2300      	movs	r3, #0
 8008082:	617b      	str	r3, [r7, #20]
  OC_Config.Pulse = sConfig->Commutation_Delay;
 8008084:	683b      	ldr	r3, [r7, #0]
 8008086:	68db      	ldr	r3, [r3, #12]
 8008088:	613b      	str	r3, [r7, #16]

  TIM_OC2_SetConfig(htim->Instance, &OC_Config);
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	f107 020c 	add.w	r2, r7, #12
 8008092:	4611      	mov	r1, r2
 8008094:	4618      	mov	r0, r3
 8008096:	f7ff fbf1 	bl	800787c <TIM_OC2_SetConfig>

  /* Select OC2REF as trigger output on TRGO: write the MMS bits in the TIMx_CR2
    register to 101 */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	685b      	ldr	r3, [r3, #4]
 80080a0:	687a      	ldr	r2, [r7, #4]
 80080a2:	6812      	ldr	r2, [r2, #0]
 80080a4:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80080a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80080ac:	6053      	str	r3, [r2, #4]
  htim->Instance->CR2 |= TIM_TRGO_OC2REF;
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	685a      	ldr	r2, [r3, #4]
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	f042 0250 	orr.w	r2, r2, #80	; 0x50
 80080bc:	605a      	str	r2, [r3, #4]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	2201      	movs	r2, #1
 80080c2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	2201      	movs	r2, #1
 80080ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	2201      	movs	r2, #1
 80080d2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	2201      	movs	r2, #1
 80080da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	2201      	movs	r2, #1
 80080e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	2201      	movs	r2, #1
 80080ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80080ee:	2300      	movs	r3, #0
}
 80080f0:	4618      	mov	r0, r3
 80080f2:	3728      	adds	r7, #40	; 0x28
 80080f4:	46bd      	mov	sp, r7
 80080f6:	bd80      	pop	{r7, pc}

080080f8 <HAL_TIMEx_PWMN_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80080f8:	b580      	push	{r7, lr}
 80080fa:	b084      	sub	sp, #16
 80080fc:	af00      	add	r7, sp, #0
 80080fe:	6078      	str	r0, [r7, #4]
 8008100:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008102:	2300      	movs	r3, #0
 8008104:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008106:	683b      	ldr	r3, [r7, #0]
 8008108:	2b00      	cmp	r3, #0
 800810a:	d109      	bne.n	8008120 <HAL_TIMEx_PWMN_Start_IT+0x28>
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008112:	b2db      	uxtb	r3, r3
 8008114:	2b01      	cmp	r3, #1
 8008116:	bf14      	ite	ne
 8008118:	2301      	movne	r3, #1
 800811a:	2300      	moveq	r3, #0
 800811c:	b2db      	uxtb	r3, r3
 800811e:	e022      	b.n	8008166 <HAL_TIMEx_PWMN_Start_IT+0x6e>
 8008120:	683b      	ldr	r3, [r7, #0]
 8008122:	2b04      	cmp	r3, #4
 8008124:	d109      	bne.n	800813a <HAL_TIMEx_PWMN_Start_IT+0x42>
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800812c:	b2db      	uxtb	r3, r3
 800812e:	2b01      	cmp	r3, #1
 8008130:	bf14      	ite	ne
 8008132:	2301      	movne	r3, #1
 8008134:	2300      	moveq	r3, #0
 8008136:	b2db      	uxtb	r3, r3
 8008138:	e015      	b.n	8008166 <HAL_TIMEx_PWMN_Start_IT+0x6e>
 800813a:	683b      	ldr	r3, [r7, #0]
 800813c:	2b08      	cmp	r3, #8
 800813e:	d109      	bne.n	8008154 <HAL_TIMEx_PWMN_Start_IT+0x5c>
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8008146:	b2db      	uxtb	r3, r3
 8008148:	2b01      	cmp	r3, #1
 800814a:	bf14      	ite	ne
 800814c:	2301      	movne	r3, #1
 800814e:	2300      	moveq	r3, #0
 8008150:	b2db      	uxtb	r3, r3
 8008152:	e008      	b.n	8008166 <HAL_TIMEx_PWMN_Start_IT+0x6e>
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800815a:	b2db      	uxtb	r3, r3
 800815c:	2b01      	cmp	r3, #1
 800815e:	bf14      	ite	ne
 8008160:	2301      	movne	r3, #1
 8008162:	2300      	moveq	r3, #0
 8008164:	b2db      	uxtb	r3, r3
 8008166:	2b00      	cmp	r3, #0
 8008168:	d001      	beq.n	800816e <HAL_TIMEx_PWMN_Start_IT+0x76>
  {
    return HAL_ERROR;
 800816a:	2301      	movs	r3, #1
 800816c:	e0bc      	b.n	80082e8 <HAL_TIMEx_PWMN_Start_IT+0x1f0>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800816e:	683b      	ldr	r3, [r7, #0]
 8008170:	2b00      	cmp	r3, #0
 8008172:	d104      	bne.n	800817e <HAL_TIMEx_PWMN_Start_IT+0x86>
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	2202      	movs	r2, #2
 8008178:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800817c:	e013      	b.n	80081a6 <HAL_TIMEx_PWMN_Start_IT+0xae>
 800817e:	683b      	ldr	r3, [r7, #0]
 8008180:	2b04      	cmp	r3, #4
 8008182:	d104      	bne.n	800818e <HAL_TIMEx_PWMN_Start_IT+0x96>
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	2202      	movs	r2, #2
 8008188:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800818c:	e00b      	b.n	80081a6 <HAL_TIMEx_PWMN_Start_IT+0xae>
 800818e:	683b      	ldr	r3, [r7, #0]
 8008190:	2b08      	cmp	r3, #8
 8008192:	d104      	bne.n	800819e <HAL_TIMEx_PWMN_Start_IT+0xa6>
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	2202      	movs	r2, #2
 8008198:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800819c:	e003      	b.n	80081a6 <HAL_TIMEx_PWMN_Start_IT+0xae>
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	2202      	movs	r2, #2
 80081a2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  switch (Channel)
 80081a6:	683b      	ldr	r3, [r7, #0]
 80081a8:	2b0c      	cmp	r3, #12
 80081aa:	d841      	bhi.n	8008230 <HAL_TIMEx_PWMN_Start_IT+0x138>
 80081ac:	a201      	add	r2, pc, #4	; (adr r2, 80081b4 <HAL_TIMEx_PWMN_Start_IT+0xbc>)
 80081ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081b2:	bf00      	nop
 80081b4:	080081e9 	.word	0x080081e9
 80081b8:	08008231 	.word	0x08008231
 80081bc:	08008231 	.word	0x08008231
 80081c0:	08008231 	.word	0x08008231
 80081c4:	080081fb 	.word	0x080081fb
 80081c8:	08008231 	.word	0x08008231
 80081cc:	08008231 	.word	0x08008231
 80081d0:	08008231 	.word	0x08008231
 80081d4:	0800820d 	.word	0x0800820d
 80081d8:	08008231 	.word	0x08008231
 80081dc:	08008231 	.word	0x08008231
 80081e0:	08008231 	.word	0x08008231
 80081e4:	0800821f 	.word	0x0800821f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	68da      	ldr	r2, [r3, #12]
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	f042 0202 	orr.w	r2, r2, #2
 80081f6:	60da      	str	r2, [r3, #12]
      break;
 80081f8:	e01d      	b.n	8008236 <HAL_TIMEx_PWMN_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	68da      	ldr	r2, [r3, #12]
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	f042 0204 	orr.w	r2, r2, #4
 8008208:	60da      	str	r2, [r3, #12]
      break;
 800820a:	e014      	b.n	8008236 <HAL_TIMEx_PWMN_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	68da      	ldr	r2, [r3, #12]
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	f042 0208 	orr.w	r2, r2, #8
 800821a:	60da      	str	r2, [r3, #12]
      break;
 800821c:	e00b      	b.n	8008236 <HAL_TIMEx_PWMN_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	68da      	ldr	r2, [r3, #12]
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	f042 0210 	orr.w	r2, r2, #16
 800822c:	60da      	str	r2, [r3, #12]
      break;
 800822e:	e002      	b.n	8008236 <HAL_TIMEx_PWMN_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 8008230:	2301      	movs	r3, #1
 8008232:	73fb      	strb	r3, [r7, #15]
      break;
 8008234:	bf00      	nop
  }

  if (status == HAL_OK)
 8008236:	7bfb      	ldrb	r3, [r7, #15]
 8008238:	2b00      	cmp	r3, #0
 800823a:	d154      	bne.n	80082e6 <HAL_TIMEx_PWMN_Start_IT+0x1ee>
  {
    /* Enable the TIM Break interrupt */
    __HAL_TIM_ENABLE_IT(htim, TIM_IT_BREAK);
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	68da      	ldr	r2, [r3, #12]
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800824a:	60da      	str	r2, [r3, #12]

    /* Enable the complementary PWM output  */
    TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	2204      	movs	r2, #4
 8008252:	6839      	ldr	r1, [r7, #0]
 8008254:	4618      	mov	r0, r3
 8008256:	f000 f9d2 	bl	80085fe <TIM_CCxNChannelCmd>

    /* Enable the Main Output */
    __HAL_TIM_MOE_ENABLE(htim);
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008268:	645a      	str	r2, [r3, #68]	; 0x44

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	4a20      	ldr	r2, [pc, #128]	; (80082f0 <HAL_TIMEx_PWMN_Start_IT+0x1f8>)
 8008270:	4293      	cmp	r3, r2
 8008272:	d018      	beq.n	80082a6 <HAL_TIMEx_PWMN_Start_IT+0x1ae>
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800827c:	d013      	beq.n	80082a6 <HAL_TIMEx_PWMN_Start_IT+0x1ae>
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	4a1c      	ldr	r2, [pc, #112]	; (80082f4 <HAL_TIMEx_PWMN_Start_IT+0x1fc>)
 8008284:	4293      	cmp	r3, r2
 8008286:	d00e      	beq.n	80082a6 <HAL_TIMEx_PWMN_Start_IT+0x1ae>
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	4a1a      	ldr	r2, [pc, #104]	; (80082f8 <HAL_TIMEx_PWMN_Start_IT+0x200>)
 800828e:	4293      	cmp	r3, r2
 8008290:	d009      	beq.n	80082a6 <HAL_TIMEx_PWMN_Start_IT+0x1ae>
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	4a19      	ldr	r2, [pc, #100]	; (80082fc <HAL_TIMEx_PWMN_Start_IT+0x204>)
 8008298:	4293      	cmp	r3, r2
 800829a:	d004      	beq.n	80082a6 <HAL_TIMEx_PWMN_Start_IT+0x1ae>
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	4a17      	ldr	r2, [pc, #92]	; (8008300 <HAL_TIMEx_PWMN_Start_IT+0x208>)
 80082a2:	4293      	cmp	r3, r2
 80082a4:	d115      	bne.n	80082d2 <HAL_TIMEx_PWMN_Start_IT+0x1da>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	689a      	ldr	r2, [r3, #8]
 80082ac:	4b15      	ldr	r3, [pc, #84]	; (8008304 <HAL_TIMEx_PWMN_Start_IT+0x20c>)
 80082ae:	4013      	ands	r3, r2
 80082b0:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80082b2:	68bb      	ldr	r3, [r7, #8]
 80082b4:	2b06      	cmp	r3, #6
 80082b6:	d015      	beq.n	80082e4 <HAL_TIMEx_PWMN_Start_IT+0x1ec>
 80082b8:	68bb      	ldr	r3, [r7, #8]
 80082ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80082be:	d011      	beq.n	80082e4 <HAL_TIMEx_PWMN_Start_IT+0x1ec>
      {
        __HAL_TIM_ENABLE(htim);
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	681a      	ldr	r2, [r3, #0]
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	f042 0201 	orr.w	r2, r2, #1
 80082ce:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80082d0:	e008      	b.n	80082e4 <HAL_TIMEx_PWMN_Start_IT+0x1ec>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	681a      	ldr	r2, [r3, #0]
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	f042 0201 	orr.w	r2, r2, #1
 80082e0:	601a      	str	r2, [r3, #0]
 80082e2:	e000      	b.n	80082e6 <HAL_TIMEx_PWMN_Start_IT+0x1ee>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80082e4:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 80082e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80082e8:	4618      	mov	r0, r3
 80082ea:	3710      	adds	r7, #16
 80082ec:	46bd      	mov	sp, r7
 80082ee:	bd80      	pop	{r7, pc}
 80082f0:	40012c00 	.word	0x40012c00
 80082f4:	40000400 	.word	0x40000400
 80082f8:	40000800 	.word	0x40000800
 80082fc:	40013400 	.word	0x40013400
 8008300:	40014000 	.word	0x40014000
 8008304:	00010007 	.word	0x00010007

08008308 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008308:	b480      	push	{r7}
 800830a:	b085      	sub	sp, #20
 800830c:	af00      	add	r7, sp, #0
 800830e:	6078      	str	r0, [r7, #4]
 8008310:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008318:	2b01      	cmp	r3, #1
 800831a:	d101      	bne.n	8008320 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800831c:	2302      	movs	r3, #2
 800831e:	e065      	b.n	80083ec <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	2201      	movs	r2, #1
 8008324:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	2202      	movs	r2, #2
 800832c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	685b      	ldr	r3, [r3, #4]
 8008336:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	689b      	ldr	r3, [r3, #8]
 800833e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	4a2c      	ldr	r2, [pc, #176]	; (80083f8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008346:	4293      	cmp	r3, r2
 8008348:	d004      	beq.n	8008354 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	4a2b      	ldr	r2, [pc, #172]	; (80083fc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8008350:	4293      	cmp	r3, r2
 8008352:	d108      	bne.n	8008366 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800835a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800835c:	683b      	ldr	r3, [r7, #0]
 800835e:	685b      	ldr	r3, [r3, #4]
 8008360:	68fa      	ldr	r2, [r7, #12]
 8008362:	4313      	orrs	r3, r2
 8008364:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800836c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008370:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008372:	683b      	ldr	r3, [r7, #0]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	68fa      	ldr	r2, [r7, #12]
 8008378:	4313      	orrs	r3, r2
 800837a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	68fa      	ldr	r2, [r7, #12]
 8008382:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	4a1b      	ldr	r2, [pc, #108]	; (80083f8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800838a:	4293      	cmp	r3, r2
 800838c:	d018      	beq.n	80083c0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008396:	d013      	beq.n	80083c0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	4a18      	ldr	r2, [pc, #96]	; (8008400 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800839e:	4293      	cmp	r3, r2
 80083a0:	d00e      	beq.n	80083c0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	4a17      	ldr	r2, [pc, #92]	; (8008404 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80083a8:	4293      	cmp	r3, r2
 80083aa:	d009      	beq.n	80083c0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	4a12      	ldr	r2, [pc, #72]	; (80083fc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80083b2:	4293      	cmp	r3, r2
 80083b4:	d004      	beq.n	80083c0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	4a13      	ldr	r2, [pc, #76]	; (8008408 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80083bc:	4293      	cmp	r3, r2
 80083be:	d10c      	bne.n	80083da <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80083c0:	68bb      	ldr	r3, [r7, #8]
 80083c2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80083c6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80083c8:	683b      	ldr	r3, [r7, #0]
 80083ca:	689b      	ldr	r3, [r3, #8]
 80083cc:	68ba      	ldr	r2, [r7, #8]
 80083ce:	4313      	orrs	r3, r2
 80083d0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	68ba      	ldr	r2, [r7, #8]
 80083d8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	2201      	movs	r2, #1
 80083de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	2200      	movs	r2, #0
 80083e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80083ea:	2300      	movs	r3, #0
}
 80083ec:	4618      	mov	r0, r3
 80083ee:	3714      	adds	r7, #20
 80083f0:	46bd      	mov	sp, r7
 80083f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083f6:	4770      	bx	lr
 80083f8:	40012c00 	.word	0x40012c00
 80083fc:	40013400 	.word	0x40013400
 8008400:	40000400 	.word	0x40000400
 8008404:	40000800 	.word	0x40000800
 8008408:	40014000 	.word	0x40014000

0800840c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800840c:	b480      	push	{r7}
 800840e:	b085      	sub	sp, #20
 8008410:	af00      	add	r7, sp, #0
 8008412:	6078      	str	r0, [r7, #4]
 8008414:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8008416:	2300      	movs	r3, #0
 8008418:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008420:	2b01      	cmp	r3, #1
 8008422:	d101      	bne.n	8008428 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008424:	2302      	movs	r3, #2
 8008426:	e087      	b.n	8008538 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	2201      	movs	r2, #1
 800842c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8008436:	683b      	ldr	r3, [r7, #0]
 8008438:	68db      	ldr	r3, [r3, #12]
 800843a:	4313      	orrs	r3, r2
 800843c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008444:	683b      	ldr	r3, [r7, #0]
 8008446:	689b      	ldr	r3, [r3, #8]
 8008448:	4313      	orrs	r3, r2
 800844a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8008452:	683b      	ldr	r3, [r7, #0]
 8008454:	685b      	ldr	r3, [r3, #4]
 8008456:	4313      	orrs	r3, r2
 8008458:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8008460:	683b      	ldr	r3, [r7, #0]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	4313      	orrs	r3, r2
 8008466:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800846e:	683b      	ldr	r3, [r7, #0]
 8008470:	691b      	ldr	r3, [r3, #16]
 8008472:	4313      	orrs	r3, r2
 8008474:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800847c:	683b      	ldr	r3, [r7, #0]
 800847e:	695b      	ldr	r3, [r3, #20]
 8008480:	4313      	orrs	r3, r2
 8008482:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800848a:	683b      	ldr	r3, [r7, #0]
 800848c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800848e:	4313      	orrs	r3, r2
 8008490:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8008498:	683b      	ldr	r3, [r7, #0]
 800849a:	699b      	ldr	r3, [r3, #24]
 800849c:	041b      	lsls	r3, r3, #16
 800849e:	4313      	orrs	r3, r2
 80084a0:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	4a27      	ldr	r2, [pc, #156]	; (8008544 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 80084a8:	4293      	cmp	r3, r2
 80084aa:	d004      	beq.n	80084b6 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	4a25      	ldr	r2, [pc, #148]	; (8008548 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 80084b2:	4293      	cmp	r3, r2
 80084b4:	d106      	bne.n	80084c4 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80084bc:	683b      	ldr	r3, [r7, #0]
 80084be:	69db      	ldr	r3, [r3, #28]
 80084c0:	4313      	orrs	r3, r2
 80084c2:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	4a1e      	ldr	r2, [pc, #120]	; (8008544 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 80084ca:	4293      	cmp	r3, r2
 80084cc:	d004      	beq.n	80084d8 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	4a1d      	ldr	r2, [pc, #116]	; (8008548 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 80084d4:	4293      	cmp	r3, r2
 80084d6:	d126      	bne.n	8008526 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80084de:	683b      	ldr	r3, [r7, #0]
 80084e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084e2:	051b      	lsls	r3, r3, #20
 80084e4:	4313      	orrs	r3, r2
 80084e6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80084ee:	683b      	ldr	r3, [r7, #0]
 80084f0:	6a1b      	ldr	r3, [r3, #32]
 80084f2:	4313      	orrs	r3, r2
 80084f4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80084fc:	683b      	ldr	r3, [r7, #0]
 80084fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008500:	4313      	orrs	r3, r2
 8008502:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	4a0e      	ldr	r2, [pc, #56]	; (8008544 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800850a:	4293      	cmp	r3, r2
 800850c:	d004      	beq.n	8008518 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	4a0d      	ldr	r2, [pc, #52]	; (8008548 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8008514:	4293      	cmp	r3, r2
 8008516:	d106      	bne.n	8008526 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800851e:	683b      	ldr	r3, [r7, #0]
 8008520:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008522:	4313      	orrs	r3, r2
 8008524:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	68fa      	ldr	r2, [r7, #12]
 800852c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	2200      	movs	r2, #0
 8008532:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008536:	2300      	movs	r3, #0
}
 8008538:	4618      	mov	r0, r3
 800853a:	3714      	adds	r7, #20
 800853c:	46bd      	mov	sp, r7
 800853e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008542:	4770      	bx	lr
 8008544:	40012c00 	.word	0x40012c00
 8008548:	40013400 	.word	0x40013400

0800854c <HAL_TIMEx_EnableDeadTimePreload>:
  * @brief  Enable deadtime preload
  * @param  htim TIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_EnableDeadTimePreload(TIM_HandleTypeDef *htim)
{
 800854c:	b480      	push	{r7}
 800854e:	b083      	sub	sp, #12
 8008550:	af00      	add	r7, sp, #0
 8008552:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_BREAK_INSTANCE(htim->Instance));

  SET_BIT(htim->Instance->DTR2, TIM_DTR2_DTPE);
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8008562:	655a      	str	r2, [r3, #84]	; 0x54
  return HAL_OK;
 8008564:	2300      	movs	r3, #0
}
 8008566:	4618      	mov	r0, r3
 8008568:	370c      	adds	r7, #12
 800856a:	46bd      	mov	sp, r7
 800856c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008570:	4770      	bx	lr

08008572 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008572:	b480      	push	{r7}
 8008574:	b083      	sub	sp, #12
 8008576:	af00      	add	r7, sp, #0
 8008578:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800857a:	bf00      	nop
 800857c:	370c      	adds	r7, #12
 800857e:	46bd      	mov	sp, r7
 8008580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008584:	4770      	bx	lr

08008586 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008586:	b480      	push	{r7}
 8008588:	b083      	sub	sp, #12
 800858a:	af00      	add	r7, sp, #0
 800858c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800858e:	bf00      	nop
 8008590:	370c      	adds	r7, #12
 8008592:	46bd      	mov	sp, r7
 8008594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008598:	4770      	bx	lr

0800859a <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800859a:	b480      	push	{r7}
 800859c:	b083      	sub	sp, #12
 800859e:	af00      	add	r7, sp, #0
 80085a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80085a2:	bf00      	nop
 80085a4:	370c      	adds	r7, #12
 80085a6:	46bd      	mov	sp, r7
 80085a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ac:	4770      	bx	lr

080085ae <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 80085ae:	b480      	push	{r7}
 80085b0:	b083      	sub	sp, #12
 80085b2:	af00      	add	r7, sp, #0
 80085b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 80085b6:	bf00      	nop
 80085b8:	370c      	adds	r7, #12
 80085ba:	46bd      	mov	sp, r7
 80085bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085c0:	4770      	bx	lr

080085c2 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 80085c2:	b480      	push	{r7}
 80085c4:	b083      	sub	sp, #12
 80085c6:	af00      	add	r7, sp, #0
 80085c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 80085ca:	bf00      	nop
 80085cc:	370c      	adds	r7, #12
 80085ce:	46bd      	mov	sp, r7
 80085d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085d4:	4770      	bx	lr

080085d6 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 80085d6:	b480      	push	{r7}
 80085d8:	b083      	sub	sp, #12
 80085da:	af00      	add	r7, sp, #0
 80085dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 80085de:	bf00      	nop
 80085e0:	370c      	adds	r7, #12
 80085e2:	46bd      	mov	sp, r7
 80085e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085e8:	4770      	bx	lr

080085ea <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 80085ea:	b480      	push	{r7}
 80085ec:	b083      	sub	sp, #12
 80085ee:	af00      	add	r7, sp, #0
 80085f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 80085f2:	bf00      	nop
 80085f4:	370c      	adds	r7, #12
 80085f6:	46bd      	mov	sp, r7
 80085f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085fc:	4770      	bx	lr

080085fe <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 80085fe:	b480      	push	{r7}
 8008600:	b087      	sub	sp, #28
 8008602:	af00      	add	r7, sp, #0
 8008604:	60f8      	str	r0, [r7, #12]
 8008606:	60b9      	str	r1, [r7, #8]
 8008608:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800860a:	68bb      	ldr	r3, [r7, #8]
 800860c:	f003 031f 	and.w	r3, r3, #31
 8008610:	2204      	movs	r2, #4
 8008612:	fa02 f303 	lsl.w	r3, r2, r3
 8008616:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	6a1a      	ldr	r2, [r3, #32]
 800861c:	697b      	ldr	r3, [r7, #20]
 800861e:	43db      	mvns	r3, r3
 8008620:	401a      	ands	r2, r3
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	6a1a      	ldr	r2, [r3, #32]
 800862a:	68bb      	ldr	r3, [r7, #8]
 800862c:	f003 031f 	and.w	r3, r3, #31
 8008630:	6879      	ldr	r1, [r7, #4]
 8008632:	fa01 f303 	lsl.w	r3, r1, r3
 8008636:	431a      	orrs	r2, r3
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	621a      	str	r2, [r3, #32]
}
 800863c:	bf00      	nop
 800863e:	371c      	adds	r7, #28
 8008640:	46bd      	mov	sp, r7
 8008642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008646:	4770      	bx	lr

08008648 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008648:	b580      	push	{r7, lr}
 800864a:	b082      	sub	sp, #8
 800864c:	af00      	add	r7, sp, #0
 800864e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	2b00      	cmp	r3, #0
 8008654:	d101      	bne.n	800865a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008656:	2301      	movs	r3, #1
 8008658:	e042      	b.n	80086e0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008660:	2b00      	cmp	r3, #0
 8008662:	d106      	bne.n	8008672 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	2200      	movs	r2, #0
 8008668:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800866c:	6878      	ldr	r0, [r7, #4]
 800866e:	f7f9 fc93 	bl	8001f98 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	2224      	movs	r2, #36	; 0x24
 8008676:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	681a      	ldr	r2, [r3, #0]
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	f022 0201 	bic.w	r2, r2, #1
 8008688:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800868a:	6878      	ldr	r0, [r7, #4]
 800868c:	f000 f82c 	bl	80086e8 <UART_SetConfig>
 8008690:	4603      	mov	r3, r0
 8008692:	2b01      	cmp	r3, #1
 8008694:	d101      	bne.n	800869a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8008696:	2301      	movs	r3, #1
 8008698:	e022      	b.n	80086e0 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d002      	beq.n	80086a8 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80086a2:	6878      	ldr	r0, [r7, #4]
 80086a4:	f000 faec 	bl	8008c80 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	685a      	ldr	r2, [r3, #4]
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80086b6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	689a      	ldr	r2, [r3, #8]
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80086c6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	681a      	ldr	r2, [r3, #0]
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	f042 0201 	orr.w	r2, r2, #1
 80086d6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80086d8:	6878      	ldr	r0, [r7, #4]
 80086da:	f000 fb73 	bl	8008dc4 <UART_CheckIdleState>
 80086de:	4603      	mov	r3, r0
}
 80086e0:	4618      	mov	r0, r3
 80086e2:	3708      	adds	r7, #8
 80086e4:	46bd      	mov	sp, r7
 80086e6:	bd80      	pop	{r7, pc}

080086e8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80086e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80086ec:	b08c      	sub	sp, #48	; 0x30
 80086ee:	af00      	add	r7, sp, #0
 80086f0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80086f2:	2300      	movs	r3, #0
 80086f4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80086f8:	697b      	ldr	r3, [r7, #20]
 80086fa:	689a      	ldr	r2, [r3, #8]
 80086fc:	697b      	ldr	r3, [r7, #20]
 80086fe:	691b      	ldr	r3, [r3, #16]
 8008700:	431a      	orrs	r2, r3
 8008702:	697b      	ldr	r3, [r7, #20]
 8008704:	695b      	ldr	r3, [r3, #20]
 8008706:	431a      	orrs	r2, r3
 8008708:	697b      	ldr	r3, [r7, #20]
 800870a:	69db      	ldr	r3, [r3, #28]
 800870c:	4313      	orrs	r3, r2
 800870e:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008710:	697b      	ldr	r3, [r7, #20]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	681a      	ldr	r2, [r3, #0]
 8008716:	4bab      	ldr	r3, [pc, #684]	; (80089c4 <UART_SetConfig+0x2dc>)
 8008718:	4013      	ands	r3, r2
 800871a:	697a      	ldr	r2, [r7, #20]
 800871c:	6812      	ldr	r2, [r2, #0]
 800871e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008720:	430b      	orrs	r3, r1
 8008722:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008724:	697b      	ldr	r3, [r7, #20]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	685b      	ldr	r3, [r3, #4]
 800872a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800872e:	697b      	ldr	r3, [r7, #20]
 8008730:	68da      	ldr	r2, [r3, #12]
 8008732:	697b      	ldr	r3, [r7, #20]
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	430a      	orrs	r2, r1
 8008738:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800873a:	697b      	ldr	r3, [r7, #20]
 800873c:	699b      	ldr	r3, [r3, #24]
 800873e:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008740:	697b      	ldr	r3, [r7, #20]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	4aa0      	ldr	r2, [pc, #640]	; (80089c8 <UART_SetConfig+0x2e0>)
 8008746:	4293      	cmp	r3, r2
 8008748:	d004      	beq.n	8008754 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800874a:	697b      	ldr	r3, [r7, #20]
 800874c:	6a1b      	ldr	r3, [r3, #32]
 800874e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008750:	4313      	orrs	r3, r2
 8008752:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008754:	697b      	ldr	r3, [r7, #20]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	689b      	ldr	r3, [r3, #8]
 800875a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800875e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8008762:	697a      	ldr	r2, [r7, #20]
 8008764:	6812      	ldr	r2, [r2, #0]
 8008766:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008768:	430b      	orrs	r3, r1
 800876a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800876c:	697b      	ldr	r3, [r7, #20]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008772:	f023 010f 	bic.w	r1, r3, #15
 8008776:	697b      	ldr	r3, [r7, #20]
 8008778:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800877a:	697b      	ldr	r3, [r7, #20]
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	430a      	orrs	r2, r1
 8008780:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008782:	697b      	ldr	r3, [r7, #20]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	4a91      	ldr	r2, [pc, #580]	; (80089cc <UART_SetConfig+0x2e4>)
 8008788:	4293      	cmp	r3, r2
 800878a:	d125      	bne.n	80087d8 <UART_SetConfig+0xf0>
 800878c:	4b90      	ldr	r3, [pc, #576]	; (80089d0 <UART_SetConfig+0x2e8>)
 800878e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008792:	f003 0303 	and.w	r3, r3, #3
 8008796:	2b03      	cmp	r3, #3
 8008798:	d81a      	bhi.n	80087d0 <UART_SetConfig+0xe8>
 800879a:	a201      	add	r2, pc, #4	; (adr r2, 80087a0 <UART_SetConfig+0xb8>)
 800879c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087a0:	080087b1 	.word	0x080087b1
 80087a4:	080087c1 	.word	0x080087c1
 80087a8:	080087b9 	.word	0x080087b9
 80087ac:	080087c9 	.word	0x080087c9
 80087b0:	2301      	movs	r3, #1
 80087b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80087b6:	e0d6      	b.n	8008966 <UART_SetConfig+0x27e>
 80087b8:	2302      	movs	r3, #2
 80087ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80087be:	e0d2      	b.n	8008966 <UART_SetConfig+0x27e>
 80087c0:	2304      	movs	r3, #4
 80087c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80087c6:	e0ce      	b.n	8008966 <UART_SetConfig+0x27e>
 80087c8:	2308      	movs	r3, #8
 80087ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80087ce:	e0ca      	b.n	8008966 <UART_SetConfig+0x27e>
 80087d0:	2310      	movs	r3, #16
 80087d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80087d6:	e0c6      	b.n	8008966 <UART_SetConfig+0x27e>
 80087d8:	697b      	ldr	r3, [r7, #20]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	4a7d      	ldr	r2, [pc, #500]	; (80089d4 <UART_SetConfig+0x2ec>)
 80087de:	4293      	cmp	r3, r2
 80087e0:	d138      	bne.n	8008854 <UART_SetConfig+0x16c>
 80087e2:	4b7b      	ldr	r3, [pc, #492]	; (80089d0 <UART_SetConfig+0x2e8>)
 80087e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80087e8:	f003 030c 	and.w	r3, r3, #12
 80087ec:	2b0c      	cmp	r3, #12
 80087ee:	d82d      	bhi.n	800884c <UART_SetConfig+0x164>
 80087f0:	a201      	add	r2, pc, #4	; (adr r2, 80087f8 <UART_SetConfig+0x110>)
 80087f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087f6:	bf00      	nop
 80087f8:	0800882d 	.word	0x0800882d
 80087fc:	0800884d 	.word	0x0800884d
 8008800:	0800884d 	.word	0x0800884d
 8008804:	0800884d 	.word	0x0800884d
 8008808:	0800883d 	.word	0x0800883d
 800880c:	0800884d 	.word	0x0800884d
 8008810:	0800884d 	.word	0x0800884d
 8008814:	0800884d 	.word	0x0800884d
 8008818:	08008835 	.word	0x08008835
 800881c:	0800884d 	.word	0x0800884d
 8008820:	0800884d 	.word	0x0800884d
 8008824:	0800884d 	.word	0x0800884d
 8008828:	08008845 	.word	0x08008845
 800882c:	2300      	movs	r3, #0
 800882e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008832:	e098      	b.n	8008966 <UART_SetConfig+0x27e>
 8008834:	2302      	movs	r3, #2
 8008836:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800883a:	e094      	b.n	8008966 <UART_SetConfig+0x27e>
 800883c:	2304      	movs	r3, #4
 800883e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008842:	e090      	b.n	8008966 <UART_SetConfig+0x27e>
 8008844:	2308      	movs	r3, #8
 8008846:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800884a:	e08c      	b.n	8008966 <UART_SetConfig+0x27e>
 800884c:	2310      	movs	r3, #16
 800884e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008852:	e088      	b.n	8008966 <UART_SetConfig+0x27e>
 8008854:	697b      	ldr	r3, [r7, #20]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	4a5f      	ldr	r2, [pc, #380]	; (80089d8 <UART_SetConfig+0x2f0>)
 800885a:	4293      	cmp	r3, r2
 800885c:	d125      	bne.n	80088aa <UART_SetConfig+0x1c2>
 800885e:	4b5c      	ldr	r3, [pc, #368]	; (80089d0 <UART_SetConfig+0x2e8>)
 8008860:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008864:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8008868:	2b30      	cmp	r3, #48	; 0x30
 800886a:	d016      	beq.n	800889a <UART_SetConfig+0x1b2>
 800886c:	2b30      	cmp	r3, #48	; 0x30
 800886e:	d818      	bhi.n	80088a2 <UART_SetConfig+0x1ba>
 8008870:	2b20      	cmp	r3, #32
 8008872:	d00a      	beq.n	800888a <UART_SetConfig+0x1a2>
 8008874:	2b20      	cmp	r3, #32
 8008876:	d814      	bhi.n	80088a2 <UART_SetConfig+0x1ba>
 8008878:	2b00      	cmp	r3, #0
 800887a:	d002      	beq.n	8008882 <UART_SetConfig+0x19a>
 800887c:	2b10      	cmp	r3, #16
 800887e:	d008      	beq.n	8008892 <UART_SetConfig+0x1aa>
 8008880:	e00f      	b.n	80088a2 <UART_SetConfig+0x1ba>
 8008882:	2300      	movs	r3, #0
 8008884:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008888:	e06d      	b.n	8008966 <UART_SetConfig+0x27e>
 800888a:	2302      	movs	r3, #2
 800888c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008890:	e069      	b.n	8008966 <UART_SetConfig+0x27e>
 8008892:	2304      	movs	r3, #4
 8008894:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008898:	e065      	b.n	8008966 <UART_SetConfig+0x27e>
 800889a:	2308      	movs	r3, #8
 800889c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80088a0:	e061      	b.n	8008966 <UART_SetConfig+0x27e>
 80088a2:	2310      	movs	r3, #16
 80088a4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80088a8:	e05d      	b.n	8008966 <UART_SetConfig+0x27e>
 80088aa:	697b      	ldr	r3, [r7, #20]
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	4a4b      	ldr	r2, [pc, #300]	; (80089dc <UART_SetConfig+0x2f4>)
 80088b0:	4293      	cmp	r3, r2
 80088b2:	d125      	bne.n	8008900 <UART_SetConfig+0x218>
 80088b4:	4b46      	ldr	r3, [pc, #280]	; (80089d0 <UART_SetConfig+0x2e8>)
 80088b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80088ba:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80088be:	2bc0      	cmp	r3, #192	; 0xc0
 80088c0:	d016      	beq.n	80088f0 <UART_SetConfig+0x208>
 80088c2:	2bc0      	cmp	r3, #192	; 0xc0
 80088c4:	d818      	bhi.n	80088f8 <UART_SetConfig+0x210>
 80088c6:	2b80      	cmp	r3, #128	; 0x80
 80088c8:	d00a      	beq.n	80088e0 <UART_SetConfig+0x1f8>
 80088ca:	2b80      	cmp	r3, #128	; 0x80
 80088cc:	d814      	bhi.n	80088f8 <UART_SetConfig+0x210>
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d002      	beq.n	80088d8 <UART_SetConfig+0x1f0>
 80088d2:	2b40      	cmp	r3, #64	; 0x40
 80088d4:	d008      	beq.n	80088e8 <UART_SetConfig+0x200>
 80088d6:	e00f      	b.n	80088f8 <UART_SetConfig+0x210>
 80088d8:	2300      	movs	r3, #0
 80088da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80088de:	e042      	b.n	8008966 <UART_SetConfig+0x27e>
 80088e0:	2302      	movs	r3, #2
 80088e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80088e6:	e03e      	b.n	8008966 <UART_SetConfig+0x27e>
 80088e8:	2304      	movs	r3, #4
 80088ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80088ee:	e03a      	b.n	8008966 <UART_SetConfig+0x27e>
 80088f0:	2308      	movs	r3, #8
 80088f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80088f6:	e036      	b.n	8008966 <UART_SetConfig+0x27e>
 80088f8:	2310      	movs	r3, #16
 80088fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80088fe:	e032      	b.n	8008966 <UART_SetConfig+0x27e>
 8008900:	697b      	ldr	r3, [r7, #20]
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	4a30      	ldr	r2, [pc, #192]	; (80089c8 <UART_SetConfig+0x2e0>)
 8008906:	4293      	cmp	r3, r2
 8008908:	d12a      	bne.n	8008960 <UART_SetConfig+0x278>
 800890a:	4b31      	ldr	r3, [pc, #196]	; (80089d0 <UART_SetConfig+0x2e8>)
 800890c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008910:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8008914:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008918:	d01a      	beq.n	8008950 <UART_SetConfig+0x268>
 800891a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800891e:	d81b      	bhi.n	8008958 <UART_SetConfig+0x270>
 8008920:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008924:	d00c      	beq.n	8008940 <UART_SetConfig+0x258>
 8008926:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800892a:	d815      	bhi.n	8008958 <UART_SetConfig+0x270>
 800892c:	2b00      	cmp	r3, #0
 800892e:	d003      	beq.n	8008938 <UART_SetConfig+0x250>
 8008930:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008934:	d008      	beq.n	8008948 <UART_SetConfig+0x260>
 8008936:	e00f      	b.n	8008958 <UART_SetConfig+0x270>
 8008938:	2300      	movs	r3, #0
 800893a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800893e:	e012      	b.n	8008966 <UART_SetConfig+0x27e>
 8008940:	2302      	movs	r3, #2
 8008942:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008946:	e00e      	b.n	8008966 <UART_SetConfig+0x27e>
 8008948:	2304      	movs	r3, #4
 800894a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800894e:	e00a      	b.n	8008966 <UART_SetConfig+0x27e>
 8008950:	2308      	movs	r3, #8
 8008952:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008956:	e006      	b.n	8008966 <UART_SetConfig+0x27e>
 8008958:	2310      	movs	r3, #16
 800895a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800895e:	e002      	b.n	8008966 <UART_SetConfig+0x27e>
 8008960:	2310      	movs	r3, #16
 8008962:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008966:	697b      	ldr	r3, [r7, #20]
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	4a17      	ldr	r2, [pc, #92]	; (80089c8 <UART_SetConfig+0x2e0>)
 800896c:	4293      	cmp	r3, r2
 800896e:	f040 80a8 	bne.w	8008ac2 <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008972:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008976:	2b08      	cmp	r3, #8
 8008978:	d834      	bhi.n	80089e4 <UART_SetConfig+0x2fc>
 800897a:	a201      	add	r2, pc, #4	; (adr r2, 8008980 <UART_SetConfig+0x298>)
 800897c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008980:	080089a5 	.word	0x080089a5
 8008984:	080089e5 	.word	0x080089e5
 8008988:	080089ad 	.word	0x080089ad
 800898c:	080089e5 	.word	0x080089e5
 8008990:	080089b3 	.word	0x080089b3
 8008994:	080089e5 	.word	0x080089e5
 8008998:	080089e5 	.word	0x080089e5
 800899c:	080089e5 	.word	0x080089e5
 80089a0:	080089bb 	.word	0x080089bb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80089a4:	f7fd f998 	bl	8005cd8 <HAL_RCC_GetPCLK1Freq>
 80089a8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80089aa:	e021      	b.n	80089f0 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80089ac:	4b0c      	ldr	r3, [pc, #48]	; (80089e0 <UART_SetConfig+0x2f8>)
 80089ae:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80089b0:	e01e      	b.n	80089f0 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80089b2:	f7fd f925 	bl	8005c00 <HAL_RCC_GetSysClockFreq>
 80089b6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80089b8:	e01a      	b.n	80089f0 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80089ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80089be:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80089c0:	e016      	b.n	80089f0 <UART_SetConfig+0x308>
 80089c2:	bf00      	nop
 80089c4:	cfff69f3 	.word	0xcfff69f3
 80089c8:	40008000 	.word	0x40008000
 80089cc:	40013800 	.word	0x40013800
 80089d0:	40021000 	.word	0x40021000
 80089d4:	40004400 	.word	0x40004400
 80089d8:	40004800 	.word	0x40004800
 80089dc:	40004c00 	.word	0x40004c00
 80089e0:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 80089e4:	2300      	movs	r3, #0
 80089e6:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80089e8:	2301      	movs	r3, #1
 80089ea:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80089ee:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80089f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	f000 812a 	beq.w	8008c4c <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80089f8:	697b      	ldr	r3, [r7, #20]
 80089fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089fc:	4a9e      	ldr	r2, [pc, #632]	; (8008c78 <UART_SetConfig+0x590>)
 80089fe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008a02:	461a      	mov	r2, r3
 8008a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a06:	fbb3 f3f2 	udiv	r3, r3, r2
 8008a0a:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008a0c:	697b      	ldr	r3, [r7, #20]
 8008a0e:	685a      	ldr	r2, [r3, #4]
 8008a10:	4613      	mov	r3, r2
 8008a12:	005b      	lsls	r3, r3, #1
 8008a14:	4413      	add	r3, r2
 8008a16:	69ba      	ldr	r2, [r7, #24]
 8008a18:	429a      	cmp	r2, r3
 8008a1a:	d305      	bcc.n	8008a28 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008a1c:	697b      	ldr	r3, [r7, #20]
 8008a1e:	685b      	ldr	r3, [r3, #4]
 8008a20:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008a22:	69ba      	ldr	r2, [r7, #24]
 8008a24:	429a      	cmp	r2, r3
 8008a26:	d903      	bls.n	8008a30 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8008a28:	2301      	movs	r3, #1
 8008a2a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8008a2e:	e10d      	b.n	8008c4c <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a32:	2200      	movs	r2, #0
 8008a34:	60bb      	str	r3, [r7, #8]
 8008a36:	60fa      	str	r2, [r7, #12]
 8008a38:	697b      	ldr	r3, [r7, #20]
 8008a3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a3c:	4a8e      	ldr	r2, [pc, #568]	; (8008c78 <UART_SetConfig+0x590>)
 8008a3e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008a42:	b29b      	uxth	r3, r3
 8008a44:	2200      	movs	r2, #0
 8008a46:	603b      	str	r3, [r7, #0]
 8008a48:	607a      	str	r2, [r7, #4]
 8008a4a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008a4e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008a52:	f7f7 ffcf 	bl	80009f4 <__aeabi_uldivmod>
 8008a56:	4602      	mov	r2, r0
 8008a58:	460b      	mov	r3, r1
 8008a5a:	4610      	mov	r0, r2
 8008a5c:	4619      	mov	r1, r3
 8008a5e:	f04f 0200 	mov.w	r2, #0
 8008a62:	f04f 0300 	mov.w	r3, #0
 8008a66:	020b      	lsls	r3, r1, #8
 8008a68:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008a6c:	0202      	lsls	r2, r0, #8
 8008a6e:	6979      	ldr	r1, [r7, #20]
 8008a70:	6849      	ldr	r1, [r1, #4]
 8008a72:	0849      	lsrs	r1, r1, #1
 8008a74:	2000      	movs	r0, #0
 8008a76:	460c      	mov	r4, r1
 8008a78:	4605      	mov	r5, r0
 8008a7a:	eb12 0804 	adds.w	r8, r2, r4
 8008a7e:	eb43 0905 	adc.w	r9, r3, r5
 8008a82:	697b      	ldr	r3, [r7, #20]
 8008a84:	685b      	ldr	r3, [r3, #4]
 8008a86:	2200      	movs	r2, #0
 8008a88:	469a      	mov	sl, r3
 8008a8a:	4693      	mov	fp, r2
 8008a8c:	4652      	mov	r2, sl
 8008a8e:	465b      	mov	r3, fp
 8008a90:	4640      	mov	r0, r8
 8008a92:	4649      	mov	r1, r9
 8008a94:	f7f7 ffae 	bl	80009f4 <__aeabi_uldivmod>
 8008a98:	4602      	mov	r2, r0
 8008a9a:	460b      	mov	r3, r1
 8008a9c:	4613      	mov	r3, r2
 8008a9e:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008aa0:	6a3b      	ldr	r3, [r7, #32]
 8008aa2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008aa6:	d308      	bcc.n	8008aba <UART_SetConfig+0x3d2>
 8008aa8:	6a3b      	ldr	r3, [r7, #32]
 8008aaa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008aae:	d204      	bcs.n	8008aba <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8008ab0:	697b      	ldr	r3, [r7, #20]
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	6a3a      	ldr	r2, [r7, #32]
 8008ab6:	60da      	str	r2, [r3, #12]
 8008ab8:	e0c8      	b.n	8008c4c <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8008aba:	2301      	movs	r3, #1
 8008abc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8008ac0:	e0c4      	b.n	8008c4c <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008ac2:	697b      	ldr	r3, [r7, #20]
 8008ac4:	69db      	ldr	r3, [r3, #28]
 8008ac6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008aca:	d167      	bne.n	8008b9c <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8008acc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008ad0:	2b08      	cmp	r3, #8
 8008ad2:	d828      	bhi.n	8008b26 <UART_SetConfig+0x43e>
 8008ad4:	a201      	add	r2, pc, #4	; (adr r2, 8008adc <UART_SetConfig+0x3f4>)
 8008ad6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ada:	bf00      	nop
 8008adc:	08008b01 	.word	0x08008b01
 8008ae0:	08008b09 	.word	0x08008b09
 8008ae4:	08008b11 	.word	0x08008b11
 8008ae8:	08008b27 	.word	0x08008b27
 8008aec:	08008b17 	.word	0x08008b17
 8008af0:	08008b27 	.word	0x08008b27
 8008af4:	08008b27 	.word	0x08008b27
 8008af8:	08008b27 	.word	0x08008b27
 8008afc:	08008b1f 	.word	0x08008b1f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008b00:	f7fd f8ea 	bl	8005cd8 <HAL_RCC_GetPCLK1Freq>
 8008b04:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008b06:	e014      	b.n	8008b32 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008b08:	f7fd f8fc 	bl	8005d04 <HAL_RCC_GetPCLK2Freq>
 8008b0c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008b0e:	e010      	b.n	8008b32 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008b10:	4b5a      	ldr	r3, [pc, #360]	; (8008c7c <UART_SetConfig+0x594>)
 8008b12:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008b14:	e00d      	b.n	8008b32 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008b16:	f7fd f873 	bl	8005c00 <HAL_RCC_GetSysClockFreq>
 8008b1a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008b1c:	e009      	b.n	8008b32 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008b1e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008b22:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008b24:	e005      	b.n	8008b32 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 8008b26:	2300      	movs	r3, #0
 8008b28:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8008b2a:	2301      	movs	r3, #1
 8008b2c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8008b30:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	f000 8089 	beq.w	8008c4c <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008b3a:	697b      	ldr	r3, [r7, #20]
 8008b3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b3e:	4a4e      	ldr	r2, [pc, #312]	; (8008c78 <UART_SetConfig+0x590>)
 8008b40:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008b44:	461a      	mov	r2, r3
 8008b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b48:	fbb3 f3f2 	udiv	r3, r3, r2
 8008b4c:	005a      	lsls	r2, r3, #1
 8008b4e:	697b      	ldr	r3, [r7, #20]
 8008b50:	685b      	ldr	r3, [r3, #4]
 8008b52:	085b      	lsrs	r3, r3, #1
 8008b54:	441a      	add	r2, r3
 8008b56:	697b      	ldr	r3, [r7, #20]
 8008b58:	685b      	ldr	r3, [r3, #4]
 8008b5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b5e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008b60:	6a3b      	ldr	r3, [r7, #32]
 8008b62:	2b0f      	cmp	r3, #15
 8008b64:	d916      	bls.n	8008b94 <UART_SetConfig+0x4ac>
 8008b66:	6a3b      	ldr	r3, [r7, #32]
 8008b68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008b6c:	d212      	bcs.n	8008b94 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008b6e:	6a3b      	ldr	r3, [r7, #32]
 8008b70:	b29b      	uxth	r3, r3
 8008b72:	f023 030f 	bic.w	r3, r3, #15
 8008b76:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008b78:	6a3b      	ldr	r3, [r7, #32]
 8008b7a:	085b      	lsrs	r3, r3, #1
 8008b7c:	b29b      	uxth	r3, r3
 8008b7e:	f003 0307 	and.w	r3, r3, #7
 8008b82:	b29a      	uxth	r2, r3
 8008b84:	8bfb      	ldrh	r3, [r7, #30]
 8008b86:	4313      	orrs	r3, r2
 8008b88:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8008b8a:	697b      	ldr	r3, [r7, #20]
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	8bfa      	ldrh	r2, [r7, #30]
 8008b90:	60da      	str	r2, [r3, #12]
 8008b92:	e05b      	b.n	8008c4c <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8008b94:	2301      	movs	r3, #1
 8008b96:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8008b9a:	e057      	b.n	8008c4c <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008b9c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008ba0:	2b08      	cmp	r3, #8
 8008ba2:	d828      	bhi.n	8008bf6 <UART_SetConfig+0x50e>
 8008ba4:	a201      	add	r2, pc, #4	; (adr r2, 8008bac <UART_SetConfig+0x4c4>)
 8008ba6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008baa:	bf00      	nop
 8008bac:	08008bd1 	.word	0x08008bd1
 8008bb0:	08008bd9 	.word	0x08008bd9
 8008bb4:	08008be1 	.word	0x08008be1
 8008bb8:	08008bf7 	.word	0x08008bf7
 8008bbc:	08008be7 	.word	0x08008be7
 8008bc0:	08008bf7 	.word	0x08008bf7
 8008bc4:	08008bf7 	.word	0x08008bf7
 8008bc8:	08008bf7 	.word	0x08008bf7
 8008bcc:	08008bef 	.word	0x08008bef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008bd0:	f7fd f882 	bl	8005cd8 <HAL_RCC_GetPCLK1Freq>
 8008bd4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008bd6:	e014      	b.n	8008c02 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008bd8:	f7fd f894 	bl	8005d04 <HAL_RCC_GetPCLK2Freq>
 8008bdc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008bde:	e010      	b.n	8008c02 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008be0:	4b26      	ldr	r3, [pc, #152]	; (8008c7c <UART_SetConfig+0x594>)
 8008be2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008be4:	e00d      	b.n	8008c02 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008be6:	f7fd f80b 	bl	8005c00 <HAL_RCC_GetSysClockFreq>
 8008bea:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008bec:	e009      	b.n	8008c02 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008bee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008bf2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008bf4:	e005      	b.n	8008c02 <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 8008bf6:	2300      	movs	r3, #0
 8008bf8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8008bfa:	2301      	movs	r3, #1
 8008bfc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8008c00:	bf00      	nop
    }

    if (pclk != 0U)
 8008c02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	d021      	beq.n	8008c4c <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008c08:	697b      	ldr	r3, [r7, #20]
 8008c0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c0c:	4a1a      	ldr	r2, [pc, #104]	; (8008c78 <UART_SetConfig+0x590>)
 8008c0e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008c12:	461a      	mov	r2, r3
 8008c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c16:	fbb3 f2f2 	udiv	r2, r3, r2
 8008c1a:	697b      	ldr	r3, [r7, #20]
 8008c1c:	685b      	ldr	r3, [r3, #4]
 8008c1e:	085b      	lsrs	r3, r3, #1
 8008c20:	441a      	add	r2, r3
 8008c22:	697b      	ldr	r3, [r7, #20]
 8008c24:	685b      	ldr	r3, [r3, #4]
 8008c26:	fbb2 f3f3 	udiv	r3, r2, r3
 8008c2a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008c2c:	6a3b      	ldr	r3, [r7, #32]
 8008c2e:	2b0f      	cmp	r3, #15
 8008c30:	d909      	bls.n	8008c46 <UART_SetConfig+0x55e>
 8008c32:	6a3b      	ldr	r3, [r7, #32]
 8008c34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008c38:	d205      	bcs.n	8008c46 <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008c3a:	6a3b      	ldr	r3, [r7, #32]
 8008c3c:	b29a      	uxth	r2, r3
 8008c3e:	697b      	ldr	r3, [r7, #20]
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	60da      	str	r2, [r3, #12]
 8008c44:	e002      	b.n	8008c4c <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8008c46:	2301      	movs	r3, #1
 8008c48:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008c4c:	697b      	ldr	r3, [r7, #20]
 8008c4e:	2201      	movs	r2, #1
 8008c50:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8008c54:	697b      	ldr	r3, [r7, #20]
 8008c56:	2201      	movs	r2, #1
 8008c58:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008c5c:	697b      	ldr	r3, [r7, #20]
 8008c5e:	2200      	movs	r2, #0
 8008c60:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8008c62:	697b      	ldr	r3, [r7, #20]
 8008c64:	2200      	movs	r2, #0
 8008c66:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8008c68:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8008c6c:	4618      	mov	r0, r3
 8008c6e:	3730      	adds	r7, #48	; 0x30
 8008c70:	46bd      	mov	sp, r7
 8008c72:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008c76:	bf00      	nop
 8008c78:	08009278 	.word	0x08009278
 8008c7c:	00f42400 	.word	0x00f42400

08008c80 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008c80:	b480      	push	{r7}
 8008c82:	b083      	sub	sp, #12
 8008c84:	af00      	add	r7, sp, #0
 8008c86:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c8c:	f003 0301 	and.w	r3, r3, #1
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d00a      	beq.n	8008caa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	685b      	ldr	r3, [r3, #4]
 8008c9a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	430a      	orrs	r2, r1
 8008ca8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008cae:	f003 0302 	and.w	r3, r3, #2
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d00a      	beq.n	8008ccc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	685b      	ldr	r3, [r3, #4]
 8008cbc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	430a      	orrs	r2, r1
 8008cca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008cd0:	f003 0304 	and.w	r3, r3, #4
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d00a      	beq.n	8008cee <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	685b      	ldr	r3, [r3, #4]
 8008cde:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	430a      	orrs	r2, r1
 8008cec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008cf2:	f003 0308 	and.w	r3, r3, #8
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d00a      	beq.n	8008d10 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	685b      	ldr	r3, [r3, #4]
 8008d00:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	430a      	orrs	r2, r1
 8008d0e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d14:	f003 0310 	and.w	r3, r3, #16
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d00a      	beq.n	8008d32 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	689b      	ldr	r3, [r3, #8]
 8008d22:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	430a      	orrs	r2, r1
 8008d30:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d36:	f003 0320 	and.w	r3, r3, #32
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d00a      	beq.n	8008d54 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	689b      	ldr	r3, [r3, #8]
 8008d44:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	430a      	orrs	r2, r1
 8008d52:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d01a      	beq.n	8008d96 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	685b      	ldr	r3, [r3, #4]
 8008d66:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	430a      	orrs	r2, r1
 8008d74:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008d7a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008d7e:	d10a      	bne.n	8008d96 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	685b      	ldr	r3, [r3, #4]
 8008d86:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	430a      	orrs	r2, r1
 8008d94:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d00a      	beq.n	8008db8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	685b      	ldr	r3, [r3, #4]
 8008da8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	430a      	orrs	r2, r1
 8008db6:	605a      	str	r2, [r3, #4]
  }
}
 8008db8:	bf00      	nop
 8008dba:	370c      	adds	r7, #12
 8008dbc:	46bd      	mov	sp, r7
 8008dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dc2:	4770      	bx	lr

08008dc4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008dc4:	b580      	push	{r7, lr}
 8008dc6:	b086      	sub	sp, #24
 8008dc8:	af02      	add	r7, sp, #8
 8008dca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	2200      	movs	r2, #0
 8008dd0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008dd4:	f7f9 ff44 	bl	8002c60 <HAL_GetTick>
 8008dd8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	f003 0308 	and.w	r3, r3, #8
 8008de4:	2b08      	cmp	r3, #8
 8008de6:	d10e      	bne.n	8008e06 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008de8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008dec:	9300      	str	r3, [sp, #0]
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	2200      	movs	r2, #0
 8008df2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008df6:	6878      	ldr	r0, [r7, #4]
 8008df8:	f000 f82f 	bl	8008e5a <UART_WaitOnFlagUntilTimeout>
 8008dfc:	4603      	mov	r3, r0
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d001      	beq.n	8008e06 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008e02:	2303      	movs	r3, #3
 8008e04:	e025      	b.n	8008e52 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	f003 0304 	and.w	r3, r3, #4
 8008e10:	2b04      	cmp	r3, #4
 8008e12:	d10e      	bne.n	8008e32 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008e14:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008e18:	9300      	str	r3, [sp, #0]
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	2200      	movs	r2, #0
 8008e1e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008e22:	6878      	ldr	r0, [r7, #4]
 8008e24:	f000 f819 	bl	8008e5a <UART_WaitOnFlagUntilTimeout>
 8008e28:	4603      	mov	r3, r0
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d001      	beq.n	8008e32 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008e2e:	2303      	movs	r3, #3
 8008e30:	e00f      	b.n	8008e52 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	2220      	movs	r2, #32
 8008e36:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	2220      	movs	r2, #32
 8008e3e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	2200      	movs	r2, #0
 8008e46:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	2200      	movs	r2, #0
 8008e4c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008e50:	2300      	movs	r3, #0
}
 8008e52:	4618      	mov	r0, r3
 8008e54:	3710      	adds	r7, #16
 8008e56:	46bd      	mov	sp, r7
 8008e58:	bd80      	pop	{r7, pc}

08008e5a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008e5a:	b580      	push	{r7, lr}
 8008e5c:	b09c      	sub	sp, #112	; 0x70
 8008e5e:	af00      	add	r7, sp, #0
 8008e60:	60f8      	str	r0, [r7, #12]
 8008e62:	60b9      	str	r1, [r7, #8]
 8008e64:	603b      	str	r3, [r7, #0]
 8008e66:	4613      	mov	r3, r2
 8008e68:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008e6a:	e0a9      	b.n	8008fc0 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008e6c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008e6e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008e72:	f000 80a5 	beq.w	8008fc0 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008e76:	f7f9 fef3 	bl	8002c60 <HAL_GetTick>
 8008e7a:	4602      	mov	r2, r0
 8008e7c:	683b      	ldr	r3, [r7, #0]
 8008e7e:	1ad3      	subs	r3, r2, r3
 8008e80:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8008e82:	429a      	cmp	r2, r3
 8008e84:	d302      	bcc.n	8008e8c <UART_WaitOnFlagUntilTimeout+0x32>
 8008e86:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d140      	bne.n	8008f0e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e92:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008e94:	e853 3f00 	ldrex	r3, [r3]
 8008e98:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008e9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008e9c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008ea0:	667b      	str	r3, [r7, #100]	; 0x64
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	461a      	mov	r2, r3
 8008ea8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008eaa:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008eac:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008eae:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008eb0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008eb2:	e841 2300 	strex	r3, r2, [r1]
 8008eb6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8008eb8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d1e6      	bne.n	8008e8c <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008ebe:	68fb      	ldr	r3, [r7, #12]
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	3308      	adds	r3, #8
 8008ec4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ec6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008ec8:	e853 3f00 	ldrex	r3, [r3]
 8008ecc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008ece:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ed0:	f023 0301 	bic.w	r3, r3, #1
 8008ed4:	663b      	str	r3, [r7, #96]	; 0x60
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	3308      	adds	r3, #8
 8008edc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008ede:	64ba      	str	r2, [r7, #72]	; 0x48
 8008ee0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ee2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008ee4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008ee6:	e841 2300 	strex	r3, r2, [r1]
 8008eea:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008eec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d1e5      	bne.n	8008ebe <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	2220      	movs	r2, #32
 8008ef6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	2220      	movs	r2, #32
 8008efe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	2200      	movs	r2, #0
 8008f06:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8008f0a:	2303      	movs	r3, #3
 8008f0c:	e069      	b.n	8008fe2 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	f003 0304 	and.w	r3, r3, #4
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	d051      	beq.n	8008fc0 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	69db      	ldr	r3, [r3, #28]
 8008f22:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008f26:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008f2a:	d149      	bne.n	8008fc0 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008f34:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f3e:	e853 3f00 	ldrex	r3, [r3]
 8008f42:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f46:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008f4a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	461a      	mov	r2, r3
 8008f52:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008f54:	637b      	str	r3, [r7, #52]	; 0x34
 8008f56:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f58:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008f5a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008f5c:	e841 2300 	strex	r3, r2, [r1]
 8008f60:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008f62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d1e6      	bne.n	8008f36 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	3308      	adds	r3, #8
 8008f6e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f70:	697b      	ldr	r3, [r7, #20]
 8008f72:	e853 3f00 	ldrex	r3, [r3]
 8008f76:	613b      	str	r3, [r7, #16]
   return(result);
 8008f78:	693b      	ldr	r3, [r7, #16]
 8008f7a:	f023 0301 	bic.w	r3, r3, #1
 8008f7e:	66bb      	str	r3, [r7, #104]	; 0x68
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	3308      	adds	r3, #8
 8008f86:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008f88:	623a      	str	r2, [r7, #32]
 8008f8a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f8c:	69f9      	ldr	r1, [r7, #28]
 8008f8e:	6a3a      	ldr	r2, [r7, #32]
 8008f90:	e841 2300 	strex	r3, r2, [r1]
 8008f94:	61bb      	str	r3, [r7, #24]
   return(result);
 8008f96:	69bb      	ldr	r3, [r7, #24]
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	d1e5      	bne.n	8008f68 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	2220      	movs	r2, #32
 8008fa0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	2220      	movs	r2, #32
 8008fa8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	2220      	movs	r2, #32
 8008fb0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	2200      	movs	r2, #0
 8008fb8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8008fbc:	2303      	movs	r3, #3
 8008fbe:	e010      	b.n	8008fe2 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	69da      	ldr	r2, [r3, #28]
 8008fc6:	68bb      	ldr	r3, [r7, #8]
 8008fc8:	4013      	ands	r3, r2
 8008fca:	68ba      	ldr	r2, [r7, #8]
 8008fcc:	429a      	cmp	r2, r3
 8008fce:	bf0c      	ite	eq
 8008fd0:	2301      	moveq	r3, #1
 8008fd2:	2300      	movne	r3, #0
 8008fd4:	b2db      	uxtb	r3, r3
 8008fd6:	461a      	mov	r2, r3
 8008fd8:	79fb      	ldrb	r3, [r7, #7]
 8008fda:	429a      	cmp	r2, r3
 8008fdc:	f43f af46 	beq.w	8008e6c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008fe0:	2300      	movs	r3, #0
}
 8008fe2:	4618      	mov	r0, r3
 8008fe4:	3770      	adds	r7, #112	; 0x70
 8008fe6:	46bd      	mov	sp, r7
 8008fe8:	bd80      	pop	{r7, pc}

08008fea <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008fea:	b480      	push	{r7}
 8008fec:	b085      	sub	sp, #20
 8008fee:	af00      	add	r7, sp, #0
 8008ff0:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008ff8:	2b01      	cmp	r3, #1
 8008ffa:	d101      	bne.n	8009000 <HAL_UARTEx_DisableFifoMode+0x16>
 8008ffc:	2302      	movs	r3, #2
 8008ffe:	e027      	b.n	8009050 <HAL_UARTEx_DisableFifoMode+0x66>
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	2201      	movs	r2, #1
 8009004:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	2224      	movs	r2, #36	; 0x24
 800900c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	681a      	ldr	r2, [r3, #0]
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	f022 0201 	bic.w	r2, r2, #1
 8009026:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800902e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	2200      	movs	r2, #0
 8009034:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	68fa      	ldr	r2, [r7, #12]
 800903c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	2220      	movs	r2, #32
 8009042:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	2200      	movs	r2, #0
 800904a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800904e:	2300      	movs	r3, #0
}
 8009050:	4618      	mov	r0, r3
 8009052:	3714      	adds	r7, #20
 8009054:	46bd      	mov	sp, r7
 8009056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800905a:	4770      	bx	lr

0800905c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800905c:	b580      	push	{r7, lr}
 800905e:	b084      	sub	sp, #16
 8009060:	af00      	add	r7, sp, #0
 8009062:	6078      	str	r0, [r7, #4]
 8009064:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800906c:	2b01      	cmp	r3, #1
 800906e:	d101      	bne.n	8009074 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009070:	2302      	movs	r3, #2
 8009072:	e02d      	b.n	80090d0 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	2201      	movs	r2, #1
 8009078:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	2224      	movs	r2, #36	; 0x24
 8009080:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	681a      	ldr	r2, [r3, #0]
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	f022 0201 	bic.w	r2, r2, #1
 800909a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	689b      	ldr	r3, [r3, #8]
 80090a2:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	683a      	ldr	r2, [r7, #0]
 80090ac:	430a      	orrs	r2, r1
 80090ae:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80090b0:	6878      	ldr	r0, [r7, #4]
 80090b2:	f000 f84f 	bl	8009154 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	68fa      	ldr	r2, [r7, #12]
 80090bc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	2220      	movs	r2, #32
 80090c2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	2200      	movs	r2, #0
 80090ca:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80090ce:	2300      	movs	r3, #0
}
 80090d0:	4618      	mov	r0, r3
 80090d2:	3710      	adds	r7, #16
 80090d4:	46bd      	mov	sp, r7
 80090d6:	bd80      	pop	{r7, pc}

080090d8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80090d8:	b580      	push	{r7, lr}
 80090da:	b084      	sub	sp, #16
 80090dc:	af00      	add	r7, sp, #0
 80090de:	6078      	str	r0, [r7, #4]
 80090e0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80090e8:	2b01      	cmp	r3, #1
 80090ea:	d101      	bne.n	80090f0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80090ec:	2302      	movs	r3, #2
 80090ee:	e02d      	b.n	800914c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	2201      	movs	r2, #1
 80090f4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	2224      	movs	r2, #36	; 0x24
 80090fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	681a      	ldr	r2, [r3, #0]
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	f022 0201 	bic.w	r2, r2, #1
 8009116:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	689b      	ldr	r3, [r3, #8]
 800911e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	683a      	ldr	r2, [r7, #0]
 8009128:	430a      	orrs	r2, r1
 800912a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800912c:	6878      	ldr	r0, [r7, #4]
 800912e:	f000 f811 	bl	8009154 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	68fa      	ldr	r2, [r7, #12]
 8009138:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	2220      	movs	r2, #32
 800913e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	2200      	movs	r2, #0
 8009146:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800914a:	2300      	movs	r3, #0
}
 800914c:	4618      	mov	r0, r3
 800914e:	3710      	adds	r7, #16
 8009150:	46bd      	mov	sp, r7
 8009152:	bd80      	pop	{r7, pc}

08009154 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009154:	b480      	push	{r7}
 8009156:	b085      	sub	sp, #20
 8009158:	af00      	add	r7, sp, #0
 800915a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009160:	2b00      	cmp	r3, #0
 8009162:	d108      	bne.n	8009176 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	2201      	movs	r2, #1
 8009168:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	2201      	movs	r2, #1
 8009170:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009174:	e031      	b.n	80091da <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009176:	2308      	movs	r3, #8
 8009178:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800917a:	2308      	movs	r3, #8
 800917c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	689b      	ldr	r3, [r3, #8]
 8009184:	0e5b      	lsrs	r3, r3, #25
 8009186:	b2db      	uxtb	r3, r3
 8009188:	f003 0307 	and.w	r3, r3, #7
 800918c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	689b      	ldr	r3, [r3, #8]
 8009194:	0f5b      	lsrs	r3, r3, #29
 8009196:	b2db      	uxtb	r3, r3
 8009198:	f003 0307 	and.w	r3, r3, #7
 800919c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800919e:	7bbb      	ldrb	r3, [r7, #14]
 80091a0:	7b3a      	ldrb	r2, [r7, #12]
 80091a2:	4911      	ldr	r1, [pc, #68]	; (80091e8 <UARTEx_SetNbDataToProcess+0x94>)
 80091a4:	5c8a      	ldrb	r2, [r1, r2]
 80091a6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80091aa:	7b3a      	ldrb	r2, [r7, #12]
 80091ac:	490f      	ldr	r1, [pc, #60]	; (80091ec <UARTEx_SetNbDataToProcess+0x98>)
 80091ae:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80091b0:	fb93 f3f2 	sdiv	r3, r3, r2
 80091b4:	b29a      	uxth	r2, r3
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80091bc:	7bfb      	ldrb	r3, [r7, #15]
 80091be:	7b7a      	ldrb	r2, [r7, #13]
 80091c0:	4909      	ldr	r1, [pc, #36]	; (80091e8 <UARTEx_SetNbDataToProcess+0x94>)
 80091c2:	5c8a      	ldrb	r2, [r1, r2]
 80091c4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80091c8:	7b7a      	ldrb	r2, [r7, #13]
 80091ca:	4908      	ldr	r1, [pc, #32]	; (80091ec <UARTEx_SetNbDataToProcess+0x98>)
 80091cc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80091ce:	fb93 f3f2 	sdiv	r3, r3, r2
 80091d2:	b29a      	uxth	r2, r3
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80091da:	bf00      	nop
 80091dc:	3714      	adds	r7, #20
 80091de:	46bd      	mov	sp, r7
 80091e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091e4:	4770      	bx	lr
 80091e6:	bf00      	nop
 80091e8:	08009290 	.word	0x08009290
 80091ec:	08009298 	.word	0x08009298

080091f0 <__libc_init_array>:
 80091f0:	b570      	push	{r4, r5, r6, lr}
 80091f2:	4d0d      	ldr	r5, [pc, #52]	; (8009228 <__libc_init_array+0x38>)
 80091f4:	4c0d      	ldr	r4, [pc, #52]	; (800922c <__libc_init_array+0x3c>)
 80091f6:	1b64      	subs	r4, r4, r5
 80091f8:	10a4      	asrs	r4, r4, #2
 80091fa:	2600      	movs	r6, #0
 80091fc:	42a6      	cmp	r6, r4
 80091fe:	d109      	bne.n	8009214 <__libc_init_array+0x24>
 8009200:	4d0b      	ldr	r5, [pc, #44]	; (8009230 <__libc_init_array+0x40>)
 8009202:	4c0c      	ldr	r4, [pc, #48]	; (8009234 <__libc_init_array+0x44>)
 8009204:	f000 f820 	bl	8009248 <_init>
 8009208:	1b64      	subs	r4, r4, r5
 800920a:	10a4      	asrs	r4, r4, #2
 800920c:	2600      	movs	r6, #0
 800920e:	42a6      	cmp	r6, r4
 8009210:	d105      	bne.n	800921e <__libc_init_array+0x2e>
 8009212:	bd70      	pop	{r4, r5, r6, pc}
 8009214:	f855 3b04 	ldr.w	r3, [r5], #4
 8009218:	4798      	blx	r3
 800921a:	3601      	adds	r6, #1
 800921c:	e7ee      	b.n	80091fc <__libc_init_array+0xc>
 800921e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009222:	4798      	blx	r3
 8009224:	3601      	adds	r6, #1
 8009226:	e7f2      	b.n	800920e <__libc_init_array+0x1e>
 8009228:	080092a8 	.word	0x080092a8
 800922c:	080092a8 	.word	0x080092a8
 8009230:	080092a8 	.word	0x080092a8
 8009234:	080092ac 	.word	0x080092ac

08009238 <memset>:
 8009238:	4402      	add	r2, r0
 800923a:	4603      	mov	r3, r0
 800923c:	4293      	cmp	r3, r2
 800923e:	d100      	bne.n	8009242 <memset+0xa>
 8009240:	4770      	bx	lr
 8009242:	f803 1b01 	strb.w	r1, [r3], #1
 8009246:	e7f9      	b.n	800923c <memset+0x4>

08009248 <_init>:
 8009248:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800924a:	bf00      	nop
 800924c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800924e:	bc08      	pop	{r3}
 8009250:	469e      	mov	lr, r3
 8009252:	4770      	bx	lr

08009254 <_fini>:
 8009254:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009256:	bf00      	nop
 8009258:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800925a:	bc08      	pop	{r3}
 800925c:	469e      	mov	lr, r3
 800925e:	4770      	bx	lr
